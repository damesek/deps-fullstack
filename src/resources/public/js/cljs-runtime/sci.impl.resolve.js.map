{"version":3,"sources":["sci/impl/resolve.cljc"],"mappings":"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","names":["sci.impl.resolve/throw-error-with-location","msg","node","sci.impl.utils.throw_error_with_location","sci.impl.resolve/mark-resolve-sym","sym","cljs.core.vary_meta","m","cljs.core.assoc","p__54034","vec__54036","cljs.core.nth","sci.impl.resolve/check-permission!","ctx","check-sym","v","or__5045__auto__","sci.impl.utils/allowed-loop","sci.impl.utils/allowed-recur","sci.impl.utils/strip-core-ns","allow","sci.impl.vars/var?","cljs.core/not","cljs.core/meta","cljs.core/contains?","deny","var_args","G__54058","sci.impl.resolve/lookup*","js/Error","call?","sci.impl.resolve.lookup_STAR_","only-var?","cljs.core/deref","sym-ns","G__54059","cljs.core/namespace","cljs.core.symbol","sym-name","cljs.core/name","env","cnn","sci.impl.vars/current-ns-name","the-current-ns","G__54060","cljs.core.get_in","cljs.core._EQ_","G__54062","cljs.core.get","cljs.core/find","temp__5804__auto__","sci.impl.utils/ana-macros","G__54067","clazz","sci.impl.interop/resolve-class","cljs.core/with-meta","sci.impl.utils.ctx_fn","_ctx","_bindings","sci.impl.interop/get-static-field","sci.impl.vars/current-file","sci.impl.vars/current-ns","refers","kv","G__54076","G__54081","c","x","sci.impl.records.resolve_record_or_protocol_class","G__54101","sci.impl.resolve/lookup","sci.impl.resolve.lookup","tag","bindings","vec__54110","k","sci.impl.utils/kw-identical?","cljs.core/vreset!","cb","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj","_","cljs.core/assoc","sci.impl.utils/lookup","G__54139","sci.impl.resolve/resolve-symbol","sci.impl.resolve.resolve_symbol","res","cljs.core/second","n","and__5043__auto__","clojure.string/starts-with?","clojure.string/ends-with?"],"sourcesContent":["(ns sci.impl.resolve\n  {:no-doc true}\n  (:require [clojure.string :as str]\n            [sci.impl.evaluator :as eval]\n            [sci.impl.faster :as faster]\n            [sci.impl.interop :as interop]\n            [sci.impl.records :as records]\n            [sci.impl.utils :as utils :refer [strip-core-ns\n                                              ana-macros\n                                              ctx-fn\n                                              kw-identical?]]\n            [sci.impl.vars :as vars]))\n\n(defn throw-error-with-location [msg node]\n  (utils/throw-error-with-location msg node {:phase \"analysis\"}))\n\n(defn mark-resolve-sym\n  [sym]\n  (vary-meta\n   sym\n   (fn [m]\n     (assoc m :sci.impl/op :resolve-sym))))\n\n(defn check-permission! [ctx sym [check-sym  v]]\n  (or (identical? utils/allowed-loop sym)\n      (identical? utils/allowed-recur sym)\n      (let [check-sym (strip-core-ns check-sym)\n            allow (:allow ctx)]\n        (when-not (if allow (or (and (vars/var? v) (not (:sci/built-in (meta v))))\n                                (contains? allow check-sym))\n                      true)\n          (throw-error-with-location (str sym \" is not allowed!\") sym))\n        (let [deny (:deny ctx)]\n          (when (if deny (contains? deny check-sym)\n                    false)\n            (throw-error-with-location (str sym \" is not allowed!\") sym))))))\n\n(defn lookup*\n  ([ctx sym call?] (lookup* ctx sym call? false))\n  ([ctx sym call? only-var?]\n   (let [sym-ns (some-> (namespace sym) symbol)\n         sym-name (symbol (name sym))\n         env (faster/get-2 ctx :env)\n         env @env\n         cnn (vars/current-ns-name)\n         the-current-ns (-> env :namespaces cnn)\n         ;; resolve alias\n         sym-ns (when sym-ns (or (get-in the-current-ns [:aliases sym-ns])\n                                 sym-ns))]\n     (if sym-ns\n       (or\n        (when (or (= sym-ns 'clojure.core) (= sym-ns 'cljs.core))\n          (or (some-> env :namespaces (get 'clojure.core) (find sym-name))\n              (when-let [v (when call? (get ana-macros sym-name))]\n                [sym v])))\n        (or (some-> env :namespaces (get sym-ns) (find sym-name))\n            (when-not only-var?\n                 (when-let [clazz (interop/resolve-class ctx sym-ns)]\n                   [sym (if call?\n                          (with-meta\n                            [clazz sym-name]\n                            {:sci.impl.analyzer/static-access true})\n                          (ctx-fn\n                           (fn [_ctx _bindings]\n                             (interop/get-static-field [clazz sym-name]))\n                           nil\n                           sym\n                           (assoc (meta sym)\n                                  :file @vars/current-file\n                                  :ns @vars/current-ns)))]))))\n       ;; no sym-ns\n       (or\n        ;; prioritize refers over vars in the current namespace, see 527\n        (when-let [refers (:refers the-current-ns)]\n          (find refers sym-name))\n        (find the-current-ns sym) ;; env can contain foo/bar symbols from bindings\n        (let [kv (some-> env :namespaces (get 'clojure.core) (find sym-name))]\n          ;; only valid when the symbol isn't excluded\n          (when-not (some-> the-current-ns\n                            :refer\n                            (get 'clojure.core)\n                            :exclude\n                            (contains? sym-name))\n            kv))\n        (when (when call? (get ana-macros sym))\n          [sym sym])\n        (when-not only-var?\n          (or\n           (when-let [c (interop/resolve-class ctx sym)]\n             [sym c])\n           ;; resolves record or protocol referenced as class\n           ;; e.g. clojure.lang.IDeref which is really a var in clojure.lang/IDeref\n           (when-let [x (records/resolve-record-or-protocol-class ctx sym)]\n             [sym x]))))))))\n\n(defn lookup\n  ([ctx sym call?] (lookup ctx sym call? nil))\n  ([ctx sym call? tag]\n   (let [bindings (faster/get-2 ctx :bindings)]\n     (or\n      ;; bindings are not checked for permissions\n      (when-let [[k v]\n                 (find bindings sym)]\n        ;; never inline a binding at macro time, unless it's a function\n        (if (kw-identical? :sci.impl.analyzer/self-ref v)\n          (do\n            (vreset! (:self-ref ctx) true)\n            (when-let [cb (:closure-bindings ctx)]\n              (vswap! cb conj sym))\n            (if call?\n              [k v]\n              [k (ctx-fn\n                  (fn [_ctx bindings]\n                    ;; TODO: optimize\n                    @(eval/resolve-symbol bindings k))\n                  nil\n                  nil)]))\n          (let [;; pass along tag of expression!\n                _ (when-let [cb (:closure-bindings ctx)]\n                    (when-not (contains? (:param-map ctx) sym)\n                      (vswap! cb conj sym)))\n                v (if call? ;; resolve-symbol is already handled in the call case\n                    (mark-resolve-sym k)\n                    (let [v (ctx-fn\n                             (fn [_ctx bindings]\n                               (eval/resolve-symbol bindings k))\n                             nil\n                             (if tag\n                               (vary-meta k assoc :tag tag)\n                               k))]\n                      v))]\n            [k v])))\n      (when-let [kv (lookup* ctx sym call?)]\n        (when (:check-permissions ctx)\n          (check-permission! ctx sym kv))\n        kv)))))\n\n;; workaround for evaluator also needing this function\n(vreset! utils/lookup lookup)\n\n(defn resolve-symbol\n  ([ctx sym] (resolve-symbol ctx sym false nil))\n  ([ctx sym call?] (resolve-symbol ctx sym call? nil))\n  ([ctx sym call? tag]\n   (let [res (second\n              (or\n               (lookup ctx sym call? tag)\n               ;; TODO: check if symbol is in macros and then emit an error: cannot take\n               ;; the value of a macro\n               (let [n (name sym)]\n                 (cond\n                   (and call?\n                        (str/starts-with? n \".\")\n                        (> (count n) 1))\n                   [sym 'expand-dot*] ;; method invocation\n                   (and call?\n                        (str/ends-with? n \".\")\n                        (> (count n) 1))\n                   [sym 'expand-constructor]\n                   :else\n                   (throw-error-with-location\n                    (str \"Could not resolve symbol: \" (str sym))\n                    sym)))))]\n     ;; (prn 'resolve sym '-> res (meta res))\n     res)))\n"]}