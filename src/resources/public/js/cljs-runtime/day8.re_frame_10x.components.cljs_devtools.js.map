{"version":3,"sources":["day8/re_frame_10x/components/cljs_devtools.cljs"],"mappings":"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","names":["cljs.core/deref","day8.re-frame-10x.components.cljs-devtools/default-config","devtools.prefs/default-config","day8.re-frame-10x.components.cljs-devtools/base-config","day8.re_frame_10x.inlined_deps.garden.v1v3v10.garden.core.style","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px","day8.re-frame-10x.styles/gs-5","day8.re-frame-10x.components.cljs-devtools/body-style-base","day8.re-frame-10x.styles/gs-2","day8.re-frame-10x.styles/gs-12","day8.re-frame-10x.styles/nord3","day8.re-frame-10x.components.cljs-devtools/dark-ambiance-config","day8.re-frame-10x.styles/nord0","day8.re-frame-10x.styles/nord6","day8.re-frame-10x.components.cljs-devtools/bright-ambiance-config","day8.re-frame-10x.components.cljs-devtools/custom-config","cljs.core.merge","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.components.cljs-devtools/header","p__45338","vec__45339","map__45342","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","seq45335","G__45336","cljs.core/first","cljs.core/next","G__45337","self__5754__auto__","value","config","render-paths?","previous-config__45325__auto__","devtools.prefs/get-prefs","prefs__45326__auto__","devtools.prefs/set-prefs!","cljs.core._EQ_","js/Error","devtools.formatters.core/header-api-call","day8.re-frame-10x.components.cljs-devtools/body","p__45351","vec__45352","map__45355","seq45343","G__45344","G__45345","devtools.formatters.core/body-api-call","day8.re-frame-10x.components.cljs-devtools/has-body","devtools.formatters.core/has-body-api-call","day8.re-frame-10x.components.cljs-devtools/get-object","jsonml","day8.re-frame-10x.components.cljs-devtools/get-config","day8.re-frame-10x.components.cljs-devtools/jsonml-style-factory$","style-name45359","params45360","style45362","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/compile-css","factory-name45361","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.util/factory->name","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/ensure-style!","day8.re-frame-10x.components.cljs-devtools/jsonml-style","day8.re-frame-10x.styles/syntax-color","day8.re-frame-10x.components.cljs-devtools/toggle-style-factory$","style-name45364","params45365","base-style45370","key__44424__auto__","cljs.core/meta","name45369","fexpr__45373","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.util/build-style-name","style45367","cljs.core.into","factory-name45366","day8.re-frame-10x.components.cljs-devtools/toggle-style","ambiance","day8.re-frame-10x.styles/nord5","day8.re-frame-10x.components.cljs-devtools/data-structure","_","path","expanded?","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","day8.re-frame-10x.material/arrow-drop-down","day8.re-frame-10x.material/arrow-right","and__5043__auto__","G__45390","G__45391","day8.re-frame-10x.components.cljs-devtools/jsonml->hiccup","cljs.core.conj","G__45392","G__45393","p__45399","map__45403","day8.re-frame-10x.components.cljs-devtools/data-structure-with-path-annotations","path-id","expand-all?","indexed-path","devtools-path","opts","show-body?","cljs.core.not_EQ_","G__45404","G__45405","G__45406","G__45407","day8.re-frame-10x.components.cljs-devtools/jsonml->hiccup-with-path-annotations","day8.re_frame_10x.components.cljs_devtools.body","G__45408","G__45409","G__45410","G__45411","day8.re-frame-10x.components.cljs-devtools/string->css","css-string","clojure.string.split","p1__45414#","cljs.core.map","cljs.core.reduce","p__45420","vec__45422","acc","property","cljs.core.assoc","cljs.core.keyword","vec__45429","seq__45430","cljs.core/seq","first__45431","tag-name","attributes","children","tagnames","cljs.core/contains?","cljs.core.js__GT_clj","cljs.core.map_indexed","i","child","G__45434","G__45435","G__45438","G__45439","p__45444","map__45446","click-listener","middle-click-listener","menu-listener","vec__45450","seq__45451","first__45452","G__45454","G__45455","G__45456","G__45457","jsonml-path-index","cljs.core/last","absolute-devtools-path","element-id","cljs.core/random-uuid","child-element","child-value","js/Array","cljs.core/Keyword","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.create_class","component","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom/dom-node","goog.events/listen","G__45465","G__45466","G__45467","G__45468","G__45469","G__45470","G__45471","G__45472","day8.re-frame-10x.components.cljs-devtools/prn-str-render?","data","js/RegExp","cljs.core/boolean?","day8.re-frame-10x.components.cljs-devtools/prn-str-render-style-factory$","style-name45477","params45478","style45480","factory-name45479","day8.re-frame-10x.components.cljs-devtools/prn-str-render-style","day8.re-frame-10x.components.cljs-devtools/prn-str-render","cljs.core.prn_str","day8.re-frame-10x.components.cljs-devtools/simple-render","p__45490","vec__45491","seq45483","G__45484","G__45485","class","day8.re-frame-10x.components.re-com/box","day8.re-frame-10x.components.cljs-devtools/popup-menus","cljs.core.atom","day8.re-frame-10x.components.cljs-devtools/event-log","day8.re-frame-10x.components.cljs-devtools/build-popup","p__45503","vec__45504","seq45498","G__45499","G__45500","G__45501","G__45502","app-db","html-element","html-target","temp__5802__auto__","rendered?","popup-menu","js/goog.ui.PopupMenu","js-menu-style","js/goog.style.toStyleAttribute","create-menu-item","menu-text","js/goog.ui.MenuItem","js/goog.dom.createDom","goog.dom.TagName/DIV","goog.dom.TagName/SPAN","G__45507","copy-path-item","copy-obj-item","copy-repl-item","element-rect","target-rect","target-x-offset","js/window","element-x-pos","menu-x-pos","menu-y-pos","G__45508","G__45509","G__45510","G__45511","or__5045__auto__","js/goog.object.forEach","js/goog.ui.Component.EventType","type","js/goog.events.listen","e","cljs.core/peek","class-names","object","day8.re-frame-10x.tools.coll/get-in-with-lists-and-sets","cljs.core.swap_BANG_","cljs.core/conj","cljs.core/some","class-name","day8.re-frame-10x.fx.clipboard/copy!","js/console.error","cljs.core/assoc","day8.re-frame-10x.components.cljs-devtools/simple-render-with-path-annotations","p__45537","p__45538","map__45539","vec__45540","seq45523","G__45524","G__45525","G__45526","update-path-fn","sort?","open-new-inspectors?","cljs.core/map?","cljs.core/sorted-map","input-field-path","cljs.core/second","shadow-root","js/document","root-div","cljs.core.filter","element","menu-html-target","event","target","path-obj","day8.re-frame-10x.tools.reader.edn/read-string-maybe","day8.re_frame_10x.components.cljs_devtools.build_popup","btn","day8.re_frame_10x.components.cljs_devtools.header"],"sourcesContent":["(ns day8.re-frame-10x.components.cljs-devtools\n  (:require-macros\n    [day8.re-frame-10x.components.cljs-devtools                   :refer [with-cljs-devtools-prefs]])\n  (:require\n    [clojure.string :as string]\n    [devtools.prefs]\n    [devtools.formatters.core]\n    [goog.dom]\n    [goog.events]\n    [goog.style]\n    [goog.ui.PopupMenu]\n    [goog.ui.MenuItem]\n    [goog.ui.Component]\n    [goog.object]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.core    :refer [style]]\n    [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units   :refer [px]]\n    [day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.core    :refer [defclass]]\n    [day8.re-frame-10x.components.re-com                          :as rc]\n    [day8.re-frame-10x.material                                   :as material]\n    [day8.re-frame-10x.styles                                     :as styles]\n    [day8.re-frame-10x.panels.app-db.events                       :as app-db.events]\n    [day8.re-frame-10x.panels.app-db.subs                         :as app-db.subs]\n    [day8.re-frame-10x.fx.clipboard                               :as clipboard]\n    [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core   :as r]\n    [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom    :as dom]\n    [day8.re-frame-10x.tools.coll                                 :as tools.coll]\n    [day8.re-frame-10x.tools.reader.edn                           :as reader.edn]\n    [day8.re-frame-10x.panels.settings.subs                       :as settings.subs])\n  (:import\n    [goog.dom TagName]))\n\n(def default-config @devtools.prefs/default-config)\n\n(defn base-config\n  []\n  {; Hide index tags\n   :index-tag                              [:span :none-style]\n   :none-style                             (style {:display :none})\n\n   ; Our JSON renderer does not have hierarchy depth limit,\n   ; See https://github.com/binaryage/cljs-devtools/blob/master/src/lib/devtools/formatters/budgeting.cljs\n   :initial-hierarchy-depth-budget         false\n   :item-style                             (style {:display     :inline-block\n                                                   :white-space :nowrap\n                                                   :border-left [[(px 2) :solid :#000]]\n                                                   :padding     [[0 styles/gs-5 0 styles/gs-5]]\n                                                   :margin      [[(px 1 0 0 0)]]})})\n\n\n\n\n\n(def body-style-base\n  {:display          :inline-block\n   :padding          [[styles/gs-2 styles/gs-12]]\n   :border           [[(px 1) :solid styles/nord3]]\n   :margin           (px 1)\n   :margin-top       0})\n\n\n(def dark-ambiance-config\n  {:cljs-land-style (style {:background-color styles/nord0\n                            :color            styles/nord6})\n   :body-style      (style body-style-base {:background-color styles/nord0})})\n\n(def bright-ambiance-config\n  {:cljs-land-style (style {:background-color styles/nord6\n                            :color            styles/nord0})\n   :body-style      (style body-style-base {:background-color styles/nord6})})\n\n;; This used to be in the api-call fn below. However, recalculating this on *every* render is expensive so moved\n;; here as static def.\n;; TODO: If we expose ambiance and/or syntax color scheme as settings will need to fix this, maybe by recalculating\n;; at the time the setting is changed/loaded.\n(def custom-config\n  (merge default-config (base-config ) #_bright-ambiance-config))\n\n(defn header [value config & [{:keys [render-paths?]}]]\n  (with-cljs-devtools-prefs\n    (if render-paths?\n      (merge custom-config {:render-path-annotations       true})\n      custom-config)\n    (devtools.formatters.core/header-api-call value config)))\n\n(defn body [value config & [{:keys [render-paths?]}]]\n  (with-cljs-devtools-prefs\n    (if render-paths?\n      (merge custom-config {:render-path-annotations       true})\n      custom-config)\n    (devtools.formatters.core/body-api-call value config)))\n\n(defn has-body [value config]\n  (with-cljs-devtools-prefs custom-config\n    (devtools.formatters.core/has-body-api-call value config)))\n\n(defn get-object [jsonml]\n  (.-object (get jsonml 1)))\n\n(defn get-config [jsonml]\n  (.-config (get jsonml 1)))\n\n(declare jsonml->hiccup)\n(declare jsonml->hiccup-with-path-annotations)\n\n(defclass jsonml-style\n  []\n  {:display          :inline\n   :flex-direction   :row\n   :background-color (styles/syntax-color :bright :cljs-devtools :signature-background)}\n  [\"> span\"\n   {:vertical-align :text-top}]\n  [:li\n   {:margin 0}])\n\n(defclass toggle-style\n  [ambiance]\n  {:cursor      :pointer\n   :display     :inline\n   :align-self  :center\n   #_#_:line-height 1}\n  [:button\n   {:cursor :pointer\n    :background :none\n    :border :none}]\n  [:svg :path\n   {:fill (if (= ambiance :bright) styles/nord0 styles/nord5)}])\n\n(defn data-structure [_ path]\n  (let [expanded? (rf/subscribe [::app-db.subs/node-expanded? path])]\n    (fn [jsonml path]\n      [:span\n       {:class (jsonml-style)}\n       [:span {:class    (toggle-style :bright)\n               :on-click #(rf/dispatch [::app-db.events/toggle-expansion path])}\n        [:button\n         (if @expanded?\n           [material/arrow-drop-down]\n           [material/arrow-right])]]\n       (if (and @expanded? (has-body (get-object jsonml) (get-config jsonml)))\n         (jsonml->hiccup\n           (body\n             (get-object jsonml)\n             (get-config jsonml))\n           (conj path :body))\n         (jsonml->hiccup\n           (header\n             (get-object jsonml)\n             (get-config jsonml))\n           (conj path :header)))])))\n\n(defn data-structure-with-path-annotations [_ _ _ {:keys [path-id]}]\n  (let [expand-all?   (rf/subscribe [::app-db.subs/expand-all? path-id]) ;; default is nil, false means that we have collapsed the app-db\n        ;; true means we have expanded the whole db\n        render-paths? (rf/subscribe [::app-db.subs/data-path-annotations?])]\n    (fn [jsonml indexed-path devtools-path opts]\n      (let [expanded?  (rf/subscribe [::app-db.subs/node-expanded? indexed-path])\n            show-body? (and (has-body (get-object jsonml) (get-config jsonml))\n                            (cond\n                              @expand-all? true\n                              (and @expanded? (not= @expand-all? false)) true))]\n        [:span\n         {:class (jsonml-style)}\n         [:span {:class    (toggle-style :bright)\n                 :on-click #(do (rf/dispatch [::app-db.events/toggle-expansion indexed-path])\n                                (rf/dispatch [::app-db.events/set-expand-all? path-id nil]))}\n          [:button\n           (if show-body?\n             [material/arrow-drop-down]\n             [material/arrow-right])]]\n         (if show-body?\n           (jsonml->hiccup-with-path-annotations\n             (body\n               (get-object jsonml)\n               (get-config jsonml)\n               {:render-paths? @render-paths?})\n             (conj indexed-path :body)\n             devtools-path\n             opts)\n           (jsonml->hiccup-with-path-annotations\n             (header\n               (get-object jsonml)\n               (get-config jsonml))\n             (conj indexed-path :header)\n             devtools-path\n             opts))]))))\n\n(defn string->css\n  \"This function converts jsonml css-strings to valid css maps for hiccup.\n  Example: 'margin-left:0px;min-height:14px;' converts to\n           {:margin-left '0px', :min-height '14px'}\"\n  [css-string]\n  (->> (string/split css-string #\";\")\n       (map #(string/split % #\":\"))\n       (reduce (fn [acc [property value]]\n                 (assoc acc (keyword property) value)) {})))\n\n(defn jsonml->hiccup\n  \"JSONML is the format used by Chrome's Custom Object Formatters.\n  The spec is at https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview.\n\n  JSONML is pretty much Hiccup over JSON. Chrome's implementation of this can\n  be found at https://cs.chromium.org/chromium/src/third_party/WebKit/Source/devtools/front_end/object_ui/CustomPreviewComponent.js\n  \"\n  [jsonml path]\n  (if (number? jsonml)\n    jsonml\n    (let [[tag-name attributes & children] jsonml\n          tagnames #{\"div\" \"span\" \"ol\" \"li\" \"table\" \"tr\" \"td\"}]\n      (cond\n        (contains? tagnames tag-name) (into\n                                        [(keyword tag-name) {:style (-> (js->clj attributes)\n                                                                        (get \"style\")\n                                                                        (string->css))}]\n                                        (map-indexed (fn [i child] (jsonml->hiccup child (conj path i))))\n                                        children)\n\n        (= tag-name \"object\") [data-structure jsonml path]\n        (= tag-name \"annotation\") (into [:span {}]\n                                        (map-indexed (fn [i child] (jsonml->hiccup child (conj path i))))\n                                        children)\n        :else jsonml))))\n\n(defn jsonml->hiccup-with-path-annotations\n  \"JSONML is the format used by Chrome's Custom Object Formatters.\n  The spec is at https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview.\n\n  JSONML is pretty much Hiccup over JSON. Chrome's implementation of this can\n  be found at https://cs.chromium.org/chromium/src/third_party/WebKit/Source/devtools/front_end/object_ui/CustomPreviewComponent.js\n  \"\n  [jsonml indexed-path devtools-path {:keys [click-listener middle-click-listener menu-listener] :as opts}] ;;indexed-path\n  ;; is updated on every html element such as `tagnames` while devtools-path is updated only when we encounter an\n  ;; element that contains the `:path` attribute.\n  (if (number? jsonml)\n    jsonml\n    (let [[tag-name attributes & children] jsonml\n          tagnames #{\"div\" \"span\" \"ol\" \"li\" \"table\" \"tr\" \"td\"}]\n      (cond\n        (contains? tagnames tag-name) (into\n                                        [(keyword tag-name) {:style (-> (js->clj attributes)\n                                                                        (get \"style\")\n                                                                        (string->css))}]\n                                        (map-indexed (fn [i child] (jsonml->hiccup-with-path-annotations child (conj indexed-path i) devtools-path opts)))\n                                        children)\n\n        (= tag-name \"object\")         [data-structure-with-path-annotations jsonml indexed-path devtools-path opts]\n        (= tag-name \"annotation\")     (let [jsonml-path-index       (-> attributes\n                                                                        (js->clj :keywordize-keys true)\n                                                                        :path\n                                                                        last) ;;index of the current element in the immediate parent\n                                            absolute-devtools-path  (if jsonml-path-index\n                                                                      (conj devtools-path jsonml-path-index)\n                                                                      devtools-path) ;; path of the current visible db from root node view\n                                            element-id              (str (random-uuid))\n                                            child-element           (nth children 0 nil)\n                                            child-value             (when (instance? js/Array child-element)\n                                                                      (nth child-element 2 nil))]\n                                        ;; add menu only to strings, numbers and keywords\n                                        (if (or (string? child-value)\n                                                (number? child-value)\n                                                (keyword? child-value))\n                                          [:> (r/create-class\n                                                {:component-did-mount (fn [component]\n                                                                        (let [component (dom/dom-node component)]\n                                                                          (goog.events/listen component \"contextmenu\" menu-listener)\n                                                                          (goog.events/listen component \"dblclick\" click-listener)\n                                                                          (goog.events/listen component \"mousedown\" middle-click-listener)))\n                                                 :reagent-render      (fn []\n                                                                        (into [:span {:id        element-id\n                                                                                      :class     \"path-annotation\"\n                                                                                      :data-path (str absolute-devtools-path)}]\n                                                                              (map-indexed (fn [i child] (jsonml->hiccup-with-path-annotations child (conj indexed-path i) absolute-devtools-path opts)) children)))})]\n                                          (into [:span {}]\n                                                (map-indexed (fn [i child] (jsonml->hiccup-with-path-annotations child (conj indexed-path i) absolute-devtools-path opts)) children))))\n        :else                         jsonml))))\n\n(defn prn-str-render?\n  [data]\n  (or (string? data)\n      (instance? js/RegExp data)\n      (number? data)\n      (boolean? data)\n      (nil? data)))\n\n(defclass prn-str-render-style\n  []\n  {:background-color (styles/syntax-color :bright :cljs-devtools :signature-background)\n   :color            (styles/syntax-color :bright :cljs-devtools :bool)})\n\n(defn prn-str-render\n  [data]\n  [:div {:class (prn-str-render-style)}\n   (prn-str data)])\n\n(defn simple-render\n  [data path & [class]]\n  [rc/box\n   :size  \"1\"\n   :class (str (jsonml-style) \" \" class)\n   :child\n   (if (prn-str-render? data)\n     (prn-str-render data)\n     (jsonml->hiccup (header data nil) (conj path 0)))])\n\n(def popup-menus (atom {}))                                 ;; stores all the current rendered menus to prevent re-rendering the same menu twice\n(def event-log (atom '()))                                  ;;stores a history of the events, treated as a stack\n\n;; `html-element` is the html element that has received the right click\n;; `app-db` is the full app db\n;; `path` is the current path at the point where the popup is clicked in `data`\n;; `html-target`, optional, is the element which the menus will be rendered in\n(defn build-popup\n  [app-db path indexed-path html-element & [html-target]]\n  (if-let [rendered? (get @popup-menus (.-id html-element))]\n    (.setVisible rendered? true)                            ;; we have already rendered the menu, proceed to display it\n    (let [popup-menu       (goog.ui.PopupMenu.)\n          js-menu-style    (-> #js {:text-align \"center\"\n                                    :padding    \"10px\"\n                                    :border     \"1px solid #b9bdc6\"}\n                               (goog.style.toStyleAttribute))\n          create-menu-item (fn [menu-text]\n                             (-> (goog.dom.createDom\n                                   TagName.DIV\n                                   #js {}\n                                   (goog.dom.createDom TagName.SPAN #js {} menu-text))\n                                 (doto (.setAttribute \"style\" js-menu-style))\n                                 goog.ui.MenuItem.))\n          copy-path-item   (create-menu-item \"Copy path\")\n          copy-obj-item    (create-menu-item \"Copy object\")\n          copy-repl-item   (create-menu-item \"Copy REPL command\")\n          element-rect     (.getBoundingClientRect html-element)\n          target-rect      (when html-target (.getBoundingClientRect html-target))\n          target-x-offset  (when target-rect (+ (.-left target-rect) (.-scrollX js/window)))\n          element-x-pos    (+ (.-left element-rect) (.-scrollX js/window))\n          ;; element-x-pos is relative to window, so we remove offset of element we're rendering in below\n          menu-x-pos       (if target-x-offset\n                             (- element-x-pos target-x-offset)\n                             element-x-pos)\n          menu-y-pos       (+ (.-top element-rect) (.-scrollY js/window))]\n      (doto copy-path-item\n        (.addClassName \"copy-path\")\n        (.addClassName \"10x-menu-item\"))\n      (doto copy-obj-item\n        (.addClassName \"copy-object\")\n        (.addClassName \"10x-menu-item\"))\n      (doto copy-repl-item\n        (.addClassName \"copy-repl\")\n        (.addClassName \"10x-menu-item\"))\n      (doto popup-menu\n        (.addItem copy-path-item)\n        (.addItem copy-obj-item)\n        (.addItem copy-repl-item)\n        (.showAt menu-x-pos menu-y-pos)\n        (.render (or html-target html-element)))            ;;if menu target is not supplied we render on clicked element\n      (goog.object.forEach\n        goog.ui.Component.EventType\n        (fn [type]\n          (goog.events.listen\n            popup-menu\n            type\n            (fn [e]\n              (cond\n                (= (.-type e) \"hide\")\n                (when (= (peek @event-log) \"highlight\")\n                  ;; if the last event registered is 'highlight' then we should not close the dialog\n                  ;; `highlight` event is dispatched right before `action`. Action would not be dispatched\n                  ;; if the preceding `highlight` closes the dialog\n                  (.preventDefault e))\n\n                ;; `action` is thrown after hide\n                ;; `action` is thrown before unhighlight -> hide -> leave\n                (= (.-type e) \"action\")\n                (let [class-names (-> e .-target .getExtraClassNames js->clj)\n                      object      (tools.coll/get-in-with-lists-and-sets app-db path)]\n                  (swap! event-log conj \"action\")\n                  (cond\n                    (some (fn [class-name] (= class-name \"copy-object\")) class-names)\n                    (if (or object (= object false))\n                      (clipboard/copy! object)              ;; note we can't copy nil objects\n                      (js/console.error \"Could not copy!\"))\n\n                    (some (fn [class-name] (= class-name \"copy-path\")) class-names)\n                    (clipboard/copy! path)\n\n                    (some (fn [class-name] (= class-name \"copy-repl\")) class-names)\n                    (clipboard/copy! (str \"(simple-render-with-path-annotations \" app-db \" \" [\"app-db-path\" indexed-path] {} \")\"))))\n\n                :else\n                (swap! event-log conj (.-type e)))))))\n      (swap! popup-menus assoc (.-id html-element) popup-menu))))\n\n(defn simple-render-with-path-annotations\n  [data indexed-path {:keys [object update-path-fn sort?] :as opts} & [class]]\n  (let [render-paths?         (rf/subscribe [::app-db.subs/data-path-annotations?])\n        open-new-inspectors?  @(rf/subscribe [::settings.subs/open-new-inspectors?])\n        data                  (if (and sort? (map? data)) (into (sorted-map) data) data)\n        input-field-path      (second indexed-path)              ;;path typed in input-box\n        shadow-root           (-> (.getElementById js/document \"--re-frame-10x--\") ;;main shadow-root html component\n                                  .-shadowRoot\n                                  .-children)\n        root-div              (-> (filter (fn [element]     ;; root re-frame-10x parent div\n                                            (= (.-tagName element) \"DIV\")) shadow-root)\n                                  first)\n        menu-html-target      (when root-div\n                                (.-firstChild root-div))\n        menu-html-target      (when (= (.-childElementCount menu-html-target) 2) ;; we will render menus on this element\n                                (.-lastChild menu-html-target))\n        ;; triggered during `contextmenu` event when a path annotation is right-clicked\n        menu-listener         (fn [event]\n                                ;; at this stage `data` might have changed\n                                ;; we have to rely on `current-data` alias `obj`\n                                (let [target   (-> event .-target .-parentElement)\n                                      path     (.getAttribute target \"data-path\")\n                                      path-obj (reader.edn/read-string-maybe path)]\n                                  (.preventDefault event)\n                                  (build-popup object path-obj indexed-path target menu-html-target)))\n        ;; triggered during `click` event when a path annotation is clicked\n        click-listener        (fn [event]\n                                (let [target (-> event .-target .-parentElement)\n                                      path   (.getAttribute target \"data-path\")\n                                      btn    (.-button event)]\n                                  (when (= btn 0)           ;;left click btn\n                                    (rf/dispatch (conj update-path-fn path)))))\n        ;; triggered during `mousedown` event when an element is clicked.\n        middle-click-listener (fn [event]\n                                (let [target (-> event .-target .-parentElement)\n                                      path   (.getAttribute target \"data-path\")\n                                      btn    (.-button event)]\n                                  (.preventDefault event)\n                                  (when (= btn 1)           ;;middle click btn\n                                    (rf/dispatch [::app-db.events/create-path-and-skip-to path open-new-inspectors?]))))]\n    [rc/box\n     :size \"1\"\n     :class (str (jsonml-style) \" \" class)\n     :child\n     (if (prn-str-render? data)\n       (prn-str-render data)\n       (jsonml->hiccup-with-path-annotations\n         (header data nil {:render-paths? @render-paths?})\n         (conj indexed-path 0)\n         (or input-field-path [])\n         (assoc opts\n           :click-listener        click-listener\n           :middle-click-listener middle-click-listener\n           :menu-listener         menu-listener)))]))"]}