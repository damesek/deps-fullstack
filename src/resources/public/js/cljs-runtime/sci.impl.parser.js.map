{"version":3,"sources":["sci/impl/parser.cljc"],"mappings":"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","names":["sci.impl.parser/eof","sci.impl.parser/read-eval","sci.impl.vars.new_var","sci.impl.vars/clojure-core-ns","sci.impl.parser/data-readers","sci.impl.parser/default-data-reader-fn","sci.impl.parser/reader-resolver","sci.impl.parser/default-opts","edamame.core/normalize-opts","obj","cljs.core/Symbol","cljs.core/seq?","sci.impl.parser/var->sym","v","temp__5804__auto__","m","cljs.core/meta","var-name","ns","cljs.core.symbol","sci.impl.vars/getName","sci.impl.parser/fully-qualify","ctx","sym","cljs.core/deref","env","sym-ns","n","cljs.core/namespace","sym-name-str","cljs.core/name","current-ns","sci.impl.vars/current-ns-name","current-ns-str","namespaces","cljs.core.get","the-current-ns","aliases","ret","cljs.core/not","or__5045__auto__","refers","cljs.core/contains?","G__57258","sci.impl.utils/ana-macros","sci.impl.interop/fully-qualify-class","cljs.core.get_in","temp__5802__auto__","sci.impl.parser/throw-eval-read","_","cljs.core.ex_info","sci.impl.parser/auto-resolve","opts","env-val","auto-resolve","cljs.core.assoc","var_args","G__57261","sci.impl.parser/parse-next","js/Error","r","sci.impl.parser.parse_next","features","readers","sci.impl.vars/var?","parse-opts","G__57262","p1__57259#","t","and__5043__auto__","fexpr__57263","G__57264","G__57266","G__57267","G__57268","fexpr__57265","sci.impl.utils/eval-resolve-state","f","form","x","sci.impl.utils/eval","cljs.core.merge","e57269","edamame.core.parse_next","sci.impl.utils/kw-identical?","cljs.core/ExceptionInfo","e","cljs.core/ex-data","sci.impl.vars/current-file","sci.impl.parser/reader","string-reader","cljs.tools.reader.reader-types/string-reader","buf-len","pushback-reader","cljs.tools.reader.reader-types/PushbackReader","cljs.core.object_array","cljs.tools.reader.reader_types.indexing_push_back_reader","sci.impl.parser/get-line-number","reader","cljs.tools.reader.reader-types/get-line-number","sci.impl.parser/get-column-number","cljs.tools.reader.reader-types/get-column-number","sci.impl.parser/parse-string","s"],"sourcesContent":["(ns sci.impl.parser\n  {:no-doc true}\n  (:refer-clojure :exclude [read-string eval])\n  (:require\n   [clojure.tools.reader.reader-types :as r]\n   [edamame.core :as edamame]\n   [sci.impl.interop :as interop]\n   [sci.impl.utils :as utils]\n   [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def ^:const eof :sci.impl.parser.edamame/eof)\n\n(def read-eval\n  (vars/new-var '*read-eval true {:ns vars/clojure-core-ns\n                                  :dynamic true}))\n\n(def data-readers\n  (vars/new-var '*default-data-reader-fn* {}\n                {:ns vars/clojure-core-ns\n                 :dynamic true}))\n\n(def default-data-reader-fn\n  (vars/new-var '*default-data-reader-fn* nil\n                {:ns vars/clojure-core-ns\n                 :dynamic true}))\n\n(def reader-resolver\n  (vars/new-var '*reader-resolver* nil\n                {:ns vars/clojure-core-ns\n                 :dynamic true}))\n\n(def default-opts\n  (edamame/normalize-opts\n   {:all true\n    :read-eval false\n    :row-key :line\n    :col-key :column\n    :read-cond :allow\n    :location? (fn [obj]\n                 (or\n                  ;; for fine-grained error messages during analysis we also add\n                  ;; locations to symbols. This adds about 10% to parse/analysis\n                  ;; time.\n\n                  ;; $ tmp/bb-only-seq-and-sym-locs tmp/meander.clj\n                  ;; \"Elapsed time: 120.448655 msecs\"\n\n                  ;; $ tmp/bb-only-seq-locs tmp/meander.clj\n                  ;; \"Elapsed time: 110.869661 msecs\"\n\n                  (symbol? obj)\n                  ;; same as clojure\n                  (seq? obj)))\n    :end-location false}))\n\n(defn var->sym [v]\n  (when-let [m (meta v)]\n    (when-let [var-name (:name m)]\n      (when-let [ns (:ns m)]\n        (symbol (str (vars/getName ns))\n                (str var-name))))))\n\n(defn fully-qualify [ctx sym]\n  (let [env @(:env ctx)\n        sym-ns (when-let [n (namespace sym)]\n                 (symbol n))\n        sym-name-str (name sym)\n        current-ns (vars/current-ns-name)\n        current-ns-str (str current-ns)\n        namespaces (get env :namespaces)\n        the-current-ns (get namespaces current-ns)\n        aliases (:aliases the-current-ns)\n        ret (if-not sym-ns\n              (or (when-let [refers (:refers the-current-ns)]\n                    (when-let [v (get refers sym)]\n                      (var->sym v)))\n                  (when-let [v (get the-current-ns sym)]\n                    (var->sym v))\n                  (when (or (and (contains? (get namespaces 'clojure.core) sym)\n                                 ;; only valid when the symbol isn't excluded\n                                 (not (some-> the-current-ns\n                                              :refer\n                                              (get 'clojure.core)\n                                              :exclude\n                                              (contains? sym ))))\n                            (contains? utils/ana-macros sym))\n                    (symbol \"clojure.core\" sym-name-str))\n                  (interop/fully-qualify-class ctx sym)\n                  ;; all unresolvable symbols all resolved in the current namespace\n                  (symbol current-ns-str sym-name-str))\n              (if (get-in env [:namespaces sym-ns])\n                sym\n                (if-let [ns (get aliases sym-ns)]\n                  (symbol (str ns) sym-name-str)\n                  sym)))]\n    ret))\n\n(defn throw-eval-read [_]\n  (throw (ex-info \"EvalReader not allowed when *read-eval* is false.\"\n                  {:type :sci.error/parse})))\n\n(defn auto-resolve [ctx opts]\n  (or (:auto-resolve opts)\n      (let [env (:env ctx)\n            env-val @env\n            current-ns (vars/current-ns-name)\n            the-current-ns (get-in env-val [:namespaces current-ns])\n            aliases (:aliases the-current-ns)\n            auto-resolve (assoc aliases :current current-ns)]\n        auto-resolve)))\n\n(defn parse-next\n  ([ctx r]\n   (parse-next ctx r nil))\n  ([ctx r opts]\n   (let [features (:features ctx)\n         readers (:readers ctx)\n         readers (if (vars/var? readers) @readers readers)\n         auto-resolve (auto-resolve ctx opts)\n         parse-opts (cond-> (assoc default-opts\n                                   :features features\n                                   :auto-resolve auto-resolve\n                                   :syntax-quote {:resolve-symbol #(fully-qualify ctx %)}\n                                   :readers (fn [t]\n                                              (or (and readers (readers t))\n                                                  (@data-readers t)\n                                                  (some-> (@utils/eval-resolve-state ctx {} t)\n                                                          meta\n                                                          :sci.impl.record/map-constructor)\n                                                  (when-let [f @default-data-reader-fn]\n                                                    (fn [form]\n                                                      (f t form)))))\n                                   :read-eval (if @read-eval\n                                                (fn [x]\n                                                  (utils/eval ctx x))\n                                                throw-eval-read))\n                      opts (merge opts))\n         ret (try (let [v (edamame/parse-next r parse-opts)]\n                    (if (utils/kw-identical? v :edamame.core/eof)\n                      eof\n                      v))\n                  (catch #?(:clj clojure.lang.ExceptionInfo\n                            :cljs cljs.core/ExceptionInfo) e\n                    (throw (ex-info #?(:clj (.getMessage e)\n                                       :cljs (.-message e))\n                                    (assoc (ex-data e)\n                                           :type :sci.error/parse\n                                           :phase \"parse\"\n                                           :file @vars/current-file)\n                                    e))))]\n     ret)))\n\n(defn reader [x]\n  #?(:clj (r/indexing-push-back-reader (r/push-back-reader x))\n     :cljs (let [string-reader (r/string-reader x)\n                 buf-len 1\n                 pushback-reader (r/PushbackReader. string-reader\n                                                    (object-array buf-len)\n                                                    buf-len buf-len)]\n             (r/indexing-push-back-reader pushback-reader))))\n\n(defn get-line-number [reader]\n  (r/get-line-number reader))\n\n(defn get-column-number [reader]\n  (r/get-column-number reader))\n\n(defn parse-string\n  ([ctx s]\n   (let [r (reader s)\n         v (parse-next ctx r)]\n     (if (utils/kw-identical? eof v) nil v))))\n\n;;;; Scratch\n\n(comment\n  )\n"]}