{"version":3,"sources":["sci/impl/opts.cljc"],"mappings":"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","names":["sci.impl.opts/init-env!","env","bindings","aliases","namespaces","imports","load-fn","cljs.core.swap_BANG_","cljs.core.merge_with","cljs.core/merge","sci.impl.namespaces/namespaces","cljs.core.assoc","sci.impl.vars/user-ns","cljs.core.merge","sci.impl.namespaces/aliases","cljs.core.get_in","cljs.core.update","cljs.core/assoc","sci.impl.vars/->SciVar","cljs.core/make-hierarchy","sci.impl.vars/clojure-core-ns","temp__5802__auto__","env-imports","cljs.core/not","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.impl.opts/process-permissions","seq64932","G__64933","cljs.core/first","cljs.core/next","self__5754__auto__","prev-perms","permissions","cljs.core/not-empty","cljs.core.into","cljs.core.comp","cljs.core/cat","cljs.core.map","sci.impl.utils/strip-core-ns","p1__64934#","p1__64935#","sci.impl.opts/default-classes","js/Error","msg","filename","line","cljs.core/Delay","goog.string/StringBuffer","sci.impl.opts/default-imports","sci.impl.opts/normalize-classes","classes","class->opts","cljs.core/transient","cljs.core/select-keys","kvs","vec__64936","cljs.core.nth","sym","class-opts","cljs.core.assoc_BANG_","cljs.core/map?","cljs.core/rest","cljs.core/persistent!","sci.impl.opts/default-reify-fn","_","sci.impl.opts/->ctx","features","readers","check-permissions?","p__64939","map__64940","cljs.core/--destructure-map","cljs.core.get","reify-fn","disable-arity-checks","allow","uberscript","deny","proxy-fn","sci.impl.opts/init","or__5045__auto__","cljs.core.atom","raw-classes","ctx","sci.impl.opts.process_permissions","sci.impl.opts/merge-opts","opts","map__64941"],"sourcesContent":["(ns sci.impl.opts\n  {:no-doc true}\n  (:require\n   #?(:cljs [goog.string])\n   [sci.impl.namespaces :as namespaces]\n   [sci.impl.utils :as utils :refer [strip-core-ns]]\n   [sci.impl.vars :as vars]\n   [sci.impl.types :as types]\n   [sci.lang])\n  #?(:clj (:import [sci.impl.types IReified])))\n\n#?(:clj\n   (defrecord Env [namespaces imports load-fn]))\n\n(defn init-env! [env bindings aliases namespaces imports load-fn]\n  (swap! env (fn [env]\n               (let [namespaces (merge-with merge\n                                            namespaces/namespaces\n                                            {'user (assoc bindings\n                                                          :obj vars/user-ns)}\n                                            namespaces\n                                            (:namespaces env))\n                     aliases (merge namespaces/aliases aliases\n                                    (get-in env [:namespaces 'user :aliases]))\n                     namespaces (-> namespaces\n                                    (update 'user assoc :aliases aliases)\n                                    (update 'clojure.core assoc 'global-hierarchy\n                                            (vars/->SciVar (make-hierarchy) 'global-hierarchy\n                                              {:ns vars/clojure-core-ns} false)))\n                     imports (if-let [env-imports (:imports env)]\n                               (merge env-imports imports)\n                               imports)]\n                 ;; TODO: is the first case ever hit?\n                 (if-not env\n                   #?(:clj (->Env namespaces imports load-fn)\n                      :cljs {:namespaces namespaces\n                             :imports imports\n                             :load-fn load-fn})\n                   (assoc env\n                          :namespaces namespaces\n                          :imports imports\n                          :load-fn load-fn))))))\n\n(defn process-permissions [prev-perms & permissions]\n  (not-empty (into prev-perms (comp cat (map strip-core-ns)) permissions)))\n\n(def default-classes\n  #?(:clj {'java.lang.AssertionError AssertionError\n           'java.lang.Exception {:class Exception}\n           'java.lang.IllegalArgumentException java.lang.IllegalArgumentException\n           'clojure.lang.Delay clojure.lang.Delay\n           'clojure.lang.ExceptionInfo clojure.lang.ExceptionInfo\n           'clojure.lang.LineNumberingPushbackReader clojure.lang.LineNumberingPushbackReader\n           'java.lang.String {:class String}\n           'java.io.StringWriter java.io.StringWriter\n           'java.io.StringReader java.io.StringReader\n           'java.lang.Integer Integer\n           'java.lang.Number Number\n           'java.lang.Double Double\n           'java.lang.ArithmeticException ArithmeticException\n           'java.lang.Object Object\n           'sci.lang.IVar sci.lang.IVar}\n     :cljs {'Error {:class js/Error :constructor (fn\n                                                   ([msg] (js/Error. msg))\n                                                   ([msg filename] (js/Error. msg filename))\n                                                   ([msg filename line] (js/Error. msg filename line)))}\n            'cljs.core.Delay {:class cljs.core/Delay\n                              :constructor #(cljs.core/Delay. % nil)}\n            'goog.string.StringBuffer {:class goog.string/StringBuffer\n                                       :constructor #(goog.string/StringBuffer. %)}}))\n\n(def default-imports\n  #?(:clj '{AssertionError java.lang.AssertionError\n            Exception java.lang.Exception\n            String java.lang.String\n            ArithmeticException java.lang.ArithmeticException\n            Integer java.lang.Integer\n            Number java.lang.Number\n            Double java.lang.Double\n            Object java.lang.Object}\n     :cljs {}))\n\n(defn normalize-classes [classes]\n  (loop [class->opts (transient (select-keys classes [:allow]))\n         kvs classes]\n    (if-let [[sym class-opts] (first kvs)]\n      (recur ;; storing the physical class as key didn't work well with\n       ;; GraalVM\n       (assoc! class->opts sym (if (map? class-opts)\n                                 class-opts\n                                 {:class class-opts}))\n       (rest kvs))\n      {:public-class (:public-class classes)\n       :class->opts (persistent! class->opts)})))\n\n(def default-reify-fn\n  #?(:clj (fn [{:keys [interfaces methods protocols]}]\n            (reify\n              Object\n              (toString [this]\n                ((get methods 'toString) this))\n              IReified\n              (getInterfaces [this]\n                interfaces)\n              (getMethods [this]\n                methods)\n              (getProtocols [this]\n                protocols)))\n     :cljs (fn [_ _ _])))\n\n#?(:clj (defrecord Ctx [bindings env\n                        features readers\n                        reload-all\n                        check-permissions]))\n\n(defn ->ctx [bindings env features readers check-permissions?]\n  #?(:cljs {:bindings bindings\n            :env env\n            :features features\n            :readers readers\n            :check-permissions check-permissions?}\n     :clj (->Ctx bindings env features readers false check-permissions?)))\n\n(defn init\n  \"Initializes options\"\n  [{:keys [:bindings :env\n           :allow :deny\n           :aliases\n           :namespaces\n           :classes\n           :imports\n           :features\n           :load-fn\n           :uberscript ;; used by babashka, not public!\n           :readers\n           :reify-fn\n           :proxy-fn\n           :disable-arity-checks]}]\n  (let [env (or env (atom {}))\n        imports (merge default-imports imports)\n        bindings bindings\n        _ (init-env! env bindings aliases namespaces imports load-fn)\n        raw-classes (merge default-classes classes)\n        classes (normalize-classes raw-classes)\n        ctx (assoc (->ctx {} env features readers (or allow deny))\n                   :allow (when allow (process-permissions #{} allow))\n                   :deny (when deny (process-permissions #{} deny))\n                   :uberscript uberscript\n                   :reify-fn (or reify-fn default-reify-fn)\n                   :proxy-fn proxy-fn\n                   :disable-arity-checks disable-arity-checks\n                   :public-class (:public-class classes)\n                   :raw-classes raw-classes ;; hold on for merge-opts\n                   :class->opts (:class->opts classes)\n                   #?@(:clj [:main-thread-id (.getId (Thread/currentThread))]))]\n    ctx))\n\n(defn merge-opts [ctx opts]\n  (let [{:keys [:bindings\n                :allow :deny\n                :aliases\n                :namespaces\n                :classes\n                :imports\n                :features\n                :load-fn\n                :uberscript ;; used by babashka, not public!\n                :readers\n                :reify-fn\n                :disable-arity-checks]\n         :or {disable-arity-checks (:disable-arity-checks ctx)}} opts\n        env (:env ctx)\n        _ (init-env! env bindings aliases namespaces imports load-fn)\n        raw-classes (merge (:raw-classes ctx) classes)\n        classes (normalize-classes raw-classes)\n        ctx (assoc (->ctx {} env features readers (or (:check-permissions ctx) allow deny))\n                   :allow (when allow (process-permissions (:allow ctx) allow))\n                   :deny (when deny (process-permissions (:deny ctx) deny))\n                   :uberscript uberscript\n                   :reify-fn reify-fn\n                   :disable-arity-checks disable-arity-checks\n                   :public-class (:public-class classes)\n                   :raw-classes raw-classes\n                   :class->opts (:class->opts classes)\n                   :main-thread-id (:main-thread-id ctx))]\n    ctx))\n"]}