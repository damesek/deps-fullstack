{"version":3,"sources":["rewrite_clj/zip/base.cljc"],"mappings":"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","names":["var_args","G__47093","rewrite-clj.zip.base/edn*","js/Error","node","rewrite_clj.zip.base.edn_STAR_","opts","rewrite-clj.custom-zipper.core/custom-zipper","rewrite-clj.custom-zipper.core/zipper","rewrite-clj.zip.options/set-opts","G__47100","rewrite-clj.zip.base/edn","rewrite_clj.zip.base.edn","cljs.core._EQ_","rewrite-clj.node.protocols/tag","top","or__5045__auto__","rewrite-clj.custom-zipper.core/down","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.node.forms/forms-node","rewrite-clj.zip.base/tag","zloc","G__47108","rewrite-clj.custom-zipper.core/node","rewrite-clj.zip.base/sexpr-able?","G__47110","rewrite-clj.node.protocols/sexpr-able?","rewrite-clj.zip.base/sexpr","G__47113","rewrite_clj.node.protocols.sexpr","rewrite-clj.zip.options/get-opts","rewrite-clj.zip.base/child-sexprs","G__47116","rewrite_clj.node.protocols.child_sexprs","rewrite-clj.zip.base/length","G__47117","rewrite-clj.node.protocols/length","rewrite-clj.zip.base/value","G__47118","rewrite-clj.node.protocols/value","G__47120","rewrite-clj.zip.base/of-string","s","rewrite_clj.zip.base.of_string","G__47121","rewrite-clj.parser/parse-string-all","rewrite-clj.zip.base/string","G__47122","rewrite-clj.node.protocols/string","rewrite-clj.zip.base/->string","rewrite-clj.zip.base/root-string","G__47123","rewrite-clj.custom-zipper.core/root","rewrite-clj.zip.base/->root-string","rewrite-clj.zip.base/print!","_writer","cljs.core/string-print","G__47125","rewrite-clj.zip.base/print","writer","G__47126","rewrite_clj.zip.base.print","G__47128","rewrite-clj.zip.base/print-root","G__47129","rewrite_clj.zip.base.print_root"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.base\n  (:refer-clojure :exclude [print])\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.node.forms :as nforms]\n            [rewrite-clj.node.protocols :as node]\n            [rewrite-clj.parser :as p]\n            [rewrite-clj.zip.options :as options]\n            [rewrite-clj.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Zipper\n\n(defn edn*\n  \"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]).\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([node]\n   (edn* node {}))\n  ([node opts]\n   (-> (if (:track-position? opts)\n         (zraw/custom-zipper node)\n         (zraw/zipper node))\n       (options/set-opts opts))))\n\n(defn edn\n  \"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]),\n  and move to the first non-whitespace/non-comment child. If node is not forms node, is wrapped in forms node\n  for a consistent root.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([node] (edn node {}))\n  ([node opts]\n   (loop [node node opts opts]\n     (if (= (node/tag node) :forms)\n       (let [top (edn* node opts)]\n         (or (-> top zraw/down ws/skip-whitespace)\n             top))\n       (recur (nforms/forms-node [node]) opts)))))\n\n;; ## Inspection\n\n(defn tag\n  \"Return tag of current node in `zloc`.\"\n  [zloc]\n  (some-> zloc zraw/node node/tag))\n\n(defn sexpr-able?\n  \"Return true if current node's element type in `zloc` can be [[sexpr]]-ed.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)\"\n  [zloc]\n  (some-> zloc zraw/node node/sexpr-able?))\n\n(defn sexpr\n  \"Return s-expression (the Clojure form) of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([zloc]\n   (some-> zloc zraw/node (node/sexpr (options/get-opts zloc)))))\n\n(defn child-sexprs\n  \"Return s-expression (the Clojure forms) of children of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([zloc]\n   (some-> zloc zraw/node (node/child-sexprs (options/get-opts zloc)))))\n\n(defn length\n  \"Return length of printable [[string]] of current node in `zloc`.\"\n  [zloc]\n  (or (some-> zloc zraw/node node/length) 0))\n\n(defn value\n  \"DEPRECATED. Return a tag/s-expression pair for inner nodes, or\n   the s-expression itself for leaves.\"\n  [zloc]\n  (some-> zloc zraw/node node/value))\n\n;; ## Read\n(defn of-string\n  \"Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([s] (of-string s {}))\n  ([s opts]\n   (some-> s p/parse-string-all (edn opts))))\n\n#?(:clj\n   (defn of-file\n     \"Create and return zipper from all forms in Clojure/ClojureScript/EDN File `f`.\n\n     Optional `opts` can specify:\n     - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n     - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n     ([f] (of-file f {}))\n     ([f opts]\n      (some-> f p/parse-file-all (edn opts)))))\n\n;; ## Write\n\n(defn string\n  \"Return string representing the current node in `zloc`.\"\n  [zloc]\n  (some-> zloc zraw/node node/string))\n\n(defn ->string\n  \"DEPRECATED. Renamed to [[string]].\"\n  [zloc]\n  (string zloc))\n\n(defn root-string\n  \"Return string representing the zipped-up `zloc` zipper.\"\n  [zloc]\n  (some-> zloc zraw/root node/string))\n\n(defn ->root-string\n  \"DEPRECATED. Renamed to [[root-string]].\"\n  [zloc]\n  (root-string zloc))\n\n#?(:clj\n   (defn- print! [^String s writer]\n     (if writer\n       (.write ^java.io.Writer writer s)\n       (recur s *out*)))\n   :cljs\n   (defn- print! [s _writer]\n     (string-print s)))\n\n(defn print\n  \"Print current node in `zloc`.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.\"\n  ([zloc writer]\n   (some-> zloc\n           string\n           (print! writer)))\n  ([zloc] (print zloc nil)))\n\n(defn print-root\n  \"Zip up and print `zloc` from root node.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.\"\n  ([zloc writer]\n   (some-> zloc\n           root-string\n           (print! writer)))\n  ([zloc] (print-root zloc nil)))\n"]}