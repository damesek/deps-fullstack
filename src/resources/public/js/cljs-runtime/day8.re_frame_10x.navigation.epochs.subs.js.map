{"version":3,"sources":["day8/re_frame_10x/navigation/epochs/subs.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","p__45034","map__45036","cljs.core/--destructure-map","cljs.core.get","epochs","_","p__45041","map__45042","filter-str","p__45045","map__45046","matches-by-id","p__45048","vec__45050","cljs.core.nth","cljs.core.map","cljs.core.juxt","cljs.core/key","cljs.core.comp","day8.re-frame-10x.tools.metamorphic/matched-event","cljs.core/val","cljs.core.sort_by","cljs.core/first","cljs.core/>","cljs.core/seq","cljs.core.filter","match","reg-ex","e45056","cljs.core/re-pattern","js/Error","e","js/console.error","match-string","cljs.core/second","cljs.core/re-find","p__45061","map__45062","selected-epoch-id","p__45065","map__45067","match-ids","p__45070","map__45072","matches","p__45077","vec__45078","cljs.core/last","p__45081","map__45082","match-info","trace","cljs.core.get_in","cljs.core/count","p__45083","map__45084","selected-epoch-index","p__45101","vec__45102","p__45109","vec__45111","day8.re-frame-10x.tools.coll/last-in-vec"],"sourcesContent":["(ns day8.re-frame-10x.navigation.epochs.subs\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.tools.metamorphic                          :as metam]\n    [day8.re-frame-10x.tools.coll                                 :as tools.coll]))\n\n(rf/reg-sub\n  ::root\n  (fn [{:keys [epochs]} _]\n    epochs))\n\n(rf/reg-sub\n  ::filter-str\n  :<- [::root]\n  (fn [{:keys [filter-str]} _]\n    filter-str))\n\n(rf/reg-sub\n  ::matches-by-id\n  :<- [::root]\n  (fn [{:keys [matches-by-id]} _]\n    matches-by-id))\n\n(rf/reg-sub\n  ::events-by-id\n  :<- [::matches-by-id]\n  :<- [::filter-str]\n  (fn [[matches-by-id filter-str] _]\n    (let [matches-by-id (map (juxt key (comp :event :tags metam/matched-event :match-info val))\n                             matches-by-id)]\n      (sort-by first > (if (seq filter-str)\n                         (filter (fn [match]\n                                   (let [reg-ex       (try\n                                                        (re-pattern filter-str)\n                                                        (catch js/Error e\n                                                          (js/console.error e)\n                                                          #\"\"))\n                                         match-string (-> match second str)]\n                                     (re-find reg-ex match-string)))\n                                 matches-by-id)\n                         matches-by-id)))))\n\n(rf/reg-sub\n  ::selected-epoch-id\n  :<- [::root]\n  (fn [{:keys [selected-epoch-id]} _]\n    selected-epoch-id))\n\n(rf/reg-sub\n  ::match-ids\n  :<- [::root]\n  (fn [{:keys [match-ids]} _]\n    match-ids))\n\n(rf/reg-sub\n  ::matches\n  :<- [::root]\n  (fn [{:keys [matches]} _]\n    matches))\n\n(rf/reg-sub\n  ::selected-match-state\n  :<- [::match-ids]\n  :<- [::matches]\n  :<- [::matches-by-id]\n  :<- [::selected-epoch-id]\n  (fn [[match-ids matches matches-by-id selected-epoch-id] _]\n    (cond\n      (nil? selected-epoch-id) (last matches)\n      (< selected-epoch-id (first match-ids)) (first matches)\n      ;; This case seems impossible, but can happen if the user filters out\n      ;; an event that they are 'on'.\n      (> selected-epoch-id (last match-ids)) (last matches)\n      :else (get matches-by-id selected-epoch-id))))\n\n(rf/reg-sub\n  ::selected-match\n  :<- [::selected-match-state]\n  (fn [{:keys [match-info]} _]\n    match-info))\n\n(rf/reg-sub\n  ::selected-event-trace\n  :<- [::selected-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  ::selected-event\n  :<- [::selected-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  ::number-of-matches\n  :<- [::matches]\n  (fn [matches _]\n    (count matches)))\n\n(rf/reg-sub\n  ::selected-event-index\n  :<- [::root]\n  (fn [{:keys [selected-epoch-index]} _]\n    selected-epoch-index))\n\n(rf/reg-sub\n  ::beginning-trace-id\n  :<- [::selected-match]\n  (fn [match _]\n    (:id (first match))))\n\n(rf/reg-sub\n  ::ending-trace-id\n  :<- [::selected-match]\n  (fn [match _]\n    (:id (last match))))\n\n(rf/reg-sub\n  ::older-epochs-available?\n  :<- [::selected-epoch-id]\n  :<- [::match-ids]\n  (fn [[selected-epoch-id match-ids] _]\n    (and (< 1 (count match-ids))\n         (or (nil? selected-epoch-id)\n             (> selected-epoch-id (nth match-ids 0))))))\n\n(rf/reg-sub\n  ::newer-epochs-available?\n  :<- [::selected-epoch-id]\n  :<- [::match-ids]\n  (fn [[selected-epoch-id match-ids] _]\n    (and (< 1 (count match-ids))\n         (some? selected-epoch-id)\n         (< selected-epoch-id (tools.coll/last-in-vec match-ids)))))\n\n"]}