{"version":3,"sources":["sci/impl/protocols.cljc"],"mappings":"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","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.impl.protocols/defprotocol","seq54369","G__54370","cljs.core/first","cljs.core/next","G__54371","G__54372","G__54373","self__5754__auto__","_","_ctx","protocol-name","signatures","vec__54374","cljs.core.nth","vec__54377","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.apply","cljs.core/array-map","cljs.core/hash-set","docstring","sig","cljs.core/rest","opts","opt","cljs.core/Keyword","cljs.core/second","cljs.core/nnext","current-ns","sci.impl.vars/current-ns-name","fq-name","cljs.core.symbol","extend-meta","expansion","cljs.core/with-meta","cljs.core.map","p__54430","vec__54431","seq__54432","first__54433","method-name","cljs.core/vec","impls","cljs.core.conj","cljs.core.keyword","sci.impl.protocols/extend","seq54517","G__54518","G__54519","ctx","atype","proto+mmaps","seq__54530","chunk__54532","count__54533","i__54534","vec__54792","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__54924","proto","mmap","cljs.core.partition","extend-via-metadata","proto-ns","pns","sci.impl.vars/getName","pns-str","seq__54796","chunk__54797","count__54798","i__54799","vec__54844","vec__54882","seq__54927","chunk__54928","count__54929","i__54930","vec__54974","vec__55015","meth-name","f","cljs.core/deref","meth-str","cljs.core/name","meth-sym","env","multi-method-var","cljs.core.get_in","multi-method","sci.impl.multimethods/multi-fn-add-method-impl","fq","this","args","temp__5802__auto__","m","cljs.core/meta","meth","cljs.core.get","p__55059","vec__55060","seq__55061","first__55062","sci.impl.protocols/process-single-extend-meta","body","sci.impl.protocols/process-methods","type","meths","protocol-ns","p__55109","vec__55110","seq__55111","first__55112","fn-body","cljs.core/vector?","p1__55068#","cljs.core.mapcat","sci.impl.protocols/extend-protocol","seq55114","G__55115","G__55116","G__55117","G__55118","p1__55113#","sci.impl.utils/split-when","cljs.core/seq?","protocol-var","G__55121","G__55122","G__55123","fexpr__55120","sci.impl.utils/eval-resolve-state","protocol-data","p__55164","vec__55165","seq__55166","first__55167","sci.impl.protocols/extend-type","seq55170","G__55171","G__55172","G__55173","G__55174","proto+meths","p1__55168#","p__55179","vec__55180","seq__55181","first__55182","G__55184","G__55185","G__55186","fexpr__55183","proto-data","sci.impl.protocols/find-matching-non-default-method","protocol","obj","cljs.core/boolean","p1__55197#","cljs.core/some","cljs.core/get-method","sci.impl.types/type-impl","ms","cljs.core/methods","default","sci.impl.protocols/satisfies?","sci.impl.types/Reified","cljs.core/contains?","p","or__5045__auto__","and__5043__auto__","pred__55208","expr__55209","js/Error","cljs.core/=","cljs.core/IDeref","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/ISwap","cljs.core/IReset","sci.impl.protocols/instance-impl","clazz","x","cljs.core/Symbol","G__55218","cljs.core._EQ_","sci.impl.protocols/extends?","p1__55220#"],"sourcesContent":["(ns sci.impl.protocols\n  {:no-doc true}\n  (:refer-clojure :exclude [defprotocol extend-protocol\n                            extend extend-type reify satisfies?\n                            extends? implements?])\n  (:require [sci.impl.multimethods :as mms]\n            [sci.impl.types :as types]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn defprotocol [_ _ _ctx protocol-name & signatures]\n  (let [[docstring signatures]\n        (let [sig (first signatures)]\n          (if (string? sig) [sig (rest signatures)]\n              [nil signatures]))\n        [opts signatures]\n        (let [opt (first signatures)]\n          (if (keyword? opt) [{opt (second signatures)} (nnext signatures)]\n              [nil signatures]))\n        current-ns (str (vars/current-ns-name))\n        fq-name (symbol current-ns (str protocol-name))\n        extend-meta (:extend-via-metadata opts)\n        expansion\n        `(do\n           (def  ~(with-meta protocol-name\n                    {:doc docstring}) (cond->\n                                          {:methods #{}\n                                           :name '~fq-name\n                                           :ns *ns*}\n                                        ~extend-meta (assoc :extend-via-metadata true)))\n           ~@(map (fn [[method-name & _]]\n                    (let [fq-name (symbol (str current-ns) (str method-name))\n                          impls [`(defmulti ~method-name clojure.core/protocol-type-impl)\n                                 `(defmethod ~method-name :sci.impl.protocols/reified [x# & args#]\n                                    (let [methods# (clojure.core/-reified-methods x#)]\n                                      (apply (get methods# '~method-name) x# args#)))]\n                          impls (if extend-meta\n                                  (conj impls\n                                        `(defmethod ~method-name :default [x# & args#]\n                                           (let [meta# (meta x#)\n                                                 method# (get meta# '~fq-name)]\n                                             (if method#\n                                               (apply method# x# args#)\n                                               (throw (new #?(:clj IllegalArgumentException\n                                                              :cljs js/Error)\n                                                           (str \"No implementation of method: \"\n                                                                ~(keyword method-name) \" of protocol: \"\n                                                                (var ~protocol-name) \" found for: \"\n                                                                (clojure.core/protocol-type-impl x#))))))))\n                                  impls)]\n                      `(do\n                         ~@impls\n                         #?(:clj (alter-var-root (var ~protocol-name)\n                                                 update :methods conj ~method-name)\n                            :cljs (def ~protocol-name\n                                    (update ~protocol-name :methods conj ~method-name))))))\n                  signatures))]\n    expansion))\n\n(defn extend [ctx atype & proto+mmaps]\n  (doseq [[proto mmap] (partition 2 proto+mmaps)\n          :let [extend-via-metadata (:extend-via-metadata proto)\n                proto-ns (:ns proto)\n                pns (vars/getName proto-ns)\n                pns-str (when extend-via-metadata (str pns))]]\n    (doseq [[meth-name f] mmap]\n      (let [meth-str (name meth-name)\n            meth-sym (symbol meth-str)\n            env @(:env ctx)\n            multi-method-var (get-in env [:namespaces pns meth-sym])\n            multi-method @multi-method-var]\n        (mms/multi-fn-add-method-impl\n         multi-method atype\n         (if extend-via-metadata\n           (let [fq (symbol pns-str meth-str)]\n             (fn [this & args]\n               (if-let [m (meta this)]\n                 (if-let [meth (get m fq)]\n                   (apply meth this args)\n                   (apply f this args))\n                 (apply f this args))))\n           f))))))\n\n(defn process-single-extend-meta\n  \"Processes single args+body pair for extending via metadata\"\n  [fq [args & body]]\n  [args `(let [farg# ~(first args)]\n           (if-let [m# (meta farg#)]\n             (if-let [meth# (get m# '~fq)]\n               (apply meth# ~args)\n               (do ~@body))\n             (do ~@body)))])\n\n(defn process-methods [type meths protocol-ns extend-via-metadata]\n  (map\n   (fn [[meth-name & fn-body]]\n     (let [fq (symbol protocol-ns (name meth-name))\n           fn-body (if extend-via-metadata\n                     (if (vector? (first fn-body))\n                       (process-single-extend-meta fq fn-body)\n                       (mapcat #(process-single-extend-meta fq %) fn-body))\n                     fn-body)]\n       `(defmethod ~fq\n          ~type\n          ~@fn-body)))\n   meths))\n\n(defn extend-protocol [_ _ ctx protocol-name & impls]\n  (let [impls (utils/split-when #(not (seq? %)) impls)\n        protocol-var (@utils/eval-resolve-state ctx (:bindingx ctx) protocol-name)\n        protocol-data (deref protocol-var)\n        extend-via-metadata (:extend-via-metadata protocol-data)\n        protocol-ns (:ns protocol-data)\n        pns (str (vars/getName protocol-ns))\n        expansion\n        `(do ~@(map (fn [[type & meths]]\n                      `(do\n                         ~@(process-methods type meths pns extend-via-metadata)))\n                    impls))]\n    expansion))\n\n(defn extend-type [_ _ ctx atype & proto+meths]\n  (let [proto+meths (utils/split-when #(not (seq? %)) proto+meths)]\n    `(do ~@(map\n            (fn [[proto & meths]]\n              (let [protocol-var (@utils/eval-resolve-state ctx (:bindings ctx) proto)\n                    proto-data (deref protocol-var)\n                    protocol-ns (:ns proto-data)\n                    pns (str (vars/getName protocol-ns))\n                    extend-via-metadata (:extend-via-metadata proto-data)]\n                `(do\n                   ~@(process-methods atype meths pns extend-via-metadata)))) proto+meths))))\n\n;; IAtom can be implemented as a protocol on reify and defrecords in sci\n\n(defn find-matching-non-default-method [protocol obj]\n  (boolean (some #(when-let [m (get-method % (types/type-impl obj))]\n                    (let [ms (methods %)\n                          default (get ms :default)]\n                      (not (identical? m default))))\n                 (:methods protocol))))\n\n(defn satisfies? [protocol obj]\n  (if #?(:clj (instance? sci.impl.types.IReified obj)\n         ;; in CLJS we currently don't support mixing \"classes\" and protocols,\n         ;; hence, the instance is always a Reified, thus we can avoid calling\n         ;; the slower satisfies?\n         :cljs (instance? sci.impl.types/Reified obj))\n    (contains? (types/getProtocols obj) protocol)\n    ;; can be record that is implementing this protocol\n    ;; or a type like String, etc. that implements a protocol via extend-type, etc.\n    #?(:cljs (let [p (:protocol protocol)]\n               (or\n                (and p\n                     (condp = p\n                       IDeref (cljs.core/satisfies? IDeref obj)\n                       ISwap (cljs.core/satisfies? ISwap obj)\n                       IReset (cljs.core/satisfies? IReset obj)))\n                (find-matching-non-default-method protocol obj)))\n       ;; NOTE: what if the protocol doesn't have any methods?\n       ;; This probably needs fixing\n       :clj (or\n             (when-let [p (:protocol protocol)]\n               (clojure.core/satisfies? p obj))\n             (find-matching-non-default-method protocol obj)))))\n\n(defn instance-impl [clazz x]\n  (cond\n    ;; fast path for Clojure when using normal clazz\n    #?@(:clj [(class? clazz)\n              (instance? clazz x)])\n    ;; records are currently represented as a symbol with metadata\n    (and (symbol? clazz) (some-> clazz meta :sci.impl/record))\n    (= clazz (-> x meta :type))\n    ;; only in Clojure, we could be referring to clojure.lang.IDeref as a sci protocol\n    #?@(:clj [(map? clazz)\n              (if-let [c (:class clazz)]\n                ;; this is a protocol which is an interface on the JVM\n                (or (satisfies? clazz x)\n                    ;; this is the fallback because we excluded defaults for the core protocols\n                    (instance? c x))\n                (satisfies? clazz x))])\n    ;; could we have a fast path for CLJS too? please let me know!\n    :else (instance? clazz x)))\n\n(defn extends?\n  \"Returns true if atype extends protocol\"\n  [protocol atype]\n  (boolean (some #(get-method % atype) (:methods protocol))))\n"]}