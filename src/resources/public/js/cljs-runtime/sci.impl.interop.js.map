{"version":3,"sources":["sci/impl/interop.cljc"],"mappings":"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","names":["sci.impl.interop/invoke-instance-field","obj","_target-class","field-name","sci.impl.interop/invoke-instance-method","method-name","args","temp__5802__auto__","method","cljs.core.into_array","js/Error","p__51471","vec__51472","cljs.core.nth","sci.impl.interop/get-static-field","class","field-name-sym","clojure.string/includes?","cljs.core.apply","sci.impl.interop.goog$module$goog$object.getValueByKeys","clojure.string.split","sci.impl.interop.goog$module$goog$object.get","sci.impl.interop/invoke-js-constructor","constructor","ctor","js/Function.prototype.bind.apply","cljs.core/vec","G__51479","cljs.core/count","cljs.core.ex_info","sci.impl.interop/invoke-constructor","p__51493","vec__51494","sci.impl.interop/invoke-static-method","field","cljs.core/not","clojure.string/ends-with?","p__51504","map__51505","cljs.core/--destructure-map","env","cljs.core.get","class->opts","sci.impl.interop/fully-qualify-class","sym","or__5045__auto__","ns*","cljs.core/namespace","cljs.core/contains?","cljs.core.symbol","cljs.core/name","cljs.core/deref","cnn","sci.impl.vars/current-ns-name","cljs.core.get_in","p__51517","map__51518","sci.impl.interop/resolve-class-opts","class-opts","imports","vec__51525","_","v","cljs.core/find","temp__5804__auto__","sci.impl.interop/resolve-class","ctx"],"sourcesContent":["(ns sci.impl.interop\n  {:no-doc true}\n  #?(:clj (:import [sci.impl Reflector]\n                   [java.lang.reflect Field Modifier]))\n  (:require #?(:cljs [goog.object :as gobject])\n            #?(:cljs [clojure.string :as str])\n            [sci.impl.vars :as vars]))\n\n;; see https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Reflector.java\n;; see invokeStaticMethod, getStaticField, etc.\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn invoke-instance-field\n  #?@(:cljs [[obj _target-class field-name]\n             ;; gobject/get didn't work here\n             (aget obj field-name)]\n      :clj\n      [([obj ^Class target-class method]\n        (let [^Field field (.getField target-class method)\n              mod (.getModifiers field)]\n          (if (and (not (Modifier/isStatic mod))\n                   (Modifier/isPublic mod))\n            (.get field obj)\n            (throw (ex-info (str \"Not found or accessible instance field: \" method) {})))))]))\n\n(defn invoke-instance-method\n  #?@(:cljs [[obj _target-class method-name args]\n             ;; gobject/get didn't work here\n             (if-let [method (aget obj method-name)]\n               (.apply method obj (into-array args) #_(js-object-array args))\n               (throw (js/Error. (str \"Could not find instance method: \" method-name))))]\n      :clj\n      [([obj ^Class target-class method args]\n        (if-not target-class\n          (Reflector/invokeInstanceMethod obj method (object-array args))\n          (let [methods (Reflector/getMethods target-class (count args) method false)]\n            (Reflector/invokeMatchingMethod method methods obj (object-array args)))))]))\n\n(defn get-static-field #?(:clj [[^Class class field-name-sym]]\n                          :cljs [[class field-name-sym]])\n  #?(:clj (Reflector/getStaticField class (str field-name-sym))\n     :cljs (if (str/includes? (str field-name-sym) \".\")\n             (apply gobject/getValueByKeys class (str/split (str field-name-sym) #\"\\.\"))\n             (gobject/get class field-name-sym))))\n\n#?(:cljs\n   (defn invoke-js-constructor [constructor args]\n     (let [ctor (js/Function.prototype.bind.apply constructor)\n           args (vec args)]\n       (case (count args)\n         0 (new ctor)\n         1 (new ctor (nth args 0))\n         2 (new ctor (nth args 0) (nth args 1))\n         3 (new ctor (nth args 0) (nth args 1) (nth args 2))\n         4 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3))\n         5 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3) (nth args 4))\n         6 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3) (nth args 4) (nth args 5))\n         7 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3) (nth args 4) (nth args 5) (nth args 6))\n\n         (throw (ex-info \"Constructors with more than 7 arguments are not supported\" {:constructor constructor}))))))\n\n(defn invoke-constructor #?(:clj [^Class class args]\n                            :cljs [constructor args])\n  #?(:clj (Reflector/invokeConstructor class (object-array args))\n     :cljs (invoke-js-constructor constructor args)))\n\n(defn invoke-static-method #?(:clj [[^Class class method-name] args]\n                              :cljs [[class method-name] args])\n  #?(:clj\n     (Reflector/invokeStaticMethod class (str method-name) (object-array args))\n     :cljs (if-let [method (gobject/get class method-name)]\n             (.apply method class (into-array args))\n             (let [method-name (str method-name)\n                   field (get-static-field [class method-name])]\n               (cond\n                 (not field)\n                 (throw (js/Error. (str \"Could not find static method \" method-name)))\n                 (clojure.string/ends-with? method-name \".\")\n                 (invoke-js-constructor field args)\n                 :else\n                 ;; why is this here??\n                 (apply field args))))))\n\n(defn fully-qualify-class [{:keys [:env :class->opts]} sym]\n  (or #?(:clj (when (contains? class->opts sym) sym)\n         :cljs (if-let [ns* (namespace sym)]\n                 (when (identical? \"js\" ns*)\n                   (when (contains? class->opts (symbol (name sym)))\n                     sym))\n                 (when (contains? class->opts sym)\n                   sym)))\n      (let [env @env]\n        (or (get (:imports env) sym)\n            (let [cnn (vars/current-ns-name)]\n              (get-in env [:namespaces cnn :imports sym]))))))\n\n(defn resolve-class-opts [{:keys [:env :class->opts]} sym]\n  (let [class-opts (or #?(:clj (get class->opts sym)\n                          :cljs (if-let [ns* (namespace sym)]\n                                  (when (identical? \"js\" ns*)\n                                    (get class->opts (symbol (name sym))))\n                                  (get class->opts sym)))\n                       (let [env @env\n                             cnn (vars/current-ns-name)\n                             imports (get-in env [:namespaces cnn :imports])]\n                         (if-let [[_ v] (find imports sym)]\n                           ;; finding a nil v means the object was unmapped\n                           (get class->opts v)\n                           (when-let [v (get-in env [:imports sym])]\n                             (get class->opts v)))))]\n    class-opts))\n\n(defn resolve-class [ctx sym]\n  (:class (resolve-class-opts ctx sym)))\n"]}