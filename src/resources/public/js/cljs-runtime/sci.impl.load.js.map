{"version":3,"sources":["sci/impl/load.cljc"],"mappings":"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","names":["sci.impl.load/handle-refer-all","the-current-ns","the-loaded-ns","include-sym?","rename-sym","only","referred","cljs.core/set","cljs.core.reduce","p__51586","vec__51588","cljs.core.nth","ns","k","v","and__5043__auto__","cljs.core/Symbol","cljs.core/not","cljs.core/contains?","cljs.core.assoc","p__51594","map__51598","cljs.core/--destructure-map","as","cljs.core.get","refer","rename","exclude","use","sci.impl.load/handle-require-libspec-env","ctx","env","current-ns","lib-name","_parsed-libspec","cljs.core.get_in","cljs.core/assoc-in","sym","or__5045__auto__","cljs.core/identity","excludes","cljs.core/constantly","sci.impl.utils/kw-identical?","cljs.core/sequential?","temp__5802__auto__","vec__51606","_k","cljs.core/find","js/Error","temp__5804__auto__","on-loaded","G__51610","cljs.core/meta","G__51612","sci.impl.load/add-loaded-lib","lib","cljs.core.swap_BANG_","cljs.core/update","loaded-libs","cljs.core.conj","sci.impl.load/handle-require-libspec","opts","map__51620","reload","reload-all","cljs.core/deref","env*","cnn","sci.impl.vars/current-ns-name","namespaces","uberscript","reload*","loading","cljs.core/nat-int?","sci.impl.utils.throw_error_with_location","lib-emphasized","cljs.core.replace","clojure.string.join","cljs.core/reset!","load-fn","map__51634","file","source","G__51630","cljs.core.update","e51641","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.impl.vars/current-ns","sci.impl.vars/current-file","fexpr__51647","sci.impl.utils/eval-string*","e","cljs.core/dissoc","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.impl.load/load-lib","seq51656","G__51657","cljs.core/first","cljs.core/next","G__51658","G__51659","self__5754__auto__","prefix","options","cljs.core/name","cljs.core.symbol","cljs.core.apply","cljs.core/hash-map","sci.impl.load/prependss","x","coll","cljs.core/cons","cljs.core.concat","sci.impl.load/libspec?","cljs.core/vector?","cljs.core/second","cljs.core/Keyword","sci.impl.load/load-libs","kw","args","args*","flags","cljs.core.filter","cljs.core/keyword?","cljs.core.interleave","cljs.core.repeat","cljs.core/complement","supported","unsupported","cljs.core/seq","cljs.core.remove","cljs.core/str","cljs.core.interpose","seq__51676","chunk__51677","count__51678","i__51679","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","arg","vec__51701","seq__51702","first__51703","vec__51709","seq__51710","first__51711","seq__51704","chunk__51705","count__51706","i__51707","seq__51712","chunk__51713","count__51714","i__51715","sci.impl.load/eval-require","seq51720","G__51721","cljs.core/vreset!","sci.impl.utils/eval-require-state","sci.impl.load/eval-use","seq51730","G__51731","sci.impl.utils/eval-use-state","sci.impl.load/eval-refer-clojure","exprs","ns-sym","vec__51746","G__51750","cljs.core.update_in","cljs.core.fnil","cljs.core/into","other-ns","other-vars","cljs.core/select-keys","cljs.core/merge","p__51760","vec__51761","acc","original-name","new-name","cljs.core/conj","cljs.core/nnext","sci.impl.load/eval-refer*","filters","fs","public-keys","cljs.core/symbol?","cljs.core/keys","to-do","cljs.core._EQ_","_","sci.impl.load/eval-refer","seq51782","G__51783","G__51784","sci.impl.utils/eval-refer-state"],"sourcesContent":["(ns sci.impl.load\n  {:no-doc true}\n  (:require\n   [clojure.string :as str]\n   [sci.impl.utils :as utils :refer [throw-error-with-location\n                                     kw-identical?]]\n   [sci.impl.vars :as vars]))\n\n(defn handle-refer-all [the-current-ns the-loaded-ns include-sym? rename-sym only]\n  (let [referred (:refers the-current-ns)\n        only (when only (set only))\n        referred (reduce (fn [ns [k v]]\n                           (if (and (symbol? k) (include-sym? k)\n                                    (or (not only)\n                                        (contains? only k)))\n                             (assoc ns (rename-sym k) v)\n                             ns))\n                         referred\n                         the-loaded-ns)]\n    (assoc the-current-ns :refers referred)))\n\n(defn handle-require-libspec-env\n  [ctx env current-ns the-loaded-ns lib-name\n   {:keys [:as :refer :rename :exclude :only :use] :as _parsed-libspec}]\n  (let [the-current-ns (get-in env [:namespaces current-ns]) ;; = ns-data?\n        the-current-ns (if as (assoc-in the-current-ns [:aliases as] lib-name)\n                           the-current-ns)\n        rename-sym (if rename (fn [sym] (or (rename sym) sym))\n                       identity)\n        include-sym? (if exclude\n                       (let [excludes (set exclude)]\n                         (fn [sym]\n                           (not (contains? excludes sym))))\n                       (constantly true))\n        the-current-ns\n        (cond refer\n              (cond (or (kw-identical? :all refer)\n                        use)\n                    (handle-refer-all the-current-ns the-loaded-ns include-sym? rename-sym nil)\n                    (sequential? refer)\n                    (let [referred (:refers the-current-ns)\n                          referred (reduce (fn [ns sym]\n                                             (if (include-sym? sym)\n                                               (assoc ns (rename-sym sym)\n                                                      (if-let [[_k v] (find the-loaded-ns sym)]\n                                                        v\n                                                        (when-not (:uberscript ctx)\n                                                          (throw (new #?(:clj Exception :cljs js/Error)\n                                                                      (str sym \" does not exist\"))))))\n                                               ns))\n                                           referred\n                                           refer)]\n                      (assoc the-current-ns :refers referred))\n                    :else (throw (new #?(:clj Exception :cljs js/Error)\n                                      (str \":refer value must be a sequential collection of symbols\"))))\n              use (handle-refer-all the-current-ns the-loaded-ns include-sym? rename-sym only)\n              :else the-current-ns)\n        env (assoc-in env [:namespaces current-ns] the-current-ns)]\n    (when-let [on-loaded (some-> the-loaded-ns :obj meta :sci.impl/required-fn)]\n      (on-loaded {}))\n    env))\n\n(defn add-loaded-lib [env lib]\n  (swap! env update :loaded-libs (fn [loaded-libs]\n                                   (if (nil? loaded-libs)\n                                     #{lib}\n                                     (conj loaded-libs lib))))\n  nil)\n\n(defn handle-require-libspec\n  [ctx lib opts]\n  (let [{:keys [:reload :reload-all]} opts\n        env* (:env ctx)\n        env @env* ;; NOTE: loading namespaces is not (yet) thread-safe\n        cnn (vars/current-ns-name)\n        namespaces (get env :namespaces)\n        uberscript (:uberscript ctx)\n        reload* (or reload reload-all (:reload-all ctx) uberscript)]\n    (if-let [the-loaded-ns (when-not reload* (get namespaces lib))]\n      (let [loading (:loading ctx)]\n        (if (and loading\n                 (not (contains? (:loaded-libs env) lib))\n                 (nat-int? #?(:clj (.indexOf ^clojure.lang.PersistentVector loading lib)\n                              :cljs (.indexOf loading lib))))\n          (throw-error-with-location\n           (let [lib-emphasized (str \"[ \" lib \" ]\")\n                 loading (conj loading lib)\n                 loading (replace {lib lib-emphasized} loading)]\n             (str \"Cyclic load dependency: \" (str/join \"->\" loading)))\n           lib)\n          (reset! env* (handle-require-libspec-env ctx env cnn the-loaded-ns lib opts))))\n      (if-let [load-fn (:load-fn env)]\n        (if-let [{:keys [:file :source]} (load-fn {:namespace lib\n                                                   :reload (or reload reload-all)})]\n          (do\n            (let [ctx (-> ctx\n                          (assoc :bindings {})\n                          (assoc :reload-all reload-all)\n                          (update :loading (fn [loading]\n                                             (if (nil? loading)\n                                               [lib]\n                                               (conj loading lib)))))]\n              (try (vars/with-bindings\n                     {vars/current-ns @vars/current-ns\n                      vars/current-file file}\n                     (@utils/eval-string* ctx source))\n                   (catch #?(:clj Exception :cljs js/Error) e\n                     (swap! env* update :namespaces dissoc lib)\n                     (throw e))))\n            (swap! env* (fn [env]\n                          (let [namespaces (get env :namespaces)\n                                the-loaded-ns (get namespaces lib)]\n                            (handle-require-libspec-env ctx env cnn\n                                                        the-loaded-ns\n                                                        lib opts)))))\n          (or (when reload*\n                (when-let [the-loaded-ns (get namespaces lib)]\n                  (reset! env* (handle-require-libspec-env ctx env cnn the-loaded-ns lib opts))))\n              (throw (new #?(:clj Exception :cljs js/Error)\n                          (str \"Could not find namespace: \" lib \".\")))))\n        (throw (new #?(:clj Exception :cljs js/Error)\n\n                    (str \"Could not find namespace \" lib \".\")))))\n    (add-loaded-lib env* lib)\n    nil))\n\n(defn load-lib [ctx prefix lib & options]\n  (when (and prefix (pos? (.indexOf (name lib) #?(:clj (int \\.)\n                                                  :cljs \\.))))\n    (throw-error-with-location (str \"Found lib name '\" (name lib) \"' containing period with prefix '\"\n                                    prefix \"'.  lib names inside prefix lists must not contain periods\")\n                               lib))\n  (let [lib (if prefix (symbol (str prefix \\. lib)) lib)\n        opts (apply hash-map options)]\n    (handle-require-libspec ctx lib opts)))\n\n(defn- prependss\n  \"Prepends a symbol or a seq to coll\"\n  [x coll]\n  (if (symbol? x)\n    (cons x coll)\n    (concat x coll)))\n\n(defn- libspec?\n  \"Returns true if x is a libspec\"\n  [x]\n  (or (symbol? x)\n      (and (vector? x)\n           (or\n            (nil? (second x))\n            (keyword? (second x))))))\n\n(defn- load-libs\n  \"Loads libs, evaling libspecs, prefix lists, and flags for\n  forwarding to load-lib\"\n  [ctx kw args]\n  (let [args* (cons kw args)\n        flags (filter keyword? args*)\n        opts (interleave flags (repeat true))\n        args* (filter (complement keyword?) args*)]\n    ;; check for unsupported options\n    (let [supported #{:as :reload :reload-all :require :use :verbose :refer}\n          unsupported (seq (remove supported flags))]\n      (when unsupported\n        (throw-error-with-location (apply str \"Unsupported option(s) supplied: \"\n                                          (interpose \\, unsupported))\n                                   ;; best effort location\n                                   args)))\n    ;; check a load target was specified\n    (when-not (seq args*)\n      (throw-error-with-location \"Nothing specified to load\"\n                                 args))\n    (doseq [arg args*]\n      (if (libspec? arg)\n        (apply load-lib ctx nil (prependss arg opts))\n        (let [[prefix & args*] arg]\n          (when (nil? prefix)\n            (throw-error-with-location \"prefix cannot be nil\"\n                                       args))\n          (doseq [arg args*]\n            (apply load-lib ctx prefix (prependss arg opts))))))))\n\n(defn eval-require\n  [ctx & args]\n  (load-libs ctx :require args))\n\n(vreset! utils/eval-require-state eval-require)\n\n(defn eval-use\n  [ctx & args]\n  (load-libs ctx :use args))\n\n(vreset! utils/eval-use-state eval-use)\n\n(defn eval-refer-clojure [ctx exprs]\n  (let [ns-sym 'clojure.core]\n    (loop [exprs exprs]\n      (when exprs\n        (let [[k v] exprs]\n          (case k\n            :exclude\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (vars/current-ns-name)]\n                       (update-in env [:namespaces cnn :refer ns-sym :exclude]\n                                  (fnil into #{}) v))))\n            :only\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (vars/current-ns-name)\n                           other-ns (get-in env [:namespaces ns-sym])\n                           other-vars (select-keys other-ns v)]\n                       ;; TODO: this is wrong, don't merge these vars into the current namespace\n                       (update-in env [:namespaces cnn]\n                                  merge other-vars))))\n            :rename\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (vars/current-ns-name)\n                           namespaces (:namespaces env)\n                           the-current-ns (get namespaces cnn)\n                           other-ns (get-in env [:namespaces ns-sym])\n                           the-current-ns\n                           (reduce (fn [acc [original-name new-name]]\n                                     (-> acc\n                                         (assoc-in [:refers new-name] (get other-ns original-name))\n                                         (update-in [:refer ns-sym :exclude] (fnil conj #{}) original-name)))\n                                   the-current-ns\n                                   v)]\n                       (assoc-in env [:namespaces cnn] the-current-ns)))))\n          (recur (nnext exprs)))))))\n\n(defn eval-refer* [env ns-sym filters]\n  env\n  (let [cnn (vars/current-ns-name)\n        namespaces (:namespaces env)\n        ns (or (get namespaces ns-sym)\n               (throw (new #?(:clj Exception :cljs js/Error)\n                           (str \"No namespace: \" ns-sym))))\n        fs (apply hash-map filters)\n        public-keys (filter symbol? (keys ns))\n        rename (or (:rename fs) {})\n        exclude (set (:exclude fs))\n        to-do (if (= :all (:refer fs))\n                public-keys\n                (or (:refer fs) (:only fs) public-keys))\n        _ (when (and to-do (not (sequential? to-do)))\n            (throw (new #?(:clj Exception :cljs js/Error)\n                        \":only/:refer value must be a sequential collection of symbols\")))\n        the-current-ns (get namespaces cnn)\n        referred (:refers the-current-ns)\n        referred (reduce (fn [referred sym]\n                           (if-not (exclude sym)\n                             (let [v (get ns sym)]\n                               (when-not v\n                                 (throw (new #?(:clj java.lang.IllegalAccessError\n                                                :cljs js/Error)\n                                             ;; TODO: handle private vars\n                                             (if false ;; (get (ns-interns ns) sym)\n                                               (str sym \" is not public\")\n                                               (str sym \" does not exist\")))))\n                               (assoc referred (or (rename sym) sym) v ))\n                             referred))\n                         referred\n                         to-do)\n        the-current-ns (assoc the-current-ns :refers referred)\n        namespaces (assoc namespaces cnn the-current-ns)\n        env (assoc env :namespaces namespaces)]\n    env))\n\n(defn eval-refer\n  \"The function equivalent of :refer is handled differently than what we\n  did before (this is more like what Clojure itself does.) For\n  referring clojure.core we still use the old code.\"\n  [ctx ns-sym & filters]\n  (if (= 'clojure.core ns-sym)\n    (eval-refer-clojure ctx filters)\n    (swap! (:env ctx) eval-refer* ns-sym filters))\n  nil)\n\n(vreset! utils/eval-refer-state eval-refer)\n"]}