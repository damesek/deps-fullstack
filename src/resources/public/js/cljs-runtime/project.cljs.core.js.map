{"version":3,"sources":["project/cljs/core.cljs"],"mappings":";AAQA,AAACA;AAID,yBAAA,zBAAMC;AAAN,AAAA,0FAAA,mDAAA,mFAAA,8CAAA;;AAIA,2BAAA,3BAAMC;AAAN,AACE,wDAAA,jDAACC,oIAAWF,+BAAM,+CAAA,/CAACG;;AAErB,iCAAA,jCAAuBC;AAAvB,AACE,yGAAA,zGAACC;;AAED,OAACJ;;AAEH,qCAAA,rCAAMK;AAAN,AACE,mBAAA,ZAACC;;AAGH,yBAAA,zBAAeC;AAAf,AAGE,AAACF;;AACD,yGAAA,zGAACD;;AAID,OAACD","names":["cljs.core/enable-console-print!","project.cljs.core/root","project.cljs.core/render","reagent.dom.render","shadow.dom.by_id","project.cljs.core/reload!","cljs.core.println","project.cljs.core/initialize!","js/console.log","project.cljs.core/init"],"sourcesContent":["(ns project.cljs.core\n  (:require [shadow.dom :as dom]\n            [reagent.dom :as rd]\n            [reagent.core :as r]\n            [re-frame.core :as rf]\n            [project.cljs.routes :as routes]))\n\n\n(enable-console-print!)\n\n\n; quick root\n(defn root []\n  [:div\n   [:p \"hello\"]])\n\n(defn render []\n  (rd/render [root] (dom/by-id \"app\")))\n\n(defn ^:dev/after-load reload! []\n  (println \"(reload!)\")\n  ;(routes/start!)\n  (render))\n\n(defn initialize! []\n  (js/console.log \"dispatch to get records etc\"))\n\n\n(defn ^:export init []\n  ;; initialise re-frame by broadcasting event\n  ;(rf/dispatch-sync [:initialize])\n  (initialize!)\n  (println \"CLJS part initialized\")\n\n  ;; later depend on prod variable\n\n  (reload!))\n\n"]}