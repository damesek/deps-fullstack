{"version":3,"sources":["zprint/zprint.cljc"],"mappings":"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","names":["zprint.zprint/dots","n","cljs.core.apply","cljs.core/str","cljs.core.repeat","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","zprint.zprint/conj-it!","seq65688","G__65689","cljs.core/first","cljs.core/next","self__5754__auto__","to","rest","cljs.core.reduce","cljs.core/conj!","zprint.zprint/split-lf-2","s","temp__5802__auto__","next-lf","clojure.string.index_of","cljs.core.subs","G__65691","zprint.zprint/internal-config-and-validate","js/Error","options","new-map","error-str","validate?","vec__65692","cljs.core.nth","updated-map","_","errors","zprint.config.config_and_validate","cljs.core/empty?","zprint.zprint.internal_config_and_validate","zprint.zprint/option-fn-name","option-fn","e65695","option-fn-name","e","zprint.zprint/zsexpr-token?","zloc","cljs.core._EQ_","zprint.zfns/ztag","zprint.zfns/zsexpr?","zprint.zprint/empty-coll","zprint.zprint/get-sexpr","e65698","zprint.zfns/zsexpr","zprint.zfns/zstring","new-s","p1__65696#","p2__65697#","clojure.string/replace","sexpr","e65699","rewrite-clj.parser/parse-string","clojure.string/trim","new-zloc","rewrite_clj.zip.edn_STAR_","zprint.zprint/get-sexpr-or-nil","e65701","zprint.zprint/call-option-fn","caller","sexpr-seq","cljs.core.assoc","e65702","G__65704","G__65705","G__65706","cljs.core/count","or__5045__auto__","cljs.core.println","zprint.zprint/call-option-fn-first","option-fn-first","first-sexpr","zprint.zfns/zfirst-sexpr","e65708","zprint.zprint/guide-debug","debug-vector","cljs.core/second","p__65709","p__65710","vec__65711","vec__65714","zprint.zprint/condense","depth","out","accumulated-string","current-depth","what","element","new-depth","accumulating?","start-accumulating?","new-accumulated-string","next-accumulated-string","cljs.core.conj","zprint.zprint/condense-depth","coll","cljs.core.partial","G__65718","zprint.zprint/zpmap","f","cljs.core.map","coll1","coll2","zprint.zprint/zat","value","zprint.zprint/fzprint-dbg","cljs.core.atom","p__65719","map__65720","cljs.core/--destructure-map","cljs.core.get","zprint.zprint/log-lines","dbg-print?","dbg-indent","in-hang?","dbg-output","ind","style-vec","cljs.core.prn","p__65724","map__65725","zprint.zprint/showfn?","fn-map","color?","and__5043__auto__","f-str","cljs.core/re-find","cljs.core/Symbol","e65728","cljs.core/meta","G__65730","cljs.core/name","p__65731","map__65732","zprint.zprint/show-user-fn?","user-fn-map","e65733","zprint.zprint/right-separator-map","p__65734","p__65735","p__65736","map__65737","map__65738","map__65739","vec__65740","vec__65743","zprint.zprint/good-enough?","width","rightcnt","dbg?","hang-flow","hang-type-flow","hang-flow-limit","general-hang-adjust","hang-if-equal-flow?","hang-expand","hang-diff","hang-size","hang-adjust","fn-style","p-count","indent-diff","p-lines","p-maxwidth","p-length-seq","p-what","b-lines","b-maxwidth","b-what","p-last-maxwidth","cljs.core/last","result","cljs.core/not","zprint.zprint/fix-rightcnt","factor","zprint.zprint/in-hang","zprint.zprint/contains-nil?","p1__65756#","cljs.core/some","cljs.core/coll?","zprint.zprint/concat-no-nil-pre-noseq","seq65757","self__5755__auto__","cljs.core/seq","v","o","cljs.core/reduced","cljs.core.conj_BANG_","cljs.core/transient","cljs.core/persistent!","zprint.zprint/concat-no-nil","seq65769","vec__65787","right-ind","last-element","cljs.core/peek","vec__65791","previous-index","color","previous-what","zprint.zprint/count-right-blanks","new-previous","zprint.zprint/trimr-blanks","zprint.comment/blanks","zprint.zprint/concat-no-nil-pre-right","seq65794","zprint.zprint/remove-one","index","cljs.core.concat","cljs.core.take","cljs.core.drop","zprint.zprint/force-vector","cljs.core/vector?","cljs.core.into","zprint.zprint/keyword-fn?","vec__65795","left","right","clojure.string.split","fexpr__65798","p__65800","map__65801","zprint.zprint/get-max-length","max-length","x__5133__auto__","y__5134__auto__","zprint.zprint/no-max-length","p__65802","vec__65803","zprint.zprint/accumulate-ll","count-comment?","cur-len","just-eol?","just-comment?","in","tag","eol?","comment?","count-s","p__65806","p__65807","vec__65808","vec__65811","zprint.zprint/generate-ll","vec__65814","l","r","cljs.core/List","zprint.zprint/line-lengths-iter","cljs.core.pr_str","next-vec","current-string","line-length","previous-comment?","vec__65843","vec__65846","advance?","next-string","force-newline?","new-line-length","zprint.zprint/line-lengths","length-vec","vec__65849","zprint.zprint/single-line?","p1__65852#","p2__65853#","p1__65854#","clojure.string/includes?","zprint.zprint/find-what","s-vec","vec__65855","this","zprint.zprint/first-nl?","vec__65858","zprint.zprint/prepend-nl","zprint.zprint.concat_no_nil","zprint.zprint/style-lines","lengths","count-lengths","cljs.core/max","dbg-ge","p__65869","p__65870","map__65871","vec__65872","zprint.zprint/fzfit","line-count","max-width","style-lines-return","zprint.zprint/fzfit-one-line","lines","zprint.zprint/rightmost","zprint.zprint/not-rightmost","cljs.core.dissoc","zprint.zprint/c-r-pair","commas?","rightmost-pair?","rightmost?","zprint.zprint/str->key","p__65895","map__65896","zprint.zprint/zcolor-map","color-map","key-or-str","G__65897","cljs.core/Keyword","zprint.zprint/hangflow","hangflow?","hang-or-flow","zprint.zprint/fzprint-hang-unless-fail","hindent","findent","fzfn","G__65905","zprint.zfns/zfirst","hanging","cljs.core.not_EQ_","G__65906","G__65907","G__65908","value__49730__auto__","zprint.zprint/replace-color","local-color","vec__65921","vec__65924","string","p__65934","map__65935","map__65936","zprint.zprint/use-hang?","hang-accept","ha-depth-factor","ha-width-factor","hang-count","hanging-line-count","p__65951","p__65952","map__65953","map__65954","vec__65955","zprint.zprint/fzprint-two-up","one-line?","do-in-hang?","map-depth","hang?","dbg-local?","dbg-cnt?","indent","indent-arg","flow?","key-color","key-depth-color","key-value-color","key-value-options","justify","justify-width","justify-options","lloc","rloc","xloc","pair","vec__65963","vec__65966","local-hang?","non-justify-options","local-options","loptions","roptions","non-justify-roptions","local-roptions","value-color-map","G__65969","zprint.config.merge_deep","value-options-map","G__65976","modifier-set","modifier?","G__65978","zprint.zprint/middle-element?","G__65979","arg-1","zprint.zprint/fzprint*","no-justify","arg-1-newline?","zprint.zfns/znewline?","arg-1-line-count","arg-1-max-width","arg-1-lines","combined-arg-1","G__65986","G__65987","G__65988","arg-1-fit-oneline?","arg-1-fit?","arg-1-width","G__65996","cljs.core/ffirst","hanging-width","justify-width-n","arg-1-width-n","hanging-spaces","hanging-indent","flow-indent","zprint.zfns/zvector?","vec__65998","zprint.zprint/fzprint-binding-vec","vec__66001","G__66006","G__66007","G__66008","zprint.zfns/zcount","hanging-lines","fit?","flow-it?","flow","flow-lines","G__66017","G__66018","G__66019","G__66020","G__66021","zprint.zprint/fzprint-flow-seq","cljs.core/nnext","p__66034","map__66035","map__66036","zprint.zprint/fzprint-justify-width","justify?","ignore-for-variance","justify-underscore?","underscore?","firsts","cljs.core.remove","cljs.core/nil?","p1__66022#","G__66038","G__66039","G__66040","p1__66023#","G__66041","p1__66024#","G__66042","style-seq","cljs.core.mapv","each-one-line?","p1__66025#","p2__66026#","max-variance","alignment","zprint.util/column-width-variance","cljs.core/vec","p1__66027#","G__66048","zprint.zprint/fit-within?","size","zprint.zprint.fit_within_QMARK_","remaining","zprint.zprint/remove-hangflow","hf-style-vec","zprint.zprint/pair-lengths","cljs.core.comp","p__66060","map__66067","map__66068","zprint.zprint/fzprint-map-two-up","force-nl?","parallel?","caller-map","len","caller-options","beginning-coll","cljs.core/butlast","beginning-remaining","beginning","zprint.zprint.zpmap","end-coll","end-remaining","end","temp__5804__auto__","end-result","zprint.zprint/compare-keys","x","y","cljs.core/compare","zprint.zprint/compare-ordered-keys","key-value","zdotdotdot","p__66090","map__66091","map__66092","zprint.zprint/order-out","sort?","sort-in-code?","key-order","in-code?","access","p1__66088#","p2__66089#","cljs.core.sort","zprint.zfns/zdotdotdot","zprint.zprint/pair-element?","zprint.zfns/zcomment?","zprint.zfns/zuneval?","zprint.zprint/nosort?","no-sort-set","regex-seq","cljs.core.filter","cljs.core/string?","p1__66100#","p__66102","map__66103","zprint.zprint/remove-key-seq","m","ks","this-key","next-key","removed-map","G__66105","G__66106","zprint.zprint/ignore-key-seq-silent","cljs.core.get_in","zprint.zprint/ignore-key-seq","cljs.core/assoc-in","p__66118","map__66119","map__66120","zprint.zprint/map-ignore","key-ignore","key-ignore-silent","ignored-silent","ignored","zprint.zprint/partition-all-2-nc","no-sort?","G__66156","G__66158","vec__66163","new-remaining","pair-vec","new-no-sort?","vec__66167","comment-seq","rest-seq","p1__66124#","cljs.core/split-with","G__66178","G__66179","G__66181","zprint.zprint/cleave-end","G__66183","zprint.zfns/zsymbol?","G__66184","zprint.zfns/zreader-cond-w-symbol?","vec__66185","rev-seq","cljs.core/reverse","split-non-coll","p1__66182#","zprint.zfns/zcoll?","zprint.zfns/zreader-cond-w-coll?","cljs.core/list","remainder","zprint.zprint/partition-all-sym","part-sym","p1__66189#","cljs.core.partition_by","zprint.zfns/znil?","cljs.core.mapcat","vec__66204","next-remaining","new-out","G__66207","G__66208","G__66209","G__66210","G__66211","G__66212","cljs.core/nthnext","G__66213","G__66214","cljs.core/cons","G__66216","zprint.zprint/rstr-vec","r-str","r-type","zprint.zprint.rstr_vec","p__66217","map__66218","map__66219","nl-separator?","G__66220","l-str","l-str-vec","r-str-vec","G__66221","G__66222","G__66223","zprint.zprint/interpose-nl-hf","zprint.zprint/fzprint-get-zloc-seq","p__66224","map__66225","zprint.zprint/fzprint-hang","force-eol-blanks?","zloc-count","fexpr__66226","G__66227","G__66228","G__66229","G__66230","fexpr__66231","hr-lines","fd-lines","hr-good?","G__66233","zprint.zprint/fzprint-pairs","p__66234","map__66235","map__66236","respect-nl?","zloc-seq","G__66237","G__66238","G__66239","G__66240","vec__66241","part","zprint.zprint.fzprint_pairs","zprint.zprint/check-for-coll?","zprint.zprint/check-for-first-coll?","seq-series","p__66245","map__66246","map__66247","zprint.zprint/fzprint-extend","G__66248","p1__66244#","G__66249","G__66250","G__66251","G__66252","G__66253","G__66254","zprint.zprint/fzprint-hang-remaining","clojure.string/starts-with?","G__66255","G__66256","G__66257","zprint.zprint/concatv!","seq66258","G__66259","cols","col","zprint.zprint/fzprint-one-line","seq-right","last-index","gt-1?","new-ind","cljs.core/long","vec__66273","vec__66276","next-zloc","sep","next-options","next-out","next-lines","zprint.zprint.concatv_BANG_","zprint.zprint/fzprint-seq","p1__66286#","p2__66287#","G__66289","G__66290","G__66291","G__66292","G__66293","G__66294","G__66303","nl-first?","coll-print","one-line","cljs.core.interpose","one-line-lines","G__66308","G__66309","G__66310","G__66311","zprint.zprint/precede-w-nl","zprint.zprint.fzprint_flow_seq","p__66319","map__66320","map__66321","zprint.zprint/fzprint-hang-one","hang-avoid","G__66322","G__66328","G__66329","G__66330","zprint.zprint/count-constant-pairs","constant-pair-fn","zloc-seq-rev","element-count","paired-element-count","constant-required?","pair-size","actual-pair-size","comment-or-newline?","zprint.zprint/zcomment-or-newline?","G__66354","zprint.zfns/zconstant?","p__66362","map__66363","map__66364","zprint.zprint/constant-pair","constant-pair?","constant-pair-min","vec__66365","paired-item-count","actual-paired-items","non-paired-item-count","pair-seq","zprint.zprint/ensure-start-w-nl","element-type","zprint.zprint/ensure-end-w-nl","G__66391","p__66392","map__66393","map__66394","G__66397","G__66398","vec__66399","vec__66402","vec__66405","vec__66408","hang-result","flow-result","zprint.zprint.fzprint_hang_remaining","zprint.zfns/zmap-w-nl","cljs.core/identity","zprint.zfns/zmap-w-bl","zprint.zfns/zmap","zprint.zprint/newline-or-comment?","zloc-tag","zprint.zprint/remove-last-newline","ssv","last-style-vec","last-len","total-len","remove-one","cljs.core/PersistentVector","zprint.zprint/remove-one-newline","zprint.zprint/add-newline-to-comment","fzprint*-return","the-type","zprint.zprint/gather-up-to-next-zloc","nloc-seq","next-count","p__66431","vec__66432","zprint.zprint/fzprint-up-to-next-zloc","current-count","next-data","starting-count","vec__66436","pre-next-zloc-seq","cljs.core/vector","coll-out","first-type","zprint.zprint/fzprint-up-to-first-zloc","p__66441","vec__66442","zprint.zprint/get-zloc-seq-right","input-data","zprint.zprint/at-newline?","this-tag","zprint.zprint/next-newline","nloc","next-right","rewrite-clj.zip/right*","zprint.zutil/whitespace?","zprint.zprint/next-actual","next-nloc","zprint.zutil/zrightnws","next-tag","rewrite-clj.zip/tag","zprint.zprint/first-actual","zprint.zprint/hang-zloc?","vec__66450","count-prior-to-newline","newline","second-element","second-indent","zprint.comment/length-before","third-element","third-indent","zprint.zprint/indent-shift","actual-ind","svec","shift-ind","cur-seq","cur-ind","vec__66461","this-seq","new-seq","vec__66464","type","next-seq","this-shift","linecnt","last-width","G__66469","zprint.zprint/indent-zmap","p__66471","map__66472","map__66473","wrap-after-multi?","first-indent-only?","zprint.zprint/merge-fzprint-seq","actual-indent","beginning?","l-str-indent?","vec__66477","multi?","thetype","x__5130__auto__","y__5131__auto__","newline?","comma?","isempty?","newline-next?","zprint.zprint.indent_zmap","zprint.zprint/hang-indent","zprint.zprint/flow-indent","zprint.zprint/newline-seq?","newline-vec","starts-with-nl-vec","p1__66480#","true-seq","cljs.core.distinct","fzprint-seq-vec","p1__66482#","p2__66481#","G__66484","zprint.zprint/fzprint-indent","arg-1-indent","l-str-len","zprint.zfns/zmap-w-nl-comma","indent-only-style","already-hung?","rewrite-clj.zip/down*","raw-indent","coll-print-contains-nil?","output","zprint.zprint.fzprint_indent","zprint.zprint/zfind-seq","zthing?","i","G__66485","zprint.zprint/body-set","zprint.zprint/body-map","zprint.zprint/noarg1-set","zprint.zprint/noarg1-map","zprint.zprint/noarg1","fn-type","zprint.zprint/fn-style->caller","zprint.zprint/get-respect-indent","backup","respect-bl?","indent-only?","p__66486","map__66487","zprint.zprint/allow-one-line?","fn-force-nl","fn-gt2-force-nl","fn-gt3-force-nl","future-caller","zprint.zprint/modify-zloc","vec__66488","trigger-symbol","modify-fn","return-altered-zipper-value","call-fn?","G__66491","G__66492","return","p__66494","map__66495","zprint.zprint/fzprint-list*","no-arg1?","quote?","vec__66496","vec__66499","vec__66502","vec__66505","vec__66508","vec__66511","G__66514","G__66515","G__66516","zprint.zfns/ztake-append","pre-arg-1-style-vec","arg-1-zloc","arg-1-count","first-data","arg-1-coll?","zprint.zfns/zkeyword?","arg-1-indent-alt?","fn-str","zprint.zfns/zlist?","zprint.zfns/zmap?","zprint.zfns/zset?","G__66517","new-options","guide","pre-arg-2-style-vec","arg-2-zloc","arg-2-count","second-data","zprint.zfns/zcount-zloc-seq-nc-nws","cljs.core.update_in","cljs.core/dissoc","one-line-ok?","fexpr__66538","indent-adj","default-indent","one-line-ind","local-indent","zprint.zprint/fzprint-guide","vec__66542","binding-style-vec","G__66545","G__66546","G__66547","zloc-seq-right-first","G__66548","G__66549","G__66550","G__66551","G__66552","G__66553","vec__66554","vec__66557","pre-arg-3-style-vec","arg-3-zloc","arg-3-count","third-data","zloc-seq-right-third","first-three","first-two-wo-pre-arg-1","G__66560","G__66561","G__66562","first-two-one-line?","first-two","G__66563","G__66564","G__66565","vec__66566","vec__66569","pre-arg-4-style-vec","arg-4-zloc","arg-4-count","fourth-data","arg-vec-index","p1__66493#","G__66572","doc-string?","mixin-start","mixin-length","mixins?","doc-string","mixins","vec__66573","mixin-sentinal","G__66576","G__66577","G__66578","G__66579","G__66580","G__66581","zloc-seq-right-second","G__66582","G__66583","G__66584","G__66585","G__66586","G__66587","G__66588","G__66589","G__66590","wrap-coll?","zprint.zprint/any-zcoll?","G__66591","G__66592","G__66593","G__66594","G__66595","zprint.zprint/wrap-zmap","G__66596","G__66597","G__66598","zprint.zprint/fzprint-list","zprint.zprint/fzprint-anon-fn","coll?-seq","p1__66599#","p2__66600#","p__66601","map__66602","map__66603","previous-newline?","vec__66607","comment-inline?","this-seq-next","zprint.zprint/count-comments-and-newlines","comment-and-newline-count","zprint.zprint/zcount-comments-and-newlines","G__66610","p__66611","p__66612","p__66613","map__66614","map__66615","map__66616","vec__66617","zprint.zprint/guided-output","wrap-multi?","rightmost-zloc?","next-guide","cur-index","guide-seq","element-index","excess-guided-newline-count","align-key","last-cur-index","spaces","group-seq","param-map","mark-map","previous-guided-newline?","unguided-newline-out?","previous-data","vec__66620","vec__66623","guided-newline?","do-pairs?","incoming-seq","align-ind","incoming-lines","align-spaces","group-newline?","G__66626","regular-space","additional-spaces","beyond-cur-ind","this-spaces","this-ind","early-next-ind","this-early-next-ind","do-hang-remaining?","hang-remaining-seq","try-this?","this-result","G__66627","G__66628","G__66629","this-lines","this-multi?","this-linecnt","this-fit?","output-seq","output-newline?","fail-fit?","next-ind","test-fit?","try-next?","next-result","G__66630","G__66631","G__66632","first-next-result","indent?","zprint.ansi.color_str","G__66634","G__66635","fexpr__66633","out-len","out-drop","G__66637","G__66638","fexpr__66636","guided-output-out","G__66640","G__66641","fexpr__66639","zprint.zprint/comment-or-newline?","zprint.zprint/guide-here","p__66642","map__66643","map__66644","G__66646","G__66648","G__66649","fexpr__66647","G__66653","vec__66654","vec__66698","cur-zloc","G__66702","G__66703","fexpr__66701","first-guide-seq","G__66705","G__66706","fexpr__66704","G__66708","G__66709","fexpr__66707","G__66711","G__66712","fexpr__66710","G__66713","next-newline?","G__66714","uneval?","G__66715","vec__66716","comments-or-newlines-cur-zloc","remaining-cur-zloc","vec__66719","merged-option-map","vec__66722","guided-newline-count","new-param-map","new-previous-data","vec__66725","vec__66728","vec__66731","vec__66734","G__66738","zprint.zprint/remove-nl","p1__66739#","zprint.zprint/comment-in-zloc-seq?","p1__66741#","p2__66740#","p__66742","map__66743","map__66744","zprint.zprint/fzprint-vec*","wrap?","binding?","fn-format","vec__66745","vec__66748","vec__66751","map__66754","map__66755","zprint.zprint/fzprint-vec","zprint.zprint/fzprint-array","zprint.zprint/fzprint-set","zprint.zprint/interpose-either","sep-true","sep-nil","pred?","interpose?","zprint.zprint.conj_it_BANG_","G__66757","not-first?","ind-seq","added-nl?","previous-element-index","previous-type","vec__66770","vec__66773","last-what","next-coll","vec__66776","vec__66779","next-what","zprint.zprint/count-newline-types","newline-style-vec","count-of-types","p1__66782#","clojure.string/ends-with?","zprint.zprint/repeat-style-vec-nl","no-space-n","vec__66783","no-space-element","no-space-style-vec","p__66786","vec__66787","zprint.zprint/trimr-blanks-element","zprint.zprint/trimr-blanks-style-vec","zprint.zprint/repeat-element-nl","vec__66790","zprint.zprint/next-non-comment-nl","vec__66793","vec__66796","p__66799","map__66800","zprint.zprint/interpose-either-nl-hf","sep-comma","sep-comma-nl","sep-nl","nl-separator-all?","suboptions","previous-needs-comma?","add-nl?","first?","newline-count","vec__66810","vec__66813","hangflow","vec__66816","interpose-style-vec","interpose-count","addtl-nl-needed","p__66819","map__66820","map__66821","zprint.zprint/fzprint-map*","ztype","lift-ns?","lift-ns-in-code?","map-options","ns","vec__66822","vec__66825","vec__66828","zprint.zfns/zseqnws-w-nl","zprint.zfns/zseqnws-w-bl","zprint.zfns/zseqnws","lift-pair-seq","G__66831","G__66832","G__66833","zprint.zfns/zlift-ns","pair-count","pair-print-one-line","cljs.core/constantly","pair-print","zprint.zprint/fzprint-map","vec__66834","lifted-map","zprint.zfns/znamespacedmap?","G__66837","zprint.zprint/object-str?","G__66839","zprint.zprint/fzprint-object","zloc-value","zprint.zfns/zobj-to-vec","zprint.zprint/hash-identity-str","obj","cljs.core/hash","p__66840","map__66841","map__66842","zprint.zprint/fzprint-atom","object?","zprint.zprint.fzprint_object","zprint.zfns/zderef","zprint.zprint/fzprint-future-promise-delay-agent","zloc-type","zprint.zfns/zfuture?","zprint.zfns/zpromise?","zprint.zfns/zdelay?","zprint.zfns/zagent?","cljs.core/realized?","type-str","G__66843","zloc-realized?","G__66844","p__66845","map__66846","map__66847","zprint.zprint/fzprint-fn-obj","arg-1-left","arg-1-right","class-str","cljs.core/type","name-js","name-split","arg-2","zprint.zprint/fzprint-ns","cljs.core/ns-name","zprint.zprint/dec-depth","p__66848","map__66849","map__66850","zprint.zprint/fzprint-record","record-type?","to-string?","G__66851","G__66852","G__66853","G__66854","G__66855","G__66856","tokens","zprint.zprint/fzprint-meta","zprint.zprint/fzprint-reader-macro","vec__66857","zstr","G__66860","alt-at?","reader-cond?","namespaced?","at?","G__66861","zprint.zfns/zsecond","G__66862","G__66864","floc","G__66865","l-str-io","r-str-io","l-str-vec-io","r-str-vec-io","zprint.zfns/znextnws-w-nl","zprint.zprint/fzprint-newline","vec__66866","zprint.finish/newline-vec","zprint.zprint/prefix-tags","zprint.zprint/prefix-options","prefix-tag","zprint.zprint/make-caller","new-caller","existing-caller","key-seq","p1__66869#","zprint.zprint/integrate-next-inner","next-inner","cljs.core/map?","p1__66870#","p2__66871#","p__66872","map__66873","hex?","shift-seq","dbg-s","string-str?","string-color","max-depth","trim-comments?","max-hang-depth","max-hang-span","max-hang-count","cljs.core/deref","avail","dbg-data","dbg-focus?","zprint.zfns/zfind-path","zprint.zfns/zrecord?","zprint.zfns/zanonfn?","zprint.zfns/zfn-obj?","zprint.zfns/zarray?","zprint.zfns/zexpandarray","zprint.zfns/zatom?","zprint.zfns/zmeta?","G__66874","G__66875","zprint.zfns/zns?","zprint.zfns/zreader-macro?","overflow-in-hang?","zcomment","clojure.string/trimr","inline-comment-vec","zprint.comment/inlinecomment?","zprint.zfns/zwhitespaceorcomment?","zloc-sexpr","zprint.zfns/znumstr","cljs.core/char?","c__5078__auto__","x__5079__auto__","zprint.zprint/fzprint","zprint.zutil/add-spec-to-docstring","zprint.zfns/zfn-map","zprint.zprint/line-count","cljs.core/re-seq","zprint.zprint/line-widths","zprint.zprint/max-width","G__66877","zprint.zprint/expand-tabs","tab-size","char-seq","this-char","tab-expansion","cljs.core/mod","cljs.core/rest","zprint.zprint.expand_tabs","zprint.zprint/determine-ending-split-lines","first-lines","nl-count","p1__66879#","p2__66878#","line-ending","this__5343__auto__","k__5344__auto__","this__5345__auto__","k66881","else__5346__auto__","G__66885","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","ret__5366__auto__","p__66886","vec__66887","k__5367__auto__","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","G__66880","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this66882","other66883","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core/-with-meta","cljs.core/not-empty","this__5350__auto__","G__66890","this__5351__auto__","k__5352__auto__","pred__66891","cljs.core/keyword-identical?","expr__66892","this__5356__auto__","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/-nth","cljs.core/-conj","zprint.zprint/r","this__5389__auto__","writer__5390__auto__","cljs.core/-write","G__66884","extmap__5385__auto__","G__66894","cljs.core/record?","zprint.zprint/->r","zprint.zprint/map->r","zprint.zprint/make-record"],"sourcesContent":[";!zprint {:style :require-justify}\n(ns ^:no-doc zprint.zprint\n  #?@(:cljs [[:require-macros\n              [zprint.macros :refer\n               [dbg dbg-s dbg-pr dbg-s-pr dbg-form dbg-print zfuture]]]])\n  (:require\n    #?@(:clj [[zprint.macros :refer\n               [dbg-pr dbg-s-pr dbg dbg-s dbg-form dbg-print zfuture]]])\n    [clojure.string     :as s]\n    [zprint.finish      :refer [newline-vec]]\n    [zprint.zfns        :refer [zstring znumstr zbyte-array? zcomment? zsexpr\n                                zseqnws zseqnws-w-nl zfocus-style zstart zfirst\n                                zfirst-sexpr zsecond znthnext zcount zmap\n                                zanonfn? zfn-obj? zfocus zfind-path zwhitespace?\n                                zlist? zcount-zloc-seq-nc-nws zvector? zmap?\n                                zset? zcoll? zuneval? zmeta? ztag zlast zarray?\n                                zatom? zderef zrecord? zns? zobj-to-vec\n                                zexpandarray znewline? zwhitespaceorcomment?\n                                zmap-all zpromise? zfuture? zdelay? zkeyword?\n                                zconstant? zagent? zreader-macro?\n                                zarray-to-shift-seq zdotdotdot zsymbol? znil?\n                                zreader-cond-w-symbol? zreader-cond-w-coll?\n                                zlift-ns zfind zmap-w-nl zmap-w-nl-comma\n                                ztake-append znextnws-w-nl znextnws\n                                znamespacedmap? zmap-w-bl zseqnws-w-bl zsexpr?\n                                zmap-no-comment zfn-map]]\n    [zprint.comment     :refer [blanks inlinecomment? length-before]]\n    [zprint.ansi        :refer [color-str]]\n    [zprint.config      :refer [validate-options merge-deep]]\n    [zprint.zutil       :refer [add-spec-to-docstring]]\n    [zprint.util        :refer [column-width-variance median mean percent-gt-n]]\n    [rewrite-clj.parser :as p]\n    [rewrite-clj.zip    :as    z\n                        :refer [edn* tag right* down*]]\n    #_[taoensso.tufte :as tufte :refer (p defnp profiled profile)]))\n\n#_(tufte/add-basic-println-handler! {})\n\n;;\n;; # Utility Functions\n;;\n\n(defn dots\n  \"Produce a dot string of desired size.\"\n  [n]\n  (apply str (repeat n \".\")))\n\n; This is about 10% faster than:\n;\n;(defn conj-it!-orig\n;  \"Make a version of conj! that take multiple arguments.\"\n;  [& rest]\n;  (loop [out (first rest)\n;         more (next rest)]\n;    (if more (recur (conj! out (first more)) (next more)) out)))\n\n(defn conj-it!\n  \"Make a version of conj! that takes multiple arguments.\"\n  [to & rest]\n  (reduce conj! to rest))\n\n(defn split-lf-2\n  \"Do split for newlines, instead of using regular expressions.\n  Maximum split is 2.\"\n  [s]\n  (if-let [next-lf (clojure.string/index-of s \"\\n\")]\n    [(subs s 0 next-lf) (subs s (inc next-lf))]\n    [s]))\n\n(defn internal-config-and-validate\n  \"Possibly validate an options map and merge it correctly with the existing\n  options map.  Validation only happens when the caller says to validate\n  and the new-map doesn't have :no-validate? true (unless the existing\n  options map has :force-validate? true).\n  This is necessary instead of just doing a merge-deep, since\n  that doesn't get styles and removal done correctly.  Returns\n  [merged-options-map new-options] or throws an error.\"\n  ([options new-map error-str validate?]\n   (let [validate? (when validate?\n                     (if (:no-validate? new-map)\n                       (when (:force-validate? options) :validate)\n                       :validate))\n         [updated-map _ errors] (zprint.config/config-and-validate nil\n                                                                   #_error-str\n                                                                   nil\n                                                                   options\n                                                                   new-map\n                                                                   validate?)\n         errors (when errors\n                  (str \"Options resulting from \" error-str\n                       \" had these errors: \" errors))]\n     (if (not (empty? errors))\n       (throw (#?(:clj Exception.\n                  :cljs js/Error.)\n               errors))\n       [updated-map new-map])))\n  ([options new-map error-str]\n   (internal-config-and-validate options new-map error-str :validate)))\n\n(defn option-fn-name\n  \"Given an option-fn, call it with no arguments to see if it returns its\n  name.  To be used only in exceptions or other times when performance is\n  not important, because historically many option-fn's didn't know to do this.\"\n  [option-fn]\n  (try (let [option-fn-name (option-fn)]\n         (when (string? option-fn-name) (str \" named '\" option-fn-name \"'\")))\n       (catch #?(:clj Exception\n                 :cljs :default)\n         e\n         nil)))\n\n\n(defn zsexpr-token?\n  \"Call zsexpr?, but only if zloc is a :token\"\n  [zloc]\n  (when (= (ztag zloc) :token) (zsexpr? zloc)))\n\n(defn empty-coll\n  \"For the major collections, returns a empty one. Essentially an\n  implementation of empty for zlocs.\"\n  [zloc]\n  (cond (= (ztag zloc) :list) '()\n        (= (ztag zloc) :vector) []\n        (= (ztag zloc) :set) #{}\n        (= (ztag zloc) :map) {}))\n\n(defn get-sexpr\n  \"Given a zloc, do the best we can to get an sexpr out of it.\"\n  [options zloc]\n  (try\n    (zsexpr zloc)\n    (catch #?(:clj Exception\n              :cljs :default)\n      e\n      (let [#_(prn \"tag:\" (ztag zloc) \"zloc:\" zloc \"zstring:\" (zstring zloc))\n            s (zstring zloc)\n            new-s (reduce #(clojure.string/replace %1 %2 \"\")\n                    s\n                    (:ignore-if-parse-fails (:parse options)))\n            #_(clojure.string/replace s \"...\" \"\")\n            #_(prn \"new-s:\" new-s)\n            ; So, let's try parsing it again and see if this works.  If\n            ; the zsexpr failed, we know it is a string because the structure\n            ; version of zsexpr is identity, which is unlikely to fail.\n            sexpr\n              (try\n                (let [n (p/parse-string (clojure.string/trim new-s))\n                      new-zloc (edn* n)\n                      sexpr (zsexpr new-zloc)]\n                  sexpr)\n                (catch #?(:clj Exception\n                          :cljs :default)\n                  e\n                  (throw\n                    (#?(:clj Exception.\n                        :cljs js/Error.)\n                     (str\n                       \"Unable to parse the string '\" s\n                       \"' because of '\" e\n                       \"'.  Consider adding any unallowed elements to\"\n                         \" {:parse {:ignore-if-parse-fails #{ <string> }}}\")))))\n            #_(prn \"sexpr:\" sexpr)]\n        sexpr))))\n\n(defn get-sexpr-or-nil\n  \"Try to get an sexpr of something, and return nil if we can't.\"\n  [options zloc]\n  (try (get-sexpr options zloc)\n       (catch #?(:clj Exception\n                 :cljs :default)\n         e\n         nil)))\n\n(defn call-option-fn\n  \"Call an option-fn and return a (possibly) validated map of \n  the merged options. Returns [merged-options-map new-options]\"\n  [caller options option-fn zloc]\n  #_(prn \"call-option-fn caller:\" caller)\n  (let [sexpr-seq (get-sexpr options zloc)\n        ; Add the current zloc to the options for the option-fn\n        options (assoc options\n                  :zloc zloc\n                  :caller caller)]\n    (internal-config-and-validate\n      options\n      (try\n        (option-fn options (count sexpr-seq) sexpr-seq)\n        (catch #?(:clj Exception\n                  :cljs :default)\n          e\n          (do (dbg-s options :guide-exception \"Failure in option-fn:\" (throw e))\n              (throw (#?(:clj Exception.\n                         :cljs js/Error.)\n                      (str \" When \" caller\n                           \" called an option-fn\" (option-fn-name option-fn)\n                           \" it failed because: \" e))))))\n      (str caller\n           \" :option-fn\" (option-fn-name option-fn)\n           \" called with an sexpr of length \" (count sexpr-seq))\n      :validate)))\n\n(defn call-option-fn-first\n  \"Call an option-fn-first with just the first thing in the zloc, and\n  then return a validated map of just the new options.\n  Returns [merge-options-map new-options]\"\n  [caller options option-fn-first zloc]\n  (let [first-sexpr (get-sexpr options (zfirst-sexpr zloc))]\n    (internal-config-and-validate\n      options\n      (try (option-fn-first options first-sexpr)\n           (catch #?(:clj Exception\n                     :cljs :default)\n             e\n             (throw (#?(:clj Exception.\n                        :cljs js/Error.)\n                     (str \"When \" caller\n                          \" called an option-fn-first\" (option-fn-name\n                                                         option-fn-first)\n                          \" with '\" first-sexpr\n                          \"' failed because: \" e)))))\n      (str caller\n           \" :option-fn-first\" (option-fn-name option-fn-first)\n           \" called with \" first-sexpr)\n      :validate)))\n\n(defn guide-debug\n  \"Given the options map and a caller, look for :guide-debug in the options\n  map.  It looks like [:caller :depth [:element ...]]  If the caller and \n  depth match, return the guide, else nil.\"\n  [caller options]\n  (let [debug-vector (:guide-debug options)]\n    (when debug-vector\n      (dbg-s options\n             :guide\n             \"guide-debug: caller:\" caller\n             \"depth:\" (:depth options)\n             \"guide:\" debug-vector)\n      (if (and (= caller (first debug-vector))\n               (= (:depth options) (second debug-vector)))\n        (nth debug-vector 2)))))\n\n(defn condense\n  [depth [out accumulated-string current-depth] [s _ what :as element]]\n  (let [new-depth (cond (= what :left) (inc current-depth)\n                        (= what :right) (dec current-depth)\n                        :else current-depth)\n        accumulating? (> current-depth depth)\n        start-accumulating? (> new-depth depth)\n        new-accumulated-string (if (or accumulating? start-accumulating?)\n                                 (str accumulated-string s)\n                                 accumulated-string)\n        next-accumulated-string\n          (if start-accumulating? new-accumulated-string \"\")]\n    [(cond (and accumulating? (not start-accumulating?))\n             (conj out new-accumulated-string)\n           (and accumulating? start-accumulating?) out\n           (and (not accumulating?) (not start-accumulating?)) (conj out\n                                                                     element)\n           (and (not accumulating?) start-accumulating?) out\n           :else (println \"shouldn't be an else\")) next-accumulated-string\n     new-depth]))\n\n(defn condense-depth\n  \"Take a style vec, and condense everything above the given depth.\"\n  [depth coll]\n  (first (reduce (partial condense depth) [[] \"\" 1] coll)))\n\n;;\n;; # Use pmap when we have it\n;;\n\n#?(:bb (defn zpmap\n         ([options f coll] (map f coll))\n         ([options f coll1 coll2] (map f coll1 coll2)))\n   :clj (defn zpmap\n          ([options f coll]\n           (if (:parallel? options) (pmap f coll) (map f coll)))\n          ([options f coll1 coll2]\n           (if (:parallel? options) (pmap f coll1 coll2) (map f coll1 coll2))))\n   :cljs (defn zpmap\n           ([options f coll] (map f coll))\n           ([options f coll1 coll2] (map f coll1 coll2))))\n\n;;\n;; # More parallelism issues -- zderef to go with zfuture macro\n;;\n\n(defn zat\n  \"Takes an option map and the return from zfuture.  If the\n  options map has (:parallel? options) as true, then deref\n  the value, otherwise just pass it through.\"\n  [options value]\n  #?(:bb value\n     :clj (if (:parallel? options) (deref value) value)\n     :cljs value))\n\n;;\n;; # Debugging Assistance\n;;\n\n(def fzprint-dbg (atom nil))\n\n(defn log-lines\n  \"Accept a style-vec that we are about to hand to style-lines, and\n  output it if called for, to aid in debugging.\"\n  [{:keys [dbg-print? dbg-indent in-hang?], :as options} dbg-output ind\n   style-vec]\n  (when dbg-print?\n    (if style-vec\n      (do (println dbg-indent dbg-output \"--------------\" \"in-hang?\" in-hang?)\n          (prn style-vec)\n          #_(println (apply str (blanks ind) (map first style-vec))))\n      (println dbg-indent dbg-output \"--------------- no style-vec\"))))\n\n;;\n;; # What is a function?\n;;\n\n(defn showfn?\n  \"Show this thing as a function?\"\n  [{:keys [fn-map color?], :as options} f]\n  (when (and color? (not (string? f)))\n    (let [f-str (str f)\n          fn-map (:fn-map options)]\n      (or (fn-map f-str)\n          (re-find #\"clojure\" f-str)\n          (if (symbol? f)\n            ; This is necessary because f can be a symbol that\n            ; resolve will have a problem with.  The obvious ones\n            ; were (ns-name <some-namespace>), but there are almost\n            ; certainly others.\n            (try (or (re-find #\"clojure\"\n                              (str (:ns (meta #?(:clj (resolve f)\n                                                 :cljs f)))))\n                     (fn-map (name f)))\n                 (catch #?(:clj Exception\n                           :cljs :default)\n                   e\n                   nil)))))))\n\n(defn show-user-fn?\n  \"Show this thing as a user defined function?  Assumes that we\n  have already handled any clojure defined functions!\"\n  [{:keys [user-fn-map color?], :as options} f]\n  (when (and color? (not (string? f)))\n    (let [f-str (str f)]\n      (or (get user-fn-map f-str)\n          (if (symbol? f)\n            ; This is necessary because f can be a symbol that\n            ; resolve will have a problem with.  The obvious ones\n            ; were (ns-name <some-namespace>), but there are almost\n            ; certainly others.\n            (try (or (not (empty? (str (:ns (meta #?(:clj (resolve f)\n                                                     :cljs f))))))\n                     (get user-fn-map (name f)))\n                 (catch #?(:clj Exception\n                           :cljs :default)\n                   e\n                   nil)))))))\n\n(def right-separator-map {\")\" 1, \"]\" 1, \"}\" 1})\n\n;;\n;; # Functions to compare alternative printing approaches\n;;\n\n(declare fix-rightcnt)\n(declare contains-nil?)\n\n(defn good-enough?\n  \"Given the fn-style, is the first output good enough to be worth\n  doing. p is pretty, which is typically hanging, and b is basic, which\n  is typically flow. p-count is the number of elements in the hang.\"\n  [caller\n   {:keys [width rightcnt dbg?],\n    {:keys [hang-flow hang-type-flow hang-flow-limit general-hang-adjust\n            hang-if-equal-flow?]}\n      :tuning,\n    {:keys [hang-expand hang-diff hang-size hang-adjust]} caller,\n    :as options} fn-style p-count indent-diff\n   [p-lines p-maxwidth p-length-seq p-what] [b-lines b-maxwidth _ b-what]]\n  (let [p-last-maxwidth (last p-length-seq)\n        hang-diff (or hang-diff 0)\n        hang-expand (or hang-expand 1000.)\n        hang-adjust (or hang-adjust general-hang-adjust)\n        #_(options (if (and p-lines\n                            p-count\n                            (pos? p-count)\n                            (not (<= indent-diff hang-diff))\n                            (not (<= (/ (dec p-lines) p-count) hang-expand)))\n                     (assoc options :dbg? true)\n                     options))\n        options (if (or p-what b-what) (assoc options :dbg? true) options)\n        result (if (not b-lines)\n                 true\n                 (and p-lines\n                      ; Does the last line fit, including the collection ending\n                      ; stuff?\n                      ; Do we really need this anymore?\n                      (<= p-last-maxwidth (- width (fix-rightcnt rightcnt)))\n                      ; Does it widest line fit?\n                      ; Do we have a problem if the widest line has a rightcnt?\n                      (<= p-maxwidth width)\n                      ;      (<= p-maxwidth (- width (fix-rightcnt rightcnt)))\n                      (or (zero? p-lines)\n                          (and ; do we have lines to operate on?\n                            (> b-lines 0)\n                            (> p-count 0)\n                            ; if the hang and the flow are the same size, why\n                            ; not hang?\n                            (if (and (= p-lines b-lines) hang-if-equal-flow?)\n                              true\n                              ; is the difference between the indents so small\n                              ; that we don't care?\n                              (and (if (<= indent-diff hang-diff)\n                                     true\n                                     ; Do the number of lines in the hang exceed\n                                     ; the number of elements in the hang?\n                                     (<= (/ (dec p-lines) p-count) hang-expand))\n                                   (if hang-size (< p-lines hang-size) true)\n                                   (let [factor (if (= fn-style :hang)\n                                                  hang-type-flow\n                                                  hang-flow)]\n                                     ; if we have more than n lines, take the\n                                     ; shortest\n                                     (if (> p-lines hang-flow-limit)\n                                       (<= (dec p-lines) b-lines)\n                                       ; if we have less then n lines, we don't\n                                       ; necessarily take the shortest\n                                       ; once we did (dec p-lines) here, fwiw\n                                       ; then we tried it w/out the dec, now we\n                                       ; let you set it in :tuning.\n                                       ; The whole point of having a\n                                       ; hang-adjust of -1 is to allow hangs\n                                       ; when the number of lines in a hang\n                                       ; is the same as the number of lines\n                                       ; in a flow.\n                                       ;(< (/ p-lines b-lines) factor)))))))]\n                                       (< (/ (+ p-lines hang-adjust) b-lines)\n                                          factor)))))))))]\n    (dbg\n      options\n      (if result \"++++++\" \"XXXXXX\")\n      \"p-what\" p-what\n      \"good-enough? caller:\" caller\n      \"fn-style:\" fn-style\n      \"width:\" width\n      \"rightcnt:\" rightcnt\n      \"hang-expand:\" hang-expand\n      \"hang-flow-limit:\" hang-flow-limit\n      \"hang-adjust:\" hang-adjust\n      \"(/ (+ p-lines hang-adjust) b-lines)\"\n        (when (and p-lines b-lines hang-adjust)\n          (/ (+ p-lines hang-adjust) b-lines))\n      \"factor:\" (if (= fn-style :hang) hang-type-flow hang-flow)\n      \"p-count:\" p-count\n      \"p-lines:\" p-lines\n      \"p-maxwidth:\" p-maxwidth\n      \"indent-diff:\" indent-diff\n      \"hang-diff:\" hang-diff\n      \"p-last-maxwidth:\" p-last-maxwidth\n      \"b-lines:\" b-lines\n      \"b-maxwidth:\" b-maxwidth)\n    result))\n\n;;\n;; # Utility Functions\n;;\n\n(defn in-hang\n  \"Add :in-hang? true to the options map.\"\n  [options]\n  (if (:in-hang? options)\n    options\n    (if (:do-in-hang? options)\n      (assoc options :in-hang? (or (:depth options) true))\n      options)))\n\n(defn contains-nil?\n  \"Scan a collection, and return true if it contains any nils or empty\n  collections.\"\n  [coll]\n  (some #(if (coll? %) (empty? %) (nil? %)) coll))\n\n#_(defn concat-no-nil-alt\n    \"Concatentate multiple sequences, but if any of them are nil, return nil.\n  This version is 15-20% slower than the version below. Keeping it around\n  just for illustrative purposes.\"\n    [& rest]\n    (loop [coll rest\n           out (transient [])]\n      (let [c (first coll)]\n        (if-not c\n          (persistent! out)\n          (when (or (and (coll? c) (not (empty? c))) (not (nil? c)))\n            (recur (next coll) (conj! out c)))))))\n\n(defn concat-no-nil-pre-noseq\n  \"Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil.\"\n  [& rest]\n  (let [result (reduce (fn [v o]\n                         (if (coll? o)\n                           (if (empty? o) (reduced nil) (reduce conj! v o))\n                           (if (nil? o) (reduced nil) (conj! v o))))\n                 (transient [])\n                 rest)]\n    (when result (persistent! result))))\n\n(declare count-right-blanks)\n(declare trimr-blanks)\n\n(defn concat-no-nil\n  \"Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil. If any of them are :noseq, just skip them.\n  When complete, check the last element-- if it is a :right, and if it\n  the previous element is a :newline or :indent, then ensure that the\n  number of spaces in that previous element matches the number to the\n  right of the :right.\"\n  [& rest]\n  (let [result (reduce (fn [v o]\n                         (if (coll? o)\n                           (if (empty? o) (reduced nil) (reduce conj! v o))\n                           (if (= :noseq o)\n                             ; if the supposed sequence is :noseq, skip it\n                             v\n                             (if (nil? o) (reduced nil) (conj! v o)))))\n                 (transient [])\n                 rest)]\n    (when result\n      (let [result (persistent! result)]\n        (if (< (count result) 2)\n          result\n          (let [[_ _ what right-ind :as last-element] (peek result)]\n            (if (= what :right)\n              ; we have a right paren, bracket, brace as the last thing\n              (let [previous-index (- (count result) 2)\n                    [s color previous-what] (nth result previous-index)]\n                (if (or (= previous-what :newline) (= previous-what :indent))\n                  ; we have a newline or equivalent before the last thing\n                  (if (= (count-right-blanks s) right-ind)\n                    ; we already have the right number of blanks!\n                    result\n                    (let [new-previous [(str (trimr-blanks s)\n                                             (blanks right-ind)) color\n                                        previous-what]]\n                      (assoc result previous-index new-previous)))\n                  result))\n              result)))))))\n\n\n(defn concat-no-nil-pre-right\n  \"Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil. If any of them are :noseq, just skip them.\"\n  [& rest]\n  (let [result (reduce (fn [v o]\n                         (if (coll? o)\n                           (if (empty? o) (reduced nil) (reduce conj! v o))\n                           (if (= :noseq o)\n                             ; if the supposed sequence is :noseq, skip it\n                             v\n                             (if (nil? o) (reduced nil) (conj! v o)))))\n                 (transient [])\n                 rest)]\n    (when result (persistent! result))))\n\n(defn remove-one\n  \"Remove a single thing from a sequence.\"\n  [s index]\n  (concat (take index s) (drop (inc index) s)))\n\n(defn force-vector\n  \"Ensure that whatever we have is a vector.\"\n  [coll]\n  (if (vector? coll) coll (into [] coll)))\n\n(defn keyword-fn?\n  \"Takes a string, and returns the fn-style if it is a keyword and\n  without the : it can be found in the fn-map.\"\n  [options s]\n  (let [[left right] (clojure.string/split s #\"^:\")]\n    (when right ((:fn-map options) right))))\n\n(defn get-max-length\n  \"Given the options map, return the max length.  This might be\n  a constant number, but it might be based on the depth as well.\n  Returns nil of there is no max-length set.\"\n  [{:as options, :keys [max-length depth]}]\n  (when max-length\n    (if (vector? max-length)\n      (nth max-length (min (dec depth) (dec (count max-length))))\n      max-length)))\n\n(defn no-max-length\n  \"Given an options map, return another options map with no\n  :max-length key.  This is to that you can call a routine that\n  normally deals with :max-length and get it to do the normal\n  thing.\"\n  [options]\n  (assoc options :max-length 10000))\n\n;;\n;; # Work with style-vecs and analyze results\n;;\n\n;; Transients don't help here, though they don't hurt much either.\n\n(defn accumulate-ll\n  \"Take the vector carrying the intermediate results, and\n  do the right thing with a new string. Vector is\n  [ 0 out - vector accumulating line lengths \n    1 cur-len - length of current line\n    just-eol? - did we just do an eol?\n    ]\n  s - string to add to current line\n  tag - element type of string (comment's don't count in length)\n  eol? - should we terminate line after adding count of s\"\n  [count-comment? [out cur-len just-eol? just-comment? :as in] s tag eol?]\n  (let [comment? (or (= tag :comment) (= tag :comment-inline))\n        count-s (if (and comment? (not count-comment?)) 0 (count s))]\n    (cond\n      ; if we are told to terminate the line or it\n      ; is a comment, we terminate the line with the\n      ; size of the string added to it\n      (or (and eol? (not (and just-eol? (zero? count-s)))) comment?)\n        [(conj out (+ cur-len count-s)) 0 true comment?]\n      ;(assoc in 0 (conj out (+ cur-len count-s)) 1 0 2 true 3 comment?)\n      ; no reason to terminate the line, just accumulate\n      ; the size in cur-len\n      :else [out (+ cur-len count-s) nil comment?])))\n\n(defn generate-ll\n  [count-comment? [out cur-len just-eol? just-comment? :as in]\n   [s _ tag :as element]]\n  (let [[l r] (if (or (= tag :whitespace) (= tag :indent) (= tag :newline))\n                (split-lf-2 s)\n                (list s))\n        ; if tag = :comment, shouldn't have \\n and\n        ; therefore shouldn't have r\n        ; if r is non-nil, then we had a newline, so we want to\n        ; terminate the current line\n        ; if we are already in a comment and we have something\n        ; that is not whitespace, then we want to terminate the\n        ; current line\n        in (accumulate-ll count-comment? in l tag (not (nil? r)))\n        in (if (empty? r) in (accumulate-ll count-comment? in r tag nil))]\n    in))\n\n\n(defn line-lengths-iter\n  \"Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments elsewhere.\n  Note that only vectors with :whitespace, :indent, or :newline are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character. A single comment is counted as two lines. Lots of edge\n  conditions that are really quite important.\"\n  [options ind style-vec]\n  (let [count-comment? (:count? (:comment options))\n        ind (if (coll? ind) (first ind) ind)]\n    (dbg-pr options \"line-lengths-iter: style-vec:\" style-vec)\n    (loop [next-vec style-vec\n           current-string nil\n           line-length ind\n           previous-comment? nil\n           out []]\n      (if (or (and (empty? next-vec) (empty? current-string)))\n        ; A trailing newline isn't counted.\n        (cond (and (zero? line-length) (not previous-comment?)) out\n              previous-comment? (conj out line-length 0)\n              :else (conj out line-length))\n        (let [advance? (empty? current-string)\n              [next-string _ tag] (when advance? (first next-vec))\n              comment? (or (= tag :comment) (= tag :comment-inline))\n              s (if advance? next-string current-string)\n              [l r] (when s\n                      ; if we have a current-string, then we are looking for\n                      ; newlines\n                      (cond (and comment? (not count-comment?)) [\"\"]\n                            (or (and advance?\n                                     (or (= tag :whitespace)\n                                         (= tag :newline)\n                                         (= tag :indent)))\n                                current-string)\n                              (split-lf-2 s)\n                            :else [s]))\n              ; If r non-nil, we had a newline at end of l.\n              ; If we had a previous-comment, then we want to\n              ; imply a newline unless we have a newline at the\n              ; start of s.\n              ; If r is non-nil, and l is empty, then the newline\n              ; was at the front of r, in which case we don't need to\n              ; do an implied newline for the comment (if any).\n              ; Choices:\n              ;  leave l and r alone\n              ;  l becomes nil and r is (str l r)\n              force-newline? (and previous-comment? (not (empty? l)))\n              #_(prn \"l:\" l\n                     \"r:\" r\n                     \"force-newline?\" force-newline?\n                     \"comment?\" comment?)\n              r (if force-newline? (str l r) r)\n              l (if force-newline? nil l)\n              new-line-length (+ line-length (count l))]\n          #_(prn \"current-string:\" current-string\n                 \"line-length:\" line-length\n                 \"advance?\" advance?\n                 \"s:\" s\n                 \"l:\" l\n                 \"r:\" r\n                 \"new-line-length:\" new-line-length)\n          (recur (if advance? (next next-vec) next-vec)\n                 r\n                 (if r 0 new-line-length)\n                 comment?\n                 (if r (conj out new-line-length) out)))))))\n\n(defn line-lengths\n  \"Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments at the\n  end. Note that only vectors with :whitespace or :indent are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character.\"\n  [options ind style-vec]\n  (let [length-vec (first ; this final accumulate-ll is to terminate the last\n                          ; line, the one in progress\n                     (let [count-comment? (:count? (:comment options))\n                           [_ _ just-eol? just-comment? :as result]\n                             (reduce (partial generate-ll count-comment?)\n                               [[] (if (coll? ind) (first ind) ind) nil nil]\n                               style-vec)]\n                       (if (and just-eol? (not just-comment?))\n                         result\n                         (accumulate-ll count-comment?\n                                        (assoc result 2 nil)\n                                        \"\"\n                                        nil\n                                        true))))]\n    (dbg-pr options\n            \"line-lengths: style-vec:\" style-vec\n            \"ind:\" ind\n            \"length-vec:\" length-vec)\n    length-vec))\n\n(defn single-line?\n  \"This looks at a style vec and doesn't do all that style-lines does.\n  It just looks for a new-line in the strings, and returns true if it\n  doesn't find one.\"\n  [style-vec]\n  #_(prn \"style-vec:\" style-vec)\n  (not (reduce #(or %1 %2)\n         false\n         (map #(clojure.string/includes? (first %) \"\\n\") style-vec))))\n\n(defn find-what\n  \"Given a style-vec, come up with a string that gives some hint of \n  where this style-vec came from.\"\n  [style-vec]\n  (loop [s-vec style-vec]\n    (when s-vec\n      (let [[what _ this] (first s-vec)]\n        (if (= this :element) what (recur (next s-vec)))))))\n\n(defn first-nl?\n  \"Look at a style vec ready to be given to concat-no-nil, and see if\n  the first thing in there is a newline of some sort.\"\n  [style-vec]\n  (let [[s color what] (first style-vec)]\n    (or (= what :newline) (= what :indent))))\n\n(defn prepend-nl\n  \"Given an indent ind and a style-vec coll, place a newline (actually an\n  indent) at the front of coll.  If the first thing in coll is a newline,\n  then don't add any spaces after the newline that we prepend.\"\n  [options ind coll]\n  (concat-no-nil [[(str \"\\n\" (blanks (if (first-nl? coll) 0 ind))) :none :indent\n                   1]]\n                 coll))\n\n; Debugging help to find differences between line-lengths and\n; line-lengths-iter.  Surprisingly helpful!\n#_(defonce lldiff (atom []))\n\n(defn style-lines\n  \"Take a style output, and tell us how many lines it takes to print it\n  and the maximum width that it reaches. Returns \n  [<line-count> <max-width> [line-lengths]].\n  Doesn't require any max-width inside the style-vec. Also returns the\n  line lengths in case that is helpful (since we have them anyway).\n  If (:dbg-ge options) has value, then uses find-what to see if what it\n  finds matches the value, and if it does, place the value in the\n  resulting vector.\"\n  [options ind style-vec]\n  (when (and style-vec (not (empty? style-vec)) (not (contains-nil? style-vec)))\n    (let [;lengths (line-lengths options ind style-vec)\n          lengths (line-lengths-iter options ind style-vec)\n          count-lengths (count lengths)\n          result [count-lengths (if (zero? count-lengths) 0 (apply max lengths))\n                  lengths]\n          dbg-ge (:dbg-ge options)\n          what (when (and dbg-ge (= (find-what style-vec) dbg-ge)) dbg-ge)]\n      #_(when (not= lengths lengths-iter) (swap! lldiff conj style-vec))\n      (if what (conj result what) result))))\n\n(defn fzfit\n  \"Given output from style-lines and options, see if it fits the width.  \n  Return the number of lines it takes if it fits, nil otherwise.\"\n  [{:keys [width rightcnt dbg?], :as options}\n   [line-count max-width :as style-lines-return]]\n  (dbg options\n       \"fzfit: fixed-rightcnt:\" (fix-rightcnt rightcnt)\n       \"line-count:\" line-count\n       \"max-width:\" max-width\n       \"width:\" width)\n  (when style-lines-return\n    (if (<= max-width (- width (fix-rightcnt rightcnt))) line-count nil)))\n\n(defn fzfit-one-line\n  \"Given the return from style-lines  and options, \n  return true if it fits on a single line.\"\n  [options style-lines-return]\n  (let [lines (fzfit options style-lines-return)]\n    (and (number? lines) (= lines 1))))\n\n;;\n;; # Handle Rightmost Size\n;;\n\n(defn rightmost\n  \"Increase the rightmost count, if any, and return one if not.\"\n  [options]\n  (assoc options :rightcnt (inc (:rightcnt options 0))))\n\n(defn not-rightmost\n  \"Remove the rightmost count.\"\n  [options]\n  (dissoc options :rightcnt))\n\n(defn c-r-pair\n  \"Handle the complexity of commas and rightmost-pair with options.\n  If it isn't a rightmost, it loses rightmost status.\n  If it is a rightmost, and in the rightmost pair, it gain one rightmost\n  since it has the right end thing (and we don't care about the comma).\n  If it is the rightmost of the non-rightmost-pair, then the comma\n  matters, and we handle that appropriately.  Whew!\"\n  [commas? rightmost-pair? rightmost? options]\n  (if-not rightmost?\n    (not-rightmost options)\n    (if rightmost-pair?\n      options\n      (if commas?\n        (rightmost (not-rightmost options))\n        (not-rightmost options)))))\n\n(defn fix-rightcnt\n  \"Handle issue with rightcnt.\"\n  [rightcnt]\n  (if (number? rightcnt) rightcnt 0))\n\n;;\n;; # First pass at color -- turn string or type into keyword color\n;;\n\n;;\n;; ## Translate from a string to a keyword as needed.\n;;\n\n(def str->key\n  {\"(\" :paren,\n   \")\" :paren,\n   \"[\" :bracket,\n   \"]\" :bracket,\n   \"{\" :brace,\n   \"}\" :brace,\n   \"#{\" :hash-brace,\n   \"#(\" :hash-paren,\n   \"#_\" :uneval,\n   \"'\" :quote,\n   \"`\" :syntax-quote,\n   \"~\" :unquote,\n   \"~@\" :unquote-splicing,\n   \"@\" :deref})\n\n\n(defn zcolor-map\n  \"Look up the thing in the zprint-color-map.  Accepts keywords or\n  strings.\"\n  [{:keys [color-map color?], :as options} key-or-str]\n  ; If we aren't doing color, don't even bother to do the lookup\n  (if color?\n    (color-map (if (keyword? key-or-str) key-or-str (str->key key-or-str)))\n    :none))\n\n\n;;\n;; ## Pretty Printer Code\n;;\n\n(declare fzprint*)\n(declare fzprint-flow-seq)\n\n(defn hangflow\n  \"Take a style-vec, and if hangflow? is true, return a\n  vector [hang-or-flow style-vec], else return style-vec.\n  But a nil style-vec returns nil.\"\n  [hangflow? hang-or-flow style-vec]\n  (when style-vec (if hangflow? [hang-or-flow style-vec] style-vec)))\n\n(defn fzprint-hang-unless-fail\n  \"Try to hang something and if it doesn't hang at all, then flow it,\n  but strongly prefer hang.  Has hang and flow indents, and fzfn is the\n  fzprint-? function to use with zloc.  Callers need to know whether this\n  was hang or flow, so it returns [{:hang | :flow} style-vec] all the time.\"\n  [options hindent findent fzfn zloc]\n  (dbg options\n       \"fzprint-hang-unless-fail: hindent:\" hindent\n       \"findent:\" findent\n       \"zloc:\" (zstring (zfirst zloc)))\n  ; If the hindent is different than the findent, we'll try hang, otherwise\n  ; we will just do the flow\n  (let [hanging (when (not= hindent findent)\n                  (fzfn (in-hang options) hindent zloc))]\n    (dbg-form\n      options\n      \"fzprint-hang-unless-fail: exit:\"\n      (if (and hanging (fzfit options (style-lines options hindent hanging)))\n        [:hang hanging]\n        ; hang didn't work, do flow\n        (do (dbg options \"fzprint-hang-unless-fail: hang failed, doing flow\")\n            [:flow\n             (prepend-nl options findent (fzfn options findent zloc))])))))\n\n(defn replace-color\n  \"Given a style-vec with exactly one thing in it, replace the color\n  with whatever local color we have determined is correct.\"\n  [local-color style-vec]\n  (if (= (count style-vec) 1)\n    (let [[[string color element]] style-vec] [[string local-color element]])\n    style-vec))\n\n(declare fzprint-binding-vec)\n(declare middle-element?)\n\n(defn use-hang?\n  \"This routine tries to figure out if existing hang should be used without\n  even bothering to do a flow and compare them with good-enough?.\"\n  [caller\n   {:keys [depth width],\n    {:keys [hang-accept ha-depth-factor ha-width-factor]} caller,\n    :as options} ind hang-count hanging-line-count]\n  (when (and hanging-line-count hang-accept (pos? hang-count))\n    #_(prn \"use-hang? caller:\" caller \"(/ ind width):\" (double (/ ind width)))\n    (let [hang-accept (+ hang-accept\n                         (* depth ha-depth-factor)\n                         (* (/ ind width) ha-width-factor))\n          result (<= (/ (dec hanging-line-count) hang-count) hang-accept)]\n      #_(prn \"use-hang? result:\" result)\n      result)))\n\n;;\n;; Performance Debugging\n;;\n\n#_(def pass-count (atom 0))\n#_(defn reset-pass-count! [] (reset! pass-count 0))\n#_(defn inc-pass-count [] (swap! pass-count inc))\n#_(defn print-pass-count [] (println \"pass-count:\" @pass-count))\n\n(defn fzprint-two-up\n  \"Print a single pair of things (though it might not be exactly a\n  pair, given comments and :extend and the like), like bindings in\n  a let, clauses in a cond, keys and values in a map.  Controlled\n  by various maps, the key of which is caller.  Returns \n  [:hang <style-vec>] or [:flow <style-vec>] so that the upstream folks\n  know whether this was a hang or flow and can do the right thing\n  based on that.\"\n  [caller\n   {:keys [one-line? dbg? dbg-indent in-hang? do-in-hang? map-depth],\n    {:keys [hang? dbg-local? dbg-cnt? indent indent-arg flow? key-color\n            key-depth-color key-value-color key-value-options justify]}\n      caller,\n    :as options} ind commas? justify-width justify-options rightmost-pair?\n   [lloc rloc xloc :as pair]]\n  (if dbg-cnt? (println \"two-up: caller:\" caller \"hang?\" hang? \"dbg?\" dbg?))\n  (dbg-s options\n         :justify\n         \"fzprint-two-up:\" (zstring lloc)\n         \"justify-width:\" justify-width)\n  (if (or dbg? dbg-local?)\n    (println\n      (or dbg-indent \"\")\n      \"==========================\"\n      (str \"\\n\" (or dbg-indent \"\"))\n      (pr-str \"fzprint-two-up:\" (zstring lloc)\n              \"tag:\" (ztag lloc)\n              \"caller:\" caller\n              \"count:\" (count pair)\n              \"ind:\" ind\n              \"indent:\" indent\n              \"indent-arg:\" indent-arg\n              \"justify-width:\" justify-width\n              \"one-line?:\" one-line?\n              \"hang?:\" hang?\n              \"in-hang?\" in-hang?\n              \"do-in-hang?\" do-in-hang?\n              \"flow?\" flow?\n              \"commas?\" commas?\n              \"rightmost-pair?\" rightmost-pair?)))\n  (let [local-hang? (or one-line? hang?)\n        indent (or indent indent-arg)\n        ; We get options and justify-options.  Generally we want to use\n        ; the justify-options, unless we are not justifying, in which\n        ; case we want to use the regular options.  We can't tell if\n        ; we are justifying until after we figure the arg-1-width,\n        ; so we will use the justify-options for everything and\n        ; calculate one set of r-non-justify-options for use with\n        ; good-enough if we didn't justify.  This allows us to put\n        ; weird stuff in :justify-hang to change things other then\n        ; :hang-expand when we are justifying.\n        non-justify-options options\n        options justify-options\n        local-options\n          (if (not local-hang?) (assoc options :one-line? true) options)\n        loptions (c-r-pair commas? rightmost-pair? nil options)\n        roptions (c-r-pair commas? rightmost-pair? :rightmost options)\n        ; These are only really important for good-enough\n        non-justify-roptions\n          (c-r-pair commas? rightmost-pair? :rightmost non-justify-options)\n        local-roptions\n          (c-r-pair commas? rightmost-pair? :rightmost local-options)\n        ; If we have a key-value-color map, and the key we have matches any\n        ; of the keys in the map, then merge the resulting color-map elements\n        ; into the current color-map.  Could be problematic if lloc is a\n        ; modifier, but at present modifiers are only for extend and\n        ; key-value-color is only for maps, so they can't both show up\n        ; at once.\n        value-color-map (and key-value-color\n                             (key-value-color (get-sexpr options lloc)))\n        local-roptions (if value-color-map\n                         (merge-deep local-roptions\n                                     {:color-map value-color-map})\n                         local-roptions)\n        roptions (if value-color-map\n                   (merge-deep roptions {:color-map value-color-map})\n                   roptions)\n        ; If we have a key-value-options map, and the key we have matches\n        ; any of the keys in the map, then merge the resulting options map\n        ; into the current options for the value.\n        value-options-map (and key-value-options\n                               (key-value-options (get-sexpr options lloc)))\n        local-roptions (if value-options-map\n                         (merge-deep local-roptions value-options-map)\n                         local-roptions)\n        roptions (if value-options-map\n                   (merge-deep roptions value-options-map)\n                   roptions)\n        ; It is possible that lloc is a modifier, and if we have exactly\n        ; three things, we will pull rloc in with it, and move xloc to rloc.\n        ; If it is just two, we'll leave it to be handled normally.\n        ; Which might need to be re-thought due to justification, but since\n        ; we are really only talking :extend here, maybe not.\n        modifier-set (:modifiers (options caller))\n        modifier? (or (and modifier-set\n                           (modifier-set (zstring lloc))\n                           (> (count pair) 2))\n                      (middle-element? options rloc))\n        ; Figure out if we want to color keys based on their depth, and if so,\n        ; figure out the color for this one.\n        local-color (get key-depth-color (dec map-depth))\n        ; Doesn't work if we have a modifier, but at this point, key-color\n        ; is only for maps and modifiers are only for extend.\n        local-color\n          (if key-color (key-color (get-sexpr options lloc)) local-color)\n        #_local-color\n        #_(cond (and map-depth (= caller :map) (= map-depth 2)) :green\n                (and map-depth (= caller :map) (= map-depth 1)) :blue\n                (and map-depth (= caller :map) (= map-depth 3)) :yellow\n                (and map-depth (= caller :map) (= map-depth 4)) :red\n                :else nil)\n        arg-1 (fzprint* loptions ind lloc)\n        no-justify (:no-justify justify)\n        ; If we have a newline, make it one shorter since we did a newline\n        ; after the previous pair.  Unless this is the first pair, but we\n        ; should have done one before that pair too, maybe?\n        arg-1-newline? (and (= (count pair) 1) (znewline? lloc))\n        #_#_arg-1\n          (if arg-1-newline? (first (remove-last-newline [arg-1])) arg-1)\n        arg-1 (if local-color (replace-color local-color arg-1) arg-1)\n        ; If we are going to print the second thing on the line, we need\n        ; to know how big the first thing is, so we can see if the second\n        ; thing fits on the line.\n        [arg-1-line-count arg-1-max-width :as arg-1-lines]\n          (style-lines options ind arg-1)\n        ; If arg-1 already takes multiple lines, we aren't going to do\n        ; anything interesting with a modifier.\n        _ (dbg options\n               \"fzprint-two-up before modifier: arg-1-line-count:\"\n                 arg-1-line-count\n               \"arg-1-max-width:\" arg-1-max-width)\n        modifier? (if (or (and arg-1-line-count (> arg-1-line-count 1))\n                          arg-1-newline?)\n                    nil\n                    modifier?)\n        ; See if we can merge the first and second things and have them\n        ; stay on the same line?\n        combined-arg-1 (if modifier?\n                         (concat-no-nil arg-1\n                                        [[(str \" \") :none :whitespace 1]]\n                                        (fzprint* (in-hang loptions)\n                                                  (+ ind arg-1-max-width)\n                                                  rloc))\n                         arg-1)\n        ; If they fit, then they are the new arg-1\n        arg-1 (if combined-arg-1 combined-arg-1 arg-1)\n        ; If they fit, then we are still doing modifier if we are already\n        modifier? (if combined-arg-1 modifier? nil)\n        ; If they fit, we need to recalculate the size of arg-1\n        [arg-1-line-count arg-1-max-width :as arg-1-lines]\n          (if combined-arg-1 (style-lines options ind arg-1) arg-1-lines)\n        _ (dbg options\n               \"fzprint-two-up after modifier: arg-1-line-count:\"\n                 arg-1-line-count\n               \"arg-1-max-width:\" arg-1-max-width)\n        lloc (if modifier? rloc lloc)\n        rloc (if modifier? xloc rloc)\n        ;     arg-1-fit-oneline? (and (not force-nl?)\n        ;                             (fzfit-one-line loptions arg-1-lines))\n        arg-1-fit-oneline? (and (not flow?)\n                                (fzfit-one-line loptions arg-1-lines))\n        arg-1-fit? (or arg-1-fit-oneline?\n                       (when (not one-line?) (fzfit loptions arg-1-lines)))\n        ; sometimes arg-1-max-width is nil because fzprint* returned nil,\n        ; but we need to have something for later code to use as a number\n        arg-1-width (- (or arg-1-max-width 0) ind)]\n    ; If we don't *have* an arg-1, no point in continuing...\n    ;  If arg-1 doesn't fit, maybe that's just how it is!\n    ;  If we are in-hang, then we can bail, but otherwise, not.\n    (dbg-pr options \"fzprint-two-up: arg-1:\" arg-1)\n    (when (and arg-1 (or arg-1-fit? (not in-hang?)))\n      (cond\n        arg-1-newline? [:flow arg-1]\n        (= (count pair) 1) [:hang (fzprint* roptions ind lloc)]\n        (or (= (count pair) 2) (and modifier? (= (count pair) 3)))\n          ;concat-no-nil\n          ;  arg-1\n          ; We used to think:\n          ; We will always do hanging, either fully or with one-line? true,\n          ; we will then do flow if hanging didn't do anything or if it did,\n          ; we will try to see if flow is better.\n          ;\n          ; But now, we don't do hang if arg-1-fit-oneline? is false, since\n          ; we won't use it.\n          (let [justify-width (when justify-width\n                                (if (or (> arg-1-width justify-width)\n                                        (when no-justify\n                                          (no-justify (ffirst arg-1))))\n                                  nil\n                                  justify-width))\n                hanging-width (if justify-width justify-width arg-1-width)\n                ; These next two -n things are to keep the cljs compiler\n                ; happy, since it complains that - need numbers and these\n                ; might not be numbers if they are used below, despite the\n                ; if justify-width.  Sigh.\n                justify-width-n (or justify-width 0)\n                arg-1-width-n (or arg-1-width 0)\n                hanging-spaces\n                  (if justify-width (inc (- justify-width-n arg-1-width-n)) 1)\n                #_(if justify-width (inc (- justify-width arg-1-width)) 1)\n                hanging-indent (+ 1 hanging-width ind)\n                flow-indent (+ indent ind)]\n            (if (and (zstring lloc)\n                     (keyword-fn? options (zstring lloc))\n                     (not (= caller :map)))\n              ; We could also check for (= caller :pair-fn) here,\n              ; or at least check to see that it isn't a map.\n              (if (zvector? rloc)\n                ; This is an embedded :let or :when-let or something.\n                ; We check to see if a keyword is found in the :fn-map\n                ; (without the :, of course) and if it is and there\n                ; is a vector after it, we assume that it must be one of these.\n                (let [[hang-or-flow style-vec] (fzprint-hang-unless-fail\n                                                 loptions\n                                                 hanging-indent\n                                                 flow-indent\n                                                 fzprint-binding-vec\n                                                 rloc)\n                      arg-1 (if (= hang-or-flow :hang)\n                              (concat-no-nil arg-1\n                                             [[(blanks hanging-spaces) :none\n                                               :whitespace 2]])\n                              arg-1)]\n                  [hang-or-flow (concat-no-nil arg-1 style-vec)])\n                (let [[hang-or-flow style-vec] (fzprint-hang-unless-fail\n                                                 loptions\n                                                 hanging-indent\n                                                 flow-indent\n                                                 fzprint*\n                                                 rloc)\n                      arg-1 (if (= hang-or-flow :hang)\n                              (concat-no-nil arg-1\n                                             [[(blanks hanging-spaces) :none\n                                               :whitespace 2]])\n                              arg-1)]\n                  [hang-or-flow (concat-no-nil arg-1 style-vec)]))\n              ; Make the above if a cond, and call fzprint-hang-one?  Or\n              ; maybe fzprint* if we are calling fzprint-hang-unless-fail,\n              ; which I think we are.\n              ;\n              ; This is a normal two element pair thing\n              (let [; Perhaps someday we could figure out if we are already\n                    ; completely in flow to this point, and be smarter about\n                    ; possibly dealing with the hang or flow now.  But for\n                    ; now, we will simply do hang even if arg-1 didn't fit\n                    ; on one line if the flow indent isn't better than the\n                    ; hang indent.\n                    _ (dbg options\n                           \"fzprint-two-up: before hang.  hanging tried?\"\n                           (or arg-1-fit-oneline?\n                               (and (not flow?)\n                                    (>= flow-indent hanging-indent))))\n                    hanging (when (or arg-1-fit-oneline?\n                                      (and (not flow?)\n                                           (>= flow-indent hanging-indent)))\n                              (fzprint* (if (< flow-indent hanging-indent)\n                                          (in-hang local-roptions)\n                                          local-roptions)\n                                        hanging-indent\n                                        rloc))\n                    hang-count (zcount rloc)\n                    _ (log-lines options\n                                 \"fzprint-two-up: hanging:\"\n                                 hanging-indent\n                                 hanging)\n                    hanging-lines (style-lines options hanging-indent hanging)\n                    fit? (fzfit-one-line local-roptions hanging-lines)\n                    hanging-lines (if fit?\n                                    hanging-lines\n                                    (when (and (not one-line?) hang?)\n                                      hanging-lines))\n                    hanging-line-count (first hanging-lines)\n                    ; Don't flow if it fit, or it didn't fit and we were doing\n                    ; one line on input.  Do flow if we don't have\n                    ; hanging-lines and we were not one-line on input.\n                    _ (dbg options\n                           \"fzprint-two-up: fit?\" fit?\n                           \"hanging-lines:\" hanging-lines)\n                    _ (log-lines options\n                                 \"fzprint-two-up: hanging-2:\"\n                                 hanging-indent\n                                 hanging)\n                    flow-it?\n                      (or (not hanging-lines)\n                          ; TODO: figure out what this was supposed to\n                          ; be and fix it, w/out (not hanging-lines)\n                          (and (or (and (not hanging-lines) (not one-line?))\n                                   (not (or fit? one-line?)))\n                               ; this is for situations where the first\n                               ; element is short and so the hanging indent\n                               ; is the same as the flow indent, so there\n                               ; is no point in flow -- unless we don't have\n                               ; any hanging-lines, in which case we better\n                               ; do flow\n                               (or (< flow-indent hanging-indent)\n                                   (not hanging-lines))))\n                    #_(prn \"depth:\" (:depth options)\n                           \"justify-width:\" justify-width\n                           \"flow-it?\" flow-it?\n                           \"arg-1\" arg-1)\n                    flow-it? (if (use-hang? caller\n                                            options\n                                            ind\n                                            hang-count\n                                            hanging-line-count)\n                               false\n                               flow-it?)\n                    #_(inc-pass-count)\n                    _ (dbg options\n                           \"fzprint-two-up: before flow. flow-it?\"\n                           flow-it?)\n                    flow (when flow-it? (fzprint* roptions flow-indent rloc))\n                    _ (log-lines options\n                                 \"fzprint-two-up: flow:\"\n                                 (+ indent ind)\n                                 flow)\n                    flow-lines (style-lines options (+ indent ind) flow)]\n                (when dbg-local?\n                  (prn \"fzprint-two-up: local-hang:\" local-hang?)\n                  (prn \"fzprint-two-up: one-line?:\" one-line?)\n                  (prn \"fzprint-two-up: hanging-indent:\" hanging-indent)\n                  (prn \"fzprint-two-up: hanging-lines:\" hanging-lines)\n                  (prn \"fzprint-two-up: flow?:\" flow?)\n                  (prn \"fzprint-two-up: flow-it?:\" flow-it?)\n                  (prn \"fzprint-two-up: fit?:\" fit?)\n                  (prn \"fzprint-two-up: flow-indent:\" flow-indent)\n                  (prn \"fzprint-two-up: hanging:\" (zstring lloc) hanging)\n                  (prn \"fzprint-two-up: (+ indent ind):\" (+ indent ind))\n                  (prn \"fzprint-two-up: flow:\" (zstring lloc) flow))\n                (dbg options \"fzprint-two-up: before good-enough\")\n                (dbg-s options\n                       :justify\n                       \"fzprint-two-up:\" (zstring lloc)\n                       \"justify-width:\" justify-width\n                       \"fit?\" fit?)\n                (if fit?\n                  [:hang\n                   (concat-no-nil arg-1\n                                  [[(blanks hanging-spaces) :none :whitespace\n                                    3]]\n                                  hanging)]\n                  (when (or hanging-lines flow-lines)\n                    (if (good-enough?\n                          caller\n                          (if justify-width roptions non-justify-roptions)\n                          :none-two-up\n                          hang-count\n                          (- hanging-indent flow-indent)\n                          hanging-lines\n                          flow-lines)\n                      (do #_(prn \" good-enough:\" true)\n                          [:hang\n                           (concat-no-nil arg-1\n                                          [[(blanks hanging-spaces) :none\n                                            :whitespace 4]]\n                                          hanging)])\n                      (do\n                        #_(prn \" good-enough:\" false\n                               \"justify-width:\" justify-width)\n                        ; If we are justifying and good enough liked the flow\n                        ; better than the hang, then let's not do justifying._\n                        (if justify-width\n                          (do (dbg-s options\n                                     :justify\n                                     \"fzprint-two-up:\"\n                                     (zstring lloc)\n                                     \"justify-width:\"\n                                     justify-width\n                                     \"cancelled justification, returning nil!\")\n                              nil)\n                          [:flow\n                           (concat-no-nil arg-1\n                                          (prepend-nl options\n                                                      (+ indent ind)\n                                                      flow))]))))))))\n        :else [:flow ; The following always flows things of 3 or more\n               ; (absent modifers).  If the lloc is a single char,\n               ; then that can look kind of poor.  But that case\n               ; is rare enough that it probably isn't worth dealing\n               ; with.  Possibly a hang-remaining call might fix it.\n               (concat-no-nil\n                 arg-1\n                 (fzprint-flow-seq options\n                                   (+ indent ind)\n                                   (if modifier? (nnext pair) (next pair))\n                                   :force-nl\n                                   :newline-first))]))))\n\n;;\n;; # Two-up printing\n;;\n\n(defn fzprint-justify-width\n  \"Figure the width for a justification of a set of pairs in coll.  \n  Also, decide if it makes any sense to justify the pairs at all.\"\n  [caller {{:keys [justify? justify]} caller, :as options} ind coll]\n  (let [ignore-for-variance (:ignore-for-variance justify)\n        no-justify (:no-justify justify)\n        justify-underscore? (let [underscore?\n                                    (get justify :underscore? :not-found)]\n                              (if (= underscore? :not-found) true underscore?))\n        firsts (remove nil?\n                 (map #(when (> (count %) 1)\n                         (fzprint* (not-rightmost options) ind (first %)))\n                   coll))\n        #_(def just firsts)\n        ; If we aren't supposed to justify something at all, remove it\n        ; from the variance calculation here.\n        firsts (if no-justify (remove #(no-justify (ffirst %)) firsts) firsts)\n        ; Is there anything that we should ignore for the variance calculation\n        ; but still justify?  This is largely for :else, which, when it\n        ; appears, it typically the last thing in a cond.  It seems fruitless\n        ; to not justify a cond because a short :else drives the variance\n        ; too high, since it is rarely hard to line up the :else with\n        ; its value, no matter how far apart they are.\n        firsts (if ignore-for-variance\n                 (remove #(ignore-for-variance (ffirst %)) firsts)\n                 firsts)\n        style-seq (mapv (partial style-lines options ind) firsts)\n        #_(println \"style-seq:\" ((:dzprint options) {} style-seq))\n        #_(def styleseq style-seq)\n        each-one-line? (reduce #(when %1 (= (first %2) 1)) true style-seq)\n        #_(def eol each-one-line?)\n        max-variance (:max-variance justify)\n        alignment (when each-one-line?\n                    (column-width-variance max-variance\n                                           [(vec (map #(- (second %) ind)\n                                                   style-seq))]\n                                           0))\n        _ (dbg-s options\n                 :justify\n                 \"fzprint-justify-width max-variance:\" max-variance\n                 \"ind:\" ind\n                 \"ignore-for-variance:\" ignore-for-variance\n                 \"no-justify\" no-justify\n                 \"alignment:\" alignment)\n        #_(prn \"what:\"\n               (ffirst firsts)\n               (first (last firsts))\n               \"alignment:\" alignment\n               \"ind:\" ind)\n        justify-width (when each-one-line? (first alignment))]\n    justify-width))\n\n(defn fit-within?\n  \"Take a size and a collection of vectors with two or more elements\n  per vector.  The elements are zlocs, the vectors are not.  Return\n  the remaining character count or nil if it for sure doesn't fit.\n  In order to be sure it doesn't fit, this version doesn't assume\n  *any* separators, so it really underestimates the size.\"\n  ([size coll depth]\n   (reduce (fn [size element]\n             (or (if (= depth 0)\n                   (fit-within? size element (inc depth))\n                   (let [remaining (- size (count (zstring element)))]\n                     (when (pos? remaining) remaining)))\n                 (reduced nil)))\n     size\n     coll))\n  ([size coll] (fit-within? size coll 0)))\n\n(defn remove-hangflow\n  \"Convert a hangflow style-vec to a regular style-vec.\"\n  [hf-style-vec]\n  (when hf-style-vec (map second hf-style-vec)))\n\n(defn pair-lengths\n  \"When given the output from fzprint-map-two-up, calculate return the\n  output from style-lines for each thing.\"\n  [options ind result]\n  (mapv (comp (partial style-lines options ind) second) result))\n\n(defn fzprint-map-two-up\n  \"Accept a sequence of pairs, and map fzprint-two-up across those pairs.\n  If you have :one-line? set, this will return nil if it is way over,\n  but it can't accurately tell exactly what will fit on one line, since\n  it doesn't know the separators and such.  So, :one-line? true is a\n  performance optimization, so it doesn't do a whole huge map just to\n  find out that it could not possibly have fit on one line.  So, this\n  returns a sequence of style-vecs, where the indentation for the\n  stuff inside of the pairs is already there, but the separators of\n  the style-vecs (including indentation and commas) is done by the\n  caller of fzprint-map-two-up. Always returns a sequence of vector pairs:\n  [[:hang <style-vec-for-one-pair>] [:flow <style-vec-for-one-pair>] ...].\n  If you want a style vec instead, call remove-hangflow on the return \n  from fzprint-map-two-up.  This will use one-line?, but not check to see\n  that it actually fits.  If you care about that, then you should check the\n  return yourself.  It will, however, make an estimate of whether or not\n  it will fit and if it clearly doesn't, it will return a nil.\"\n  [caller\n   {{:keys [justify? force-nl?]} caller,\n    :keys [width rightcnt one-line? parallel?],\n    :as options} ind commas? coll]\n  (let [caller-map (caller options)\n        len (count coll)\n        justify-width (when (and justify? (not one-line?))\n                        (fzprint-justify-width caller options ind coll))\n        caller-options (when justify-width (options caller))]\n    (dbg-print options\n               \"fzprint-map-two-up: one-line?\" (:one-line? options)\n               \"justify?:\" justify?)\n    ; If it is one-line? and force-nl? and there is more than one thing,\n    ; this can't work.\n    #_(prn \"justify-width:\" justify-width)\n    (when (not (and one-line? force-nl? (> len 1)))\n      #_(def jo [])\n      (loop [justify-width justify-width\n             justify-options\n               (if justify-width\n                 (-> options\n                     (merge-deep {caller (caller-options :justify-hang)})\n                     (merge-deep {:tuning (caller-options :justify-tuning)}))\n                 options)]\n        #_(def jo (conj jo [justify-width justify-options]))\n        (let [beginning-coll (butlast coll)\n              ; If beginning-coll is () because there is only a single pair\n              ; in coll, then this all works -- but only because\n              ; () is truthy, and zpmap returns () which is also truthy.\n              ; I hate relying on the truthy-ness of (), but in this case\n              ; it works out and it would be even more complicated to do\n              ; it another way.\n              beginning-remaining\n                (if one-line? (fit-within? (- width ind) beginning-coll) true)\n              _ (dbg options\n                     \"fzprint-map-two-up: remaining:\" (- width ind)\n                     \"beginning-remaining:\" beginning-remaining)\n              beginning (when beginning-remaining\n                          (zpmap options\n                                 (partial fzprint-two-up\n                                          caller\n                                          options\n                                          ind\n                                          commas?\n                                          justify-width\n                                          justify-options\n                                          nil)\n                                 beginning-coll))\n              ; this line will fix the justify, but not necessarily\n              ; the rest of the problems with hangflow output -- like\n              ; the style-lines below.\n              beginning (if (contains-nil? beginning) nil beginning)\n              end-coll [(last coll)]\n              ; If this is one-line? is there any point to even looking\n              ; at the end?\n              end-remaining (if one-line?\n                              (and beginning\n                                   (fit-within? (- beginning-remaining\n                                                   (or rightcnt 0))\n                                                end-coll))\n                              true)\n              _ (dbg options\n                     \"fzprint-map-two-up: beginning-remaining:\"\n                       beginning-remaining\n                     \"rightcnt:\" rightcnt\n                     \"end-remaining:\" end-remaining)\n              end (when end-remaining\n                    (when-let [end-result (fzprint-two-up caller\n                                                          options\n                                                          ind\n                                                          commas?\n                                                          justify-width\n                                                          justify-options\n                                                          :rightmost-pair\n                                                          (first end-coll))]\n                      [end-result]))\n              result (cond (= len 1) end\n                           :else (concat-no-nil beginning end))]\n          (dbg-pr options\n                  \"fzprint-map-two-up: len:\" len\n                  \"(nil? end):\" (nil? end)\n                  \"end:\" end\n                  \"(nil? beginning):\" (nil? beginning)\n                  \"beginning:\" beginning\n                  \"(count end):\" (count end)\n                  \"(count beginnging):\" (count beginning)\n                  \"justify-width:\" justify-width\n                  \"result:\" result)\n          ; if we got a result or we didn't but it wasn't because we\n          ; were trying to justify things\n          (if (or result (not justify-width))\n            (do #_(let [pair-lens (pair-lengths options ind result)]\n                    (println \"result:\"\n                             ((:dzprint options) {} result)\n                             ((:dzprint options) {} pair-lens)\n                             \"median:\" (median (mapv first pair-lens))\n                             \"mean:\" (int (mean (mapv first pair-lens)))\n                             \"percent-gt-n:\"\n                               (percent-gt-n 3 (mapv first pair-lens))))\n                result)\n            ; try again, without justify-width\n            (do #_(println \"recur!!\" ((:dzprint options) {} (take 6 beginning)))\n                (recur nil options))))))))\n\n;;\n;; ## Support sorting of map keys\n;;\n\n(defn compare-keys\n  \"Do a key comparison that works well for numbers as well as\n  strings.\"\n  [x y]\n  (cond (and (number? x) (number? y)) (compare x y)\n        :else (compare (str x) (str y))))\n\n(defn compare-ordered-keys\n  \"Do a key comparison that places ordered keys first.\"\n  [key-value zdotdotdot x y]\n  (cond (and (key-value x) (key-value y)) (compare (key-value x) (key-value y))\n        (key-value x) -1\n        (key-value y) +1\n        (= zdotdotdot x) +1\n        (= zdotdotdot y) -1\n        :else (compare-keys x y)))\n\n(defn order-out\n  \"A variety of sorting and ordering options for the output of\n  partition-all-2-nc.  It can sort, which is the default, but if\n  the caller has a key-order vector, it will extract any keys in\n  that vector and place them first (in order) before sorting the\n  other keys.  If sorting is not called for, does nothing.\"\n  [caller\n   {{:keys [sort? sort-in-code? key-order key-value]} caller,\n    :keys [in-code?],\n    :as options} access out]\n  (dbg-pr options\n          \"order-out caller:\" caller\n          \"key-order:\" key-order\n          \"sort?\" sort?\n          \"sort-in-code?\" sort-in-code?\n          \"in-code?\" in-code?\n          \"key-value:\" key-value)\n  (if (and sort? (if in-code? sort-in-code? true))\n    (sort #((partial compare-ordered-keys (or key-value {}) (zdotdotdot))\n              (get-sexpr options (access %1))\n              (get-sexpr options (access %2)))\n          out)\n    out))\n\n(defn pair-element?\n  \"This checks to see if an element should be considered part of a\n  pair if it comes between other elements, and a single element on\n  its own if it would otherwise be the first part of a pair.  Mostly\n  this will trigger on comments, but a #_(...) element will also\n  trigger this, as will a newline if one appears.\"\n  [zloc]\n  (or (zcomment? zloc) (zuneval? zloc) (znewline? zloc)))\n\n(defn nosort?\n  \"Check a zloc to see if this should trigger no-sort? for this set\n   of pairs.\"\n  [no-sort-set zloc]\n  (when no-sort-set\n    (and (= (ztag zloc) :token)\n         (let [s (zstring zloc)]\n           (or (no-sort-set s)\n               (let [regex-seq (filter (comp not string?) no-sort-set)]\n                 (when (not (empty? regex-seq))\n                   (some #(re-find % s) regex-seq))))))))\n\n\n(defn middle-element?\n  \"This checks to see if an element should be considered the middle element\n  of a pair.  At some point, we can expand this, but for now there is only\n  one middle element.\"\n  [{:keys [in-code?], :as options} zloc]\n  ;  nil)\n  (when (= in-code? \"condp\") (= (zstring zloc) \":>>\")))\n\n;;\n;; # Ignore keys in maps\n;;\n\n(defn remove-key-seq\n  \"If given a non-collection, simply does a dissoc of the key, but\n  if given a sequence of keys, will remove the final one.\"\n  [m ks]\n  (if (coll? ks)\n    (let [this-key (first ks)\n          next-key (next ks)]\n      (if next-key\n        (let [removed-map (remove-key-seq (get m this-key) (next ks))]\n          (if (empty? removed-map)\n            (dissoc m this-key)\n            (assoc m this-key removed-map)))\n        (dissoc m this-key)))\n    (dissoc m ks)))\n\n(defn ignore-key-seq-silent\n  \"Given a map and a key sequence, remove that key sequence if\n  it appears in the map, and terminate the reduce if it changes\n  the map.\"\n  [m ks]\n  (if (coll? ks)\n    (if (= (get-in m ks :zprint-not-found) :zprint-not-found)\n      m\n      (remove-key-seq m ks))\n    (if (= (get m ks :zprint-not-found) :zprint-not-found) m (dissoc m ks))))\n\n(defn ignore-key-seq\n  \"Given a map and a key sequence, remove that key sequence if\n  it appears in the map leaving behind a key :zprint-ignored, \n  and terminate the reduce if it changes the map.\"\n  [m ks]\n  (if (coll? ks)\n    (if (= (get-in m ks :zprint-not-found) :zprint-not-found)\n      m\n      (assoc-in m ks :zprint-ignored))\n    (if (= (get m ks :zprint-not-found) :zprint-not-found)\n      m\n      (assoc m ks :zprint-ignored))))\n\n(defn map-ignore\n  \"Take a map and remove any of the key sequences specified from it.\n  Note that this only works for sexpressions, not for actual zippers.\"\n  [caller {{:keys [key-ignore key-ignore-silent]} caller, :as options} zloc]\n  (let [ignored-silent (if key-ignore-silent\n                         (reduce ignore-key-seq-silent zloc key-ignore-silent)\n                         zloc)\n        ignored (if key-ignore\n                  (reduce ignore-key-seq ignored-silent key-ignore)\n                  ignored-silent)]\n    ignored))\n\n;;\n;; # Pre-processing for two-up printing\n;;\n\n(defn partition-all-2-nc\n  \"Input is (zseqnws zloc) or (zseqnws-w-nl) where one assumes that\n  these are pairs.  Thus, a seq of zlocs.  Output is a sequence of\n  seqs, where the seqs are usually pairs, but might be single things.\n  Doesn't pair up comments or #_(...) unevaled sexpressions.  The\n  ones before the first part of a pair come as a single element in\n  what would usually be a pair, and the ones between the first and\n  second parts of a pair come inside the pair.  There may be an\n  arbitrary number of elements between the first and second elements\n  of the pair (one per line).  If there are any comments or unevaled\n  sexpressions, don't sort the keys, as we might lose track of where\n  the comments or unevaled s-expressions go.\"\n  [caller options coll]\n  (when-not (empty? coll)\n    (let [max-length (get-max-length options)\n          no-sort-set (:key-no-sort (caller options))]\n      (loop [remaining coll\n             no-sort? nil\n             index 0\n             out (transient [])]\n        (dbg-pr options\n                \"partition-all-2-nc: index:\" index\n                \"no-sort?:\" no-sort?\n                ;  \"out:\" (map (comp zstring first)(persistent! out))\n                \"first remaining:\" (zstring (first remaining))\n                \"second remaining:\" (zstring (second remaining)))\n        (if-not remaining\n          [no-sort? (persistent! out)]\n          (let [[new-remaining pair-vec new-no-sort?]\n                  (cond\n                    (pair-element? (first remaining)) [(next remaining)\n                                                       [(first remaining)] true]\n                    (or (pair-element? (second remaining))\n                        (middle-element? options (second remaining)))\n                      (let [[comment-seq rest-seq]\n                              ;(split-with pair-element? (next remaining))\n                              (split-with #(or (pair-element? %)\n                                               (middle-element? options %))\n                                          (next remaining))]\n                        (if (first rest-seq)\n                          ; We have more to than just a comment, so we can\n                          ; pair it up between two things.\n                          [(next rest-seq)\n                           (into []\n                                 (concat [(first remaining)]\n                                         comment-seq\n                                         [(first rest-seq)])) true]\n                          ; This is the end, don't pair a comment up\n                          ; with something on the left if there isn't\n                          ; something on the right of it.\n                          [(next remaining) [(first remaining)] true]))\n                    (= (count remaining) 1) [(next remaining)\n                                             [(first remaining)] nil]\n                    :else [(next (next remaining))\n                           [(first remaining) (second remaining)] nil])\n                new-no-sort? (or new-no-sort?\n                                 (nosort? no-sort-set (first remaining)))]\n            #_(println \"partition-all-2-nc: count new-remaining:\"\n                       (count new-remaining))\n            (dbg-pr options\n                    \"partition-all-2-nc: pair-vec: first:\" (zstring (first\n                                                                      pair-vec))\n                    \"first tag:\" (ztag (first pair-vec))\n                    \"count:\" (count pair-vec)\n                    \"last:\" (zstring (last pair-vec)))\n            (recur (cond (< (inc index) max-length) new-remaining\n                         (and (= (inc index) max-length) new-remaining)\n                           (list (zdotdotdot))\n                         :else nil)\n                   (or no-sort? new-no-sort?)\n                   (inc index)\n                   (conj! out pair-vec))))))))\n\n;;\n;; ## Multi-up printing pre-processing\n;;\n\n(defn cleave-end\n  \"Take a seq, and if it is contains a single symbol, simply return\n  it in another seq.  If it contains something else, remove any non\n  collections off of the end and return them in their own double seqs,\n  as well as return the remainder (the beginning) as a double seq.\"\n  [coll]\n  (if (or (zsymbol? (first coll)) (zreader-cond-w-symbol? (first coll)))\n    ;(symbol? (first coll))\n    (list coll)\n    (let [rev-seq (reverse coll)\n          [split-non-coll _]\n            ;(split-with (comp not zcoll?) rev-seq)\n            (split-with #(not (or (zcoll? %) (zreader-cond-w-coll? %)))\n                        rev-seq)\n          #_(def sncce split-non-coll)\n          split-non-coll (map list (reverse split-non-coll))\n          remainder (take (- (count coll) (count split-non-coll)) coll)]\n      (if (empty? remainder)\n        split-non-coll\n        (concat (list remainder) split-non-coll)))))\n\n(defn partition-all-sym\n  \"Similar to partition-all-2-nc, but instead of trying to pair things\n  up (modulo comments and unevaled expressions), this begins things\n  with a symbol, and then accumulates collections until the next symbol.\n  Returns a seq of seqs, where the first thing in each internal seq is\n  a protocol and the remaining thing(s) in that seq are the expressions that\n  follow.  If there is a single thing, it is returned in its own internal\n  seq. ((P (foo [this a) (bar-me [this] b) (barx [this y] (+ c y))) ...)\n  Made harder by the fact that the symbol might be inside of a #?() reader\n  conditional.  It handles comments before symbols on the symbol indent, \n  and the comments before the collections on the collection indent.  \n  Since it doesn't know how many collections there are, this is not trivial.  \n  Must be called with a sequence of z-things (these days called a zseq)\"\n  [options modifier-set coll]\n  #_(prn \"partition-all-sym:\")\n  (dbg-pr options \"partition-all-sym:\" modifier-set)\n  #_(def scoll coll)\n  (dbg options \"partition-all-sym: coll:\" (map zstring coll))\n  (let [part-sym (partition-by\n                   #(or (zsymbol? %) (znil? %) (zreader-cond-w-symbol? %))\n                   coll)\n        split-non-coll (mapcat cleave-end part-sym)]\n    #_(def ps part-sym)\n    #_(def snc split-non-coll)\n    (loop [remaining split-non-coll\n           out (transient [])]\n      #_(prn \"remaining:\" (zprint.repl/pseqzseq remaining))\n      #_(prn \"out:\" (zprint.repl/pseqzseq out))\n      (if (empty? remaining)\n        (let [result (persistent! out)]\n          #_(def pasn result)\n          result)\n        (let [[next-remaining new-out]\n                (cond\n                  (and (or (zsymbol? (ffirst remaining))\n                           (znil? (ffirst remaining))\n                           (zreader-cond-w-symbol? (ffirst remaining)))\n                       (not (empty? (second remaining)))\n                       ; This keeps a comment after a symbol with no\n                       ; collections from being associated with the previous\n                       ; symbol instead of standing on its own (as it should)\n                       (or (not\n                             (or (= (ztag (first (second remaining))) :comment)\n                                 (= (ztag (first (second remaining)))\n                                    :newline)))\n                           (zcoll? (last (second remaining)))))\n                    ; We have a non-collection in (first remaining) and\n                    ; we might have more than one, either because we just\n                    ; have a bunch of non-colls with no colls\n                    ; or because we have a modifier and then one or more\n                    ; non-colls (possibly with their own modifiers).\n                    (if (= (count (first remaining)) 1)\n                      ; original\n                      (do #_(prn \"a:\")\n                          ; We have a single non-coll, pull the next seq\n                          ; of one or more seqs into a seq with it.\n                          ; This is where we marry up the non-coll with\n                          ; all of its associated colls.\n                          [(nthnext remaining 2)\n                           (conj! out\n                                  (concat (first remaining)\n                                          (second remaining)))])\n                      (do #_(prn \"b:\")\n                          (if (and modifier-set\n                                   (modifier-set (zstring (ffirst remaining))))\n                            (if (= (count (first remaining)) 2)\n                              ; We have exactly two things in\n                              ; (first remaining), and the first one is\n                              ; both a non-coll and a modifier, so we know\n                              ; that the second one is a non-coll, and we\n                              ; know that we have a (second remaining) from\n                              ; above, so we bring the second remaining\n                              ; into the first remaining like we did\n                              ; above\n                              (do #_(prn \"d:\")\n                                  [(nthnext remaining 2)\n                                   (conj! out\n                                          (concat (first remaining)\n                                                  (second remaining)))])\n                              ; We have a modifier as the first thing in a\n                              ; seq of non-colls and then some more non-colls\n                              ; after that (since we don't have exactly two,\n                              ; as that case was caught above).\n                              ; Pull the next one into a seq with it.\n                              ; Do we need to check that the next one is\n                              ; also a non-coll?  That shouldn't be\n                              ; necessary,as you won't get colls in\n                              ;with non-colls.\n                              (do #_(prn \"c:\")\n                                  [(if (next (next (first remaining)))\n                                     (cons (next (next (first remaining)))\n                                           (next remaining))\n                                     (next remaining))\n                                   (conj! out\n                                          (list (ffirst remaining)\n                                                (second (first remaining))))]))\n                            ; we have more than one non-coll in first\n                            ; remaining, so pull one out, and leave the\n                            ; next ones for the next loop\n                            [(cons (next (first remaining)) (next remaining))\n                             (conj! out (list (ffirst remaining)))])))\n                  :else [(next remaining) (conj! out (first remaining))])]\n          (recur next-remaining new-out))))))\n\n(defn rstr-vec\n  \"Create an r-str-vec with the indent appropriate for the r-str if\n  it is preceded by a newline.\"\n  ([options ind zloc r-str r-type]\n   [[r-str (zcolor-map options (or r-type r-str)) (or r-type :right) ind]])\n  ([options ind zloc r-str] (rstr-vec options ind zloc r-str nil)))\n\n(declare interpose-nl-hf)\n(declare fzprint-get-zloc-seq)\n\n(defn fzprint-binding-vec\n  [{{:keys [nl-separator?]} :binding, :as options} ind zloc]\n  (dbg options \"fzprint-binding-vec: ind:\" ind \"zloc:\" (zstring (zfirst zloc)))\n  (let [options (rightmost options)\n        l-str \"[\"\n        r-str \"]\"\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options ind zloc r-str)]\n    (dbg-form options\n              \"fzprint-binding-vec exit:\"\n              (if (= (zcount zloc) 0)\n                (concat-no-nil l-str-vec r-str-vec)\n                (concat-no-nil\n                  l-str-vec\n                  (interpose-nl-hf\n                    (:binding options)\n                    (inc ind)\n                    (fzprint-map-two-up\n                      :binding\n                      options\n                      (inc ind)\n                      false\n                      (second (partition-all-2-nc\n                                :binding\n                                options\n                                ; This is controlled by the :vector config\n                                ; options, because if we added it to the\n                                ; :binding option, it would not work because\n                                ; the fzprint-list* one line testing doesn't\n                                ; know it is a binding vector, it thinks\n                                ; that it is just a vector.  Alternatively\n                                ; we could probably notice that we were in\n                                ; a :binding fn-type, and force :vector\n                                ; :respect-nl? to be the same as :binding\n                                ; :respect-nl? for the one-line test.  Which\n                                ; would fail if there were some other vector\n                                ; with newlines in it that wasn't the\n                                ; binding vector.  Ultimately this is because\n                                ; :respect-nl? (and :respect-bl?) are only\n                                ; defined for vectors, maps, lists and sets,\n                                ; and that is implemented by changing what\n                                ; gets returned as a zloc-seq.\n                                (fzprint-get-zloc-seq :vector options zloc)))))\n                  r-str-vec)))))\n\n(defn fzprint-hang\n  \"Try to hang something and try to flow it, and then see which is\n  better.  Has hang and flow indents. fzfn is the function to use \n  to do zloc.  Note what fzfn does with the input. Presumably the\n  caller knows what the fzfn does, so it has to count the items\n  itself and pass it in here as zloc-count if it isn't just (zcount zloc).\"\n  [{:keys [one-line? force-eol-blanks?], :as options} caller hindent findent\n   fzfn zloc-count zloc]\n  (dbg options \"fzprint-hang: caller:\" caller)\n  (let [hanging (when (and (not= hindent findent)\n                           ((options caller) :hang?)\n                           ; If it starts with a newline, we aren't hanging\n                           ; it.  Comment, sure, but not newline.\n                           (not (znewline? (first zloc))))\n                  (concat-no-nil [[(str \" \") :none :whitespace 5]]\n                                 (fzfn (in-hang options) hindent zloc)))\n        #_(prn \"fzprint-hang: first hanging:\" (first hanging) (second hanging))\n        _ (dbg options\n               \"fzprint-hang: caller:\" caller\n               \"hang?\" ((options caller) :hang?))\n        hanging (when (not= (nth (second hanging) 2) :comment-inline) hanging)\n        hang-count (or zloc-count (zcount zloc))\n        hr-lines (style-lines options (dec hindent) hanging)\n        ;flow (fzfn options findent zloc)\n       ]\n    (if (or (fzfit-one-line options hr-lines) one-line?)\n      hanging\n      (let [flow (let [result (fzfn options findent zloc)]\n                   (concat-no-nil\n                     ; This will create an end-of-line blanks situation so\n                     ; we can test our ability to see it.  If we weren't\n                     ; intentionally creating end-of-line blanks, we would\n                     ; use prepend-nl here.\n                     (if (if force-eol-blanks? nil (first-nl? result))\n                       [[(str \"\\n\") :none :indent 42]]\n                       [[(str \"\\n\" (blanks findent)) :none :indent 4]])\n                     result))\n            _ (log-lines options \"fzprint-hang: flow:\" findent flow)\n            fd-lines (style-lines options findent flow)\n            _ (dbg-pr options\n                      \"fzprint-hang: ending: hang-count:\" hang-count\n                      \"hanging:\" hanging\n                      \"flow:\" flow)\n            hr-good? (when hanging\n                       (good-enough? caller\n                                     options\n                                     :none-hang\n                                     hang-count\n                                     (- hindent findent)\n                                     hr-lines\n                                     fd-lines))]\n        (if hr-good? hanging flow)))))\n\n(defn fzprint-pairs\n  \"Always prints pairs on a different line from other pairs. Takes a zloc-seq.\n  Defaults to caller as :pair, but will accept :binding as an alternative.\"\n  ([{{:keys [nl-separator? respect-nl?]} :pair, :as options} ind zloc-seq\n    caller]\n   (dbg-pr options\n           \"fzprint-pairs:\" (zstring (first zloc-seq))\n           \"rightcnt:\" (:rightcnt options))\n   (dbg-form\n     options\n     \"fzprint-pairs: exit:\"\n     (interpose-nl-hf\n       (caller options)\n       ind\n       (fzprint-map-two-up\n         caller\n         options\n         ind\n         false\n         (let [[_ part] (partition-all-2-nc caller options zloc-seq)]\n           #_(def fp part)\n           (dbg-pr options\n                   \"fzprint-pairs: partition:\" (map (comp zstring first) part)\n                   \"respect-nl?\" respect-nl?)\n           part)))))\n  ([options ind zloc-seq] (fzprint-pairs options ind zloc-seq :pair)))\n\n(defn check-for-coll?\n  \"Return true if the first non-newline element in the seq is a coll?\"\n  [zloc-seq]\n  #_(prn \"check-for-coll? begin sequence\")\n  (loop [coll zloc-seq]\n    (if-not coll\n      nil\n      (let [zloc (first coll)]\n        #_(prn \"check-for-coll? zloc:\" (ztag zloc))\n        (cond (znewline? zloc) (recur (next coll))\n              (zcoll? zloc) true\n              (zsymbol? zloc) nil\n              (znil? zloc) nil\n              ; if we don't know what it is, should we skip it?\n              :else (recur (next coll)))))))\n\n(defn check-for-first-coll?\n  \"Check a series of sequences to see if the first non-newine thing in any \n  of them\n  is a zcoll?.  If it is, return true, else nil.\"\n  [seq-series]\n  (some check-for-coll? seq-series))\n\n(declare fzprint-hang-remaining)\n\n(defn fzprint-extend\n  \"Print things with a symbol and collections following.  Kind of like with\n  pairs, but not quite. Takes a zloc-seq.\"\n  [{{:keys [nl-separator?]} :extend, :as options} ind zloc-seq]\n  #_(def fezloc zloc-seq)\n  (dbg options \"fzprint-extend:\" (zstring (first zloc-seq)))\n  (let [part\n          (partition-all-sym options (:modifiers (:extend options)) zloc-seq)]\n    #_(def fe part)\n    (dbg options \"fzprint-extend: partition:\" (map #(map zstring %) part))\n    ; Look for any sequences in part which have zcoll? as their first\n    ; element.  If we find any, we don't do the map-two-up, but rather\n    ; fzprint-hang-remaining.\n    (if (check-for-first-coll? part)\n      ; The input does *not* look like an extend, so we won't try to\n      ; format it like one.\n      (dbg-form\n        options\n        \"fzprint-extend: fzprint-hang-remaining exit:\"\n        (let [result (fzprint-hang-remaining :extend\n                                             (assoc options :fn-style :fn)\n                                             ind\n                                             ind\n                                             zloc-seq\n                                             nil)]\n          ; If it starts with a newline, remove it, since we will be doing\n          ; a prepend-nl for the results of fzprint-extend whenever we use it.\n          (if (and (or (= (nth (first result) 2) :indent)\n                       (= (nth (first result) 2) :newline))\n                   (clojure.string/starts-with? (ffirst result) \"\\n\"))\n            (next result)\n            result)))\n      (dbg-form\n        options\n        \"fzprint-extend: exit:\"\n        (interpose-nl-hf (:extend options)\n                         ind\n                         (fzprint-map-two-up :extend\n                                             (assoc options :fn-style :fn)\n                                             ind\n                                             false\n                                             part))))))\n\n(defn concatv!\n  \"Given a transient vector v, concatenate all of the other\n  elements in all of the remaining collections onto v.\"\n  [v & rest]\n  (loop [cols rest\n         out v]\n    (if cols\n      (recur (next cols)\n             (loop [col (first cols)\n                    out out]\n               (if col (recur (next col) (conj! out (first col))) out)))\n      out)))\n\n(defn fzprint-one-line\n  \"Do a fzprint-seq like thing, but do it incrementally and\n  if it gets too big, return nil.\"\n  [options ind zloc-seq]\n  (dbg-print options \"fzprint-one-line:\")\n  (let [seq-right zloc-seq\n        len (count seq-right)\n        last-index (dec len)\n        gt-1? (> (count seq-right) 1)\n        options (assoc options :one-line? true)]\n    (loop [zloc-seq seq-right\n           new-ind (long ind)\n           index 0\n           out (transient [])]\n      (if (empty? zloc-seq)\n        (do (dbg options \"fzprint-one-line: exiting count:\" (count out))\n            (persistent! out))\n        (let [next-zloc (first zloc-seq)\n              [sep next-options]\n                (cond ; this needs to come first in case there\n                      ; is only one element in the list -- it needs to have\n                      ; the rightcnt passed through\n                  (= index last-index) [(if-not (zero? index)\n                                          [[\" \" :none :whitespace 6]]) options]\n                  (= index 0) [nil (not-rightmost options)]\n                  :else [[[\" \" :none :whitespace 7]] (not-rightmost options)])\n              next-out (fzprint* next-options new-ind next-zloc)\n              _ (log-lines options \"fzprint-one-line:\" new-ind next-out)\n              [line-count max-width :as next-lines]\n                (style-lines options new-ind next-out)]\n          (if-not (fzfit-one-line next-options next-lines)\n            (do (dbg options\n                     \"fzprint-one-line: failed, too wide or too many lines!\")\n                nil)\n            (recur (next zloc-seq)\n                   (inc (long max-width))\n                   (inc index)\n                   (concatv! out sep next-out))))))))\n\n(defn fzprint-seq\n  \"Take a seq of a zloc, created by (zmap identity zloc).  Return\n  a seq of the fzprint* of each element.  No spacing between any\n  of these elements. Note that this is not a style-vec, but a seq\n  of style-vecs of each of the elements.  These would need to be\n  concatenated together to become a style-vec.  ind is either a\n  constant or a seq of indents, one for each element in zloc-seq.\n  Note that right gets evaluated immediately, while left yields a\n  lazy sequence which get evaluated later.\"\n  [options ind zloc-seq]\n  (let [max-length (get-max-length options)\n        len (count zloc-seq)\n        zloc-seq (if (> len max-length)\n                   (concat (take max-length zloc-seq) (list (zdotdotdot)))\n                   zloc-seq)\n        len (count zloc-seq)]\n    (dbg options\n         \"fzprint-seq: (count zloc-seq):\" len\n         \"max-length:\" max-length\n         \"ind:\" ind)\n    (cond\n      (empty? zloc-seq) nil\n      (zero? max-length) [[[\"#?#\" (zcolor-map options :keyword) :element]]]\n      :else (let [left (zpmap options\n                              #(fzprint* (not-rightmost options) %1 %2)\n                              (if (coll? ind) ind (repeat ind))\n                              (butlast zloc-seq))\n                  right [(fzprint* options\n                                   (if (coll? ind) (last ind) ind)\n                                   (last zloc-seq))]]\n              (cond (= len 1) right\n                    :else (concat-no-nil left right))))))\n\n(declare precede-w-nl)\n\n(defn fzprint-flow-seq\n  \"Takes zloc-seq, a seq of a zloc, created by (zmap identity zloc),\n  and returns a style-vec of the result.  Either it fits on one\n  line, or it is rendered on multiple lines.  You can force multiple\n  lines with force-nl?. If the seq is empty, returns :noseq, which\n  is what you give concat-no-nil if you want this to just disappear.\n  If you want it to do less than everything in the original zloc,\n  modify the result of (zmap identity zloc) to just contain what\n  you want to print. ind is either a single indent, or a seq of\n  indents, one for each element in zloc-seq.  Don't concatenate an\n  indent/newline on to the beginning of the output from this routine.\n  Let this routine do it for you, as it needs to know one is there\n  in order to properly deal with any newlines in the actual stream.\n  Else you will get two where you only should have one.\"\n  ([options ind zloc-seq force-nl? nl-first?]\n   (dbg-pr options\n           \"fzprint-flow-seq: count zloc-seq:\" (count zloc-seq)\n           \"nl-first?\" nl-first?\n           \"zloc-seq:\" (map zstring zloc-seq))\n   (let [coll-print (fzprint-seq options ind zloc-seq)\n         ; If we are force-nl?, then don't bother trying one-line\n         one-line (apply concat-no-nil\n                    (interpose [[\" \" :none :whitespace 8]] coll-print))\n         _ (log-lines options \"fzprint-flow-seq:\" ind one-line)\n         one-line-lines (style-lines options ind one-line)]\n     (dbg-pr options \"fzprint-flow-seq: coll-print:\" coll-print)\n     (dbg-form options\n               \"fzprint-flow-seq: exit:\"\n               (if (and (not force-nl?) (fzfit-one-line options one-line-lines))\n                 one-line\n                 (if (not (empty? coll-print))\n                   (apply concat-no-nil\n                     (precede-w-nl options ind coll-print (not nl-first?)))\n                   :noseq)))))\n  ([options ind zloc-seq] (fzprint-flow-seq options ind zloc-seq nil nil))\n  ([options ind zloc-seq force-nl?]\n   (fzprint-flow-seq options ind zloc-seq force-nl? nil)))\n\n(defn fzprint-hang-one\n  \"Try out the given zloc, and if it fits on the current line, just\n  do that. It might fit on the same line, as this may not be the rest\n  of the list that we are printing. If not, check it out with good-enough?\n  and do the best you can.  Three choices, really: fits on same line, \n  does ok as hanging, or better with flow. hindent is hang-indent, and \n  findent is flow-indent, and each contains the initial separator.  \n  Might be nice if the fn-style actually got sent to this fn.\"\n  [caller {:keys [one-line? width], {:keys [hang-avoid]} caller, :as options}\n   hindent findent zloc]\n  (dbg-pr options\n          \"fzprint-hang-one:\" (zstring zloc)\n          \" hindent:\" hindent\n          \"findent:\" findent)\n  (when (:dbg-hang options)\n    (println (dots (:pdepth options))\n             \"h1 caller:\"\n             caller\n             (zstring (if (zcoll? zloc) (zfirst zloc) zloc))))\n  (let [local-options (if (and (not one-line?) (not (:hang? (caller options))))\n                        (assoc options :one-line? true)\n                        options)\n        ; If we don't have an hindent, we better not be trying to hang\n        ; things -- in this case, we'll just flow.\n        hindent (or hindent findent)\n        hang-count (zcount zloc)\n        ; This implements :hang-avoid for fzprint-hang-one, instead of just\n        ; for fzprint-hang-remaining.  It didn't change the tests, but\n        ; removed some silly formatting when using :arg2 and small widths.\n        hanging (when (and (not= hindent findent)\n                           (or (not hang-avoid)\n                               (< hang-count (* (- width hindent) hang-avoid))))\n                  (fzprint* (in-hang local-options) hindent zloc))\n        hanging (concat-no-nil [[\" \" :none :whitespace 9]] hanging)\n        _ (log-lines options \"fzprint-hang-one: hanging:\" (dec hindent) hanging)\n        hr-lines (style-lines options (dec hindent) hanging)]\n    _\n    (dbg options\n         \"fzprint-hang-one: hr-lines:\" hr-lines\n         \"hang-count:\" hang-count)\n    ; if hanging is nil and one-line? is true, then we didn't fit\n    ; and should exit\n    ;\n    ; if hanging is nil and one-line? is nil, and hang? nil,\n    ; then we we don't hang and this didn't fit on the same\n    ; line and we should contine\n    ;\n    ; if hanging is true, then if one-line? is true and fzfit-one-line\n    ; is true, then we just go with hanging\n    ;\n    ; if hanging is true and if fzfit-one-line is true, then we go\n    ; with hanging.  Which is probably the same as just above.\n    ;\n    ; if hanging is true and if one-line? is nil, and if hang? is\n    ; nil, and fzfit-one-line is true then it fit on one line and we\n    ; should go with hanging.\n    ;\n    ;\n    ; Summary:\n    ;\n    ; go with hanging if:\n    ;\n    ;  o fzfit-one-line true\n    ;  o one-line? true\n    ;\n    ; Otherwise, see about flow too\n    ;\n    (if (or (fzfit-one-line options hr-lines) one-line?)\n      hanging\n      (let [flow (prepend-nl options findent (fzprint* options findent zloc))\n            _ (log-lines options \"fzprint-hang-one: flow:\" findent flow)\n            fd-lines (style-lines options findent flow)\n            _ (dbg options \"fzprint-hang-one: fd-lines:\" fd-lines)\n            _ (dbg options\n                   \"fzprint-hang-one: ending: hang-count:\" hang-count\n                   \"hanging:\" (pr-str hanging)\n                   \"flow:\" (pr-str flow))\n            hr-good? (and (:hang? (caller options))\n                          ; no point in calling good-enough if no hr-lines\n                          hr-lines\n                          (good-enough? caller\n                                        options\n                                        :none-hang-one\n                                        hang-count\n                                        (- hindent findent)\n                                        hr-lines\n                                        fd-lines))]\n        (if hr-good? hanging flow)))))\n\n;;\n;; # Constant pair support\n;;\n\n(declare zcomment-or-newline?)\n\n; This, you might think, would be faster.  But in reality it is almost\n; exactly the same as the version that reverses the list.\n; And even a bit more complex to understand, so we'll leave it\n; here for additional possible optimizations and simplifications later.\n\n#_(defn count-constant-pairs-new\n    \"Given a seq of zlocs, work backwards from the end, and see how\n  many elements are pairs of constants (using zconstant?).  So that\n  (... :a (stuff) :b (bother)) returns 4, since both :a and :b are\n  zconstant? true. This is made more difficult by having to skip\n  comments along the way as part of the pair check, but keep track\n  of the ones we skip so the count is right in the end.  We don't\n  expect any spaces in this but newlines must be handled, because \n  this seq should have been produced by zmap or its equivalent.\n  Returns two things: [paired-item-count actual-paired-items],\n  where paired-item-count is the number of things from the end of\n  the seq you have to trim off to get the constant pairs included,\n  and the actual-paired-items is the count of the items to be checked\n  against the constant-pair-min (which is exclusive of comments and\n  newlines).  \"\n    [zloc-seq]\n    (let [zloc-seq (if (vector? zloc-seq) zloc-seq (into [] zloc-seq))\n          len (count zloc-seq)\n          last-element-idx (dec len)]\n      ; If we don't have at least two elements, we aren't doing anything useful\n      (if (not (pos? last-element-idx))\n        [0 0]\n        (loop [idx last-element-idx\n               element-count 0\n               paired-element-count 0\n               ; since it is reversed, we need a constant every second element\n               constant-required? nil\n               pair-size 0\n               actual-pair-size 0]\n          (let [element (nth zloc-seq idx)]\n            #_(prn \"count-constant-pairs: element-count:\" element-count\n                   \"paired-element-count:\" paired-element-count\n                   \"constant-required:\" constant-required?\n                   \"pair-size:\" pair-size\n                   \"actual-pair-size:\" actual-pair-size\n                   \"element:\" (zstring element))\n            (let [comment-or-newline? (zcomment-or-newline? element)]\n              (if (and (not comment-or-newline?)\n                       constant-required?\n                       (not (zconstant? element)))\n                ; we counted the right-hand and any comments of this pair, but\n                ; it isn't a pair so exit now with whatever we have so far\n                [(- element-count pair-size)\n                 (- paired-element-count actual-pair-size)]\n                (let [element-count (inc element-count)\n                      paired-element-count (if comment-or-newline?\n                                             paired-element-count\n                                             (inc paired-element-count))\n                      pair-size (if (and constant-required?\n                                         (not comment-or-newline?))\n                                  ; must be a constant, so start count over\n                                  0\n                                  (inc pair-size))\n                      actual-pair-size (if (and constant-required?\n                                                (not comment-or-newline?))\n                                         ; start count of actual pairs over as\n                                         ; well\n                                         0\n                                         (if comment-or-newline?\n                                           ; we are only counting actual pairs\n                                           ; here\n                                           actual-pair-size\n                                           (inc actual-pair-size)))]\n                  ; Are we finished?\n                  (if (zero? idx)\n                    ; Yes, remove potential elements of this pair, since we\n                    ; haven't\n                    ; seen the end of it, and return\n                    [(- element-count pair-size)\n                     (- paired-element-count actual-pair-size)]\n                    ; Not yet finished\n                    (recur (dec idx)\n                           element-count\n                           paired-element-count\n                           (if comment-or-newline?\n                             constant-required?\n                             (not constant-required?))\n                           pair-size\n                           actual-pair-size))))))))))\n\n(defn count-constant-pairs\n  \"Given a seq of zlocs, work backwards from the end, and see how\n  many elements are pairs of constants (using zconstant? or the\n  supplied constant-pair-fn).  So that (... :a (stuff) :b (bother))\n  returns 4, since both :a and :b are zconstant? true. This is made\n  more difficult by having to skip comments along the way as part\n  of the pair check, but keep track of the ones we skip so the count\n  is right in the end.  We don't expect any spaces in this but\n  newlines must be handled, because this seq should have been\n  produced by zmap or its equivalent.  Returns two things:\n  [paired-item-count actual-paired-items], where paired-item-count\n  is the number of things from the end of the seq you have to trim\n  off to get the constant pairs included, and the actual-paired-items\n  is the count of the items to be checked against the constant-pair-min\n  (which is exclusive of comments and newlines).\"\n  [options constant-pair-fn zloc-seq]\n  (loop [zloc-seq-rev (reverse zloc-seq)\n         element-count 0\n         paired-element-count 0\n         ; since it is reversed, we need a constant every second element\n         constant-required? nil\n         pair-size 0\n         actual-pair-size 0]\n    (let [element (first zloc-seq-rev)]\n      #_(prn \"count-constant-pairs: element-count:\" element-count\n             \"paired-element-count:\" paired-element-count\n             \"constant-required:\" constant-required?\n             \"pair-size:\" pair-size\n             \"actual-pair-size:\" actual-pair-size\n             \"element:\" (zstring element))\n      (if (empty? zloc-seq-rev)\n        ; remove potential elements of this pair, since we haven't\n        ; seen the end of it, and return\n        [(- element-count pair-size) (- paired-element-count actual-pair-size)]\n        (let [comment-or-newline? (zcomment-or-newline? element)]\n          #_(prn \"count-constant-pair:\" (get-sexpr options element)\n                 \"constant-pair-fn:\" constant-pair-fn)\n          (if (and (not comment-or-newline?)\n                   constant-required?\n                   (if constant-pair-fn\n                     ; If we can't call sexpr on it, it isn't a constant\n                     (not (when (zsexpr? element)\n                            (constant-pair-fn (get-sexpr options element))))\n                     (not (zconstant? element))))\n            ; we counted the right-hand and any comments of this pair, but it\n            ; isn't a pair so exit now with whatever we have so far\n            [(- element-count pair-size)\n             (- paired-element-count actual-pair-size)]\n            (recur (next zloc-seq-rev)\n                   (inc element-count)\n                   (if comment-or-newline?\n                     paired-element-count\n                     (inc paired-element-count))\n                   (if comment-or-newline?\n                     constant-required?\n                     (not constant-required?))\n                   (if (and constant-required? (not comment-or-newline?))\n                     ; must be a constant, so start count over\n                     0\n                     (inc pair-size))\n                   (if (and constant-required? (not comment-or-newline?))\n                     ; start count of actual pairs over as well\n                     0\n                     (if comment-or-newline?\n                       ; we are only counting actual pairs here\n                       actual-pair-size\n                       (inc actual-pair-size))))))))))\n\n(defn constant-pair\n  \"Argument is a zloc-seq.  Output is a [pair-seq non-paired-item-count],\n  if any.  If there are no pair-seqs, pair-seq must be nil, not an\n  empty seq.  This will largely ignore newlines and comments.\"\n  [caller\n   {{:keys [constant-pair? constant-pair-fn constant-pair-min]} caller,\n    :as options} zloc-seq]\n  #_(prn \"constant-pair:\" caller constant-pair-fn)\n  (if constant-pair?\n    (let [[paired-item-count actual-paired-items]\n            (count-constant-pairs options constant-pair-fn zloc-seq)\n          non-paired-item-count (- (count zloc-seq) paired-item-count)\n          _ (dbg options\n                 \"constant-pair: non-paired-items:\" non-paired-item-count\n                 \"paired-item-count:\" paired-item-count\n                 \"actual-paired-items:\" actual-paired-items)\n          pair-seq (when (>= actual-paired-items constant-pair-min)\n                     (drop non-paired-item-count zloc-seq))]\n      [pair-seq non-paired-item-count])\n    [nil (count zloc-seq)]))\n\n;;\n;; # Take into account constant pairs\n;;\n\n(declare interpose-either-nl-hf)\n\n(defn zcomment-or-newline?\n  \"If this zloc is a comment or a newline, return true.\"\n  [zloc]\n  (or (zcomment? zloc) (znewline? zloc)))\n\n(defn ensure-start-w-nl\n  \"Given a style-vec, ensure it starts with a newline.  If it doesn't,\n  then put one in.  We could take the whole newline, but the indent is\n  really the only unique thing.\"\n  [ind style-vec]\n  #_(def eswn style-vec)\n  #_(prn \"ensure-start-w-nl:\" style-vec)\n  (let [element-type (nth (first style-vec) 2)]\n    #_(prn \"ensure-start-w-nl:\" element-type)\n    (if (or (= element-type :newline) (= element-type :indent))\n      style-vec\n      ; Don't need prepend-nl, since we wouldn't be doing this if there\n      ; was a newline on the front of style-ec\n      (concat-no-nil [[(str \"\\n\" (blanks ind)) :none :indent 6]] style-vec))))\n\n(defn ensure-end-w-nl\n  \"Given a style-vec, ensure it ends with a newline.  If it doesn't,\n  then put one in.\"\n  [ind style-vec]\n  #_(def eewn style-vec)\n  #_(prn \"ensure-end-w-nl:\" style-vec)\n  (let [element-type (nth (last style-vec) 2)]\n    #_(prn \"ensure-end-w-nl:\" element-type)\n    (if (or (= element-type :newline) (= element-type :indent))\n      style-vec\n      (concat-no-nil style-vec [[(str \"\\n\" (blanks ind)) :none :indent 7]]))))\n\n\n; This version does hang first, and if it passes use-hang?, it\n; doesn't bother to do flow.\n\n(defn fzprint-hang-remaining\n  \"zloc-seq is a seq of zlocs of a collection.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc-seq if it exists.\"\n  ([caller\n    {:keys [dbg? width],\n     {:keys [hang? constant-pair? constant-pair-min hang-avoid hang-expand\n             hang-diff nl-separator? respect-nl?]}\n       caller,\n     :as options} hindent findent zloc-seq fn-style zloc-count]\n   (when (:dbg-hang options)\n     (println (dots (:pdepth options)) \"hr:\" (zstring (first zloc-seq))))\n   (dbg-pr options\n           \"fzprint-hang-remaining first:\" (zstring (first zloc-seq))\n           \"hindent:\" hindent\n           \"findent:\" findent\n           \"caller:\" caller\n           \"nl-separator?:\" nl-separator?\n           \"(count zloc-seq):\" (count zloc-seq))\n   ; (in-hang options) slows things down here, for some reason\n   (let [seq-right zloc-seq\n         seq-right (if zloc-count (take zloc-count seq-right) seq-right)]\n     (if (empty? seq-right)\n       :noseq\n       (let [[pair-seq non-paired-item-count]\n               (constant-pair caller options seq-right)\n             _ (dbg options\n                    \"fzprint-hang-remaining count pair-seq:\"\n                    (count pair-seq))\n             #_(dbg options\n                    \"fzprint-hang-remaining: *=*=*=*=*=*\" (zstring (first\n                                                                     zloc-seq))\n                    \"hindent:\" hindent\n                    \"findent:\" findent\n                    \"caller:\" caller\n                    \"hang?\" hang?\n                    \"hang-diff\" hang-diff)\n             ; Now determine if there is any point in doing a hang, because\n             ; if the flow is beyond the expand limit, there is really no\n             ; chance that the hang is not beyond the expand limit.\n             ; This is what good-enough? does:\n             ;  (<= (/ (dec p-lines) p-count) hang-expand)\n             ;  Also need to account for the indent diffs.\n             ; Would be nice to move this into a common routine, since this\n             ; duplicates logic in good-enough?\n             ;\n             ; Yes, and this caused a problem when I put in the\n             ; hang-if-equal-flow? option in good-enough, so that now\n             ; we can't cancel the hang even though we are beyond the\n             ; hang-expand\n             ; because the hang might be the same as the flow, and in that case\n             ; we don't really care how long the hang-expand is. We could make\n             ; this a feature, by having a large-ish hang-expand and having it\n             ; override hang-if-equal-flow.  If we do that, we have to reorder\n             ; the checks in good-enough to put the hang-expand check first.\n             ; I can't see any great reason for doing a flow if the hang and\n             ; flow are equal, though, so we won't do that now.  And this\n             ; code comes out.\n             ;\n             #_#_[flow flow-lines] (zat options flow) ; PT\n             _ (dbg options\n                    \"fzprint-hang-remaining: first hang?\" hang?\n                    \"hang-avoid\" hang-avoid\n                    \"findent:\" findent\n                    \"hindent:\" hindent\n                    \"(count seq-right):\" (count seq-right)\n                    \"thing:\" (when hang-avoid (* (- width hindent) hang-avoid)))\n             hang? (and\n                     hang?\n                     ; This is a key for \"don't hang no matter what\", it isn't\n                     ; about making it prettier. People call this routine with\n                     ; these values equal to ensure that it always flows.\n                     (not= hindent findent)\n                     ; This is not the original, below.\n                     ; If we are doing respect-nl?, then the count of seq-right\n                     ; is going to be a lot more, even if it doesn't end up\n                     ; looking different than before.  So, perhaps we should\n                     ; adjust hang-avoid here?  Perhaps double it or something?\n                     (or (not hang-avoid)\n                         (< (count seq-right) (* (- width hindent) hang-avoid)))\n                     ; If the first thing in the flow is a comment, maybe we\n                     ; shouldn't be hanging anything?\n                     #_(not= (nth (first flow) 2) :comment-inline) ; PT\n                     ;flow-lines\n                     ;;TODO make this uneval!!!\n                     #_(or (<= (- hindent findent) hang-diff)\n                           (<= (/ (dec (first flow-lines)) (count seq-right))\n                               hang-expand)))\n             _ (dbg options \"fzprint-hang-remaining: second hang?\" hang?)\n             hanging\n               (#?@(:bb [do]\n                    :clj [zfuture options]\n                    :cljs [do])\n                (let [hang-result\n                        (when hang?\n                          (if-not pair-seq\n                            ; There are no paired elements\n                            (fzprint-flow-seq (in-hang options)\n                                              hindent\n                                              seq-right\n                                              :force-nl\n                                              nil ;nl-first?\n                            )\n                            (if (not (zero? non-paired-item-count))\n                              (concat-no-nil\n                                ; The elements that are not paired\n                                (dbg-form\n                                  options\n                                  \"fzprint-hang-remaining: mapv:\"\n                                  (ensure-end-w-nl\n                                    hindent\n                                    (fzprint-flow-seq\n                                      (not-rightmost (in-hang options))\n                                      hindent\n                                      (take non-paired-item-count seq-right)\n                                      :force-nl\n                                      nil ;nl-first?\n                                    )))\n                                ; The elements that are paired\n                                (dbg-form\n                                  options\n                                  \"fzprint-hang-remaining: fzprint-hang:\"\n                                  (fzprint-pairs (in-hang options)\n                                                 hindent\n                                                 pair-seq)))\n                              ; All elements are paired\n                              (fzprint-pairs (in-hang options)\n                                             hindent\n                                             pair-seq))))]\n                  [hang-result (style-lines options hindent hang-result)]))\n             ; We used to calculate hang-count by doing the hang an then\n             ; counting\n             ; the output.  But ultimately this is simple a series of map calls\n             ; to the elements of seq-right, so we go right to the source for\n             ; this\n             ; number now.  That let's us move the interpose calls above this\n             ; point.\n             [hanging [hanging-line-count :as hanging-lines]] (zat options\n                                                                   hanging)\n             hang-count (count seq-right)\n             flow? (not (use-hang? caller\n                                   options\n                                   hindent\n                                   hang-count\n                                   hanging-line-count))\n             #_(inc-pass-count)\n             flow (when flow?\n                    (#?@(:bb [do]\n                         :clj [zfuture options]\n                         :cljs [do])\n                     (let [flow-result\n                             (if-not pair-seq\n                               ; We don't have any constant pairs\n                               (fzprint-flow-seq options\n                                                 findent\n                                                 seq-right\n                                                 :force-nl\n                                                 :nl-first)\n                               (if (not (zero? non-paired-item-count))\n                                 ; We have constant pairs, ; but they follow\n                                 ; some stuff that isn't paired.\n                                 ; Do the elements that are not pairs\n                                 (concat-no-nil\n                                   (ensure-end-w-nl\n                                     findent\n                                     (fzprint-flow-seq\n                                       (not-rightmost options)\n                                       findent\n                                       (take non-paired-item-count seq-right)\n                                       :force-nl\n                                       :nl-first))\n                                   ; The elements that are constant pairs\n                                   (fzprint-pairs options findent pair-seq))\n                                 ; This code path is where we have all\n                                 ; constant\n                                 ; pairs.\n                                 (fzprint-pairs options findent pair-seq)))]\n                       ; Skip the first line when doing the calcuation so that\n                       ; good-enough doesn't change the layout from the original\n                       [flow-result\n                        (style-lines\n                          options\n                          findent\n                          ; Issue #173 -- the following code caused code to\n                          ; disappear, because if there was just one thing\n                          ; in flow-result, then it would be empty and\n                          ; style-lines would return nil, causing neither\n                          ; hang nor flow to be used.\n                          ;\n                          ; (if (not pair-seq)\n                          ;   (next flow-result)\n                          ;   flow-result)\n                          ;\n                          ; Now we do a similar thing -- as long as flow-result\n                          ; has more than one thing, below when we call\n                          ; good-enough.\n                          flow-result)])))\n             [flow flow-lines] (when flow (zat options flow)) ; PT\n             _ (log-lines options\n                          \"fzprint-hang-remaining: hanging:\"\n                          hindent\n                          hanging)\n             _ (dbg options\n                    \"fzprint-hang-remaining: hanging-lines:\" hanging-lines\n                    \"hang-count:\" hang-count)]\n         (dbg options \"fzprint-hang-remaining: flow-lines:\" flow-lines)\n         (when dbg?\n           (if (zero? hang-count)\n             (println \"hang-count = 0:\" (str (map zstring zloc-seq)))))\n         (log-lines options \"fzprint-hang-remaining: flow\" findent flow)\n         ; If we did hang and not flow, then we better use it.\n         (if (and hanging-lines (not flow-lines))\n           (if (first-nl? hanging)\n             hanging\n             (concat-no-nil [[\" \" :none :whitespace 10]] hanging))\n           (when flow-lines\n             (if\n               ; Only call good-enough if we have both hanging-lines and\n               ; flow-lines!\n               (and hanging-lines\n                    (good-enough?\n                      caller\n                      options\n                      fn-style\n                      hang-count\n                      (- hindent findent)\n                      hanging-lines\n                      ; If we have more than one line in the flow\n                      ; and we didn't have any constant pairs,\n                      ; then decrease the line count for the flow.\n                      ; This seems to be necessary based on the results,\n                      ; but it can't be done in good-enough in all cases,\n                      ; because it breaks lots of stuff.  This was\n                      ; previously done above, in the call to style-lines,\n                      ; where we just skipped the first line.  That\n                      ; seems like a bad idea, so we now just create\n                      ; a new flow-lines to cover this situation.\n                      ; This was provoked by Issue #173 where we lost\n                      ; code when there was only one thing in flow-result,\n                      ; and we skipped that thing, causing style-lines\n                      ; to return nil and the whole thing disappeared.\n                      (if (and (not pair-seq) (> (first flow-lines) 1))\n                        [(dec (first flow-lines)) (second flow-lines)\n                         (nth flow-lines 2)]\n                        flow-lines)\n                      #_flow-lines))\n               ; If hanging starts with a newline, don't put a blank at the\n               ; end of the previous line.\n               (if (first-nl? hanging)\n                 hanging\n                 (concat-no-nil [[\" \" :none :whitespace 10]] hanging))\n               (ensure-start-w-nl findent flow))))))))\n  ([caller options hindent findent zloc fn-style]\n   (fzprint-hang-remaining caller options hindent findent zloc fn-style nil)))\n\n\n; This version overlaps hang and flow, which can run into trouble when\n; you get very deep -- it runs out of threads.  But we'll keep it here\n; just for illustrative purposes, since when it works, it is pretty fast.\n#_(defn fzprint-hang-remaining-overlap\n    \"zloc-seq is a seq of zlocs of a collection.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc-seq if it exists.\"\n    ([caller\n      {:keys [dbg? width],\n       {:keys [hang? constant-pair? constant-pair-min hang-avoid hang-expand\n               hang-diff nl-separator? respect-nl?]}\n         caller,\n       :as options} hindent findent zloc-seq fn-style zloc-count]\n     (when (:dbg-hang options)\n       (println (dots (:pdepth options)) \"hr:\" (zstring (first zloc-seq))))\n     (dbg-pr options\n             \"fzprint-hang-remaining first:\" (zstring (first zloc-seq))\n             \"hindent:\" hindent\n             \"findent:\" findent\n             \"caller:\" caller\n             \"nl-separator?:\" nl-separator?\n             \"(count zloc-seq):\" (count zloc-seq))\n     ; (in-hang options) slows things down here, for some reason\n     (let [seq-right zloc-seq\n           seq-right (if zloc-count (take zloc-count seq-right) seq-right)\n           [pair-seq non-paired-item-count]\n             (constant-pair caller options seq-right)\n           _ (dbg options\n                  \"fzprint-hang-remaining count pair-seq:\"\n                  (count pair-seq))\n           flow\n             (#?@(:bb [do]\n                  :clj [zfuture options]\n                  :cljs [do])\n              (let [flow-result (if-not pair-seq\n                                  ; We don't have any constant pairs\n                                  (fzprint-flow-seq options\n                                                    findent\n                                                    seq-right\n                                                    :force-nl\n                                                    :nl-first)\n                                  (if (not (zero? non-paired-item-count))\n                                    ; We have constant pairs, ; but they follow\n                                    ; some stuff that isn't paired.\n                                    ; Do the elements that are not pairs\n                                    (concat-no-nil\n                                      (ensure-end-w-nl\n                                        findent\n                                        (fzprint-flow-seq\n                                          (not-rightmost options)\n                                          findent\n                                          (take non-paired-item-count seq-right)\n                                          :force-nl\n                                          :nl-first))\n                                      ; The elements that are constant pairs\n                                      (fzprint-pairs options findent pair-seq))\n                                    ; This code path is where we have all\n                                    ; constant\n                                    ; pairs.\n                                    (fzprint-pairs options findent pair-seq)))]\n                ; Skip the first line when doing the calcuation so that\n                ; good-enough doesn't change the layout from the original\n                [flow-result\n                 (style-lines\n                   options\n                   findent\n                   (if (not pair-seq) (next flow-result) flow-result))]))\n           #_(dbg options\n                  \"fzprint-hang-remaining: *=*=*=*=*=*\" (zstring (first\n                                                                   zloc-seq))\n                  \"hindent:\" hindent\n                  \"findent:\" findent\n                  \"caller:\" caller\n                  \"hang?\" hang?\n                  \"hang-diff\" hang-diff)\n           ; Now determine if there is any point in doing a hang, because\n           ; if the flow is beyond the expand limit, there is really no\n           ; chance that the hang is not beyond the expand limit.\n           ; This is what good-enough? does:\n           ;  (<= (/ (dec p-lines) p-count) hang-expand)\n           ;  Also need to account for the indent diffs.\n           ; Would be nice to move this into a common routine, since this\n           ; duplicates logic in good-enough?\n           ;\n           ; Yes, and this caused a problem when I put in the\n           ; hang-if-equal-flow? option in good-enough, so that now\n           ; we can't cancel the hang even though we are beyond the hang-expand\n           ; because the hang might be the same as the flow, and in that case\n           ; we don't really care how long the hang-expand is. We could make\n           ; this a feature, by having a large-ish hang-expand and having it\n           ; override hang-if-equal-flow.  If we do that, we have to reorder\n           ; the checks in good-enough to put the hang-expand check first.\n           ; I can't see any great reason for doing a flow if the hang and\n           ; flow are equal, though, so we won't do that now.  And this\n           ; code comes out.\n           ;\n           #_#_[flow flow-lines] (zat options flow) ; PT\n           _ (dbg options\n                  \"fzprint-hang-remaining: first hang?\" hang?\n                  \"hang-avoid\" hang-avoid\n                  \"findent:\" findent\n                  \"hindent:\" hindent\n                  \"(count seq-right):\" (count seq-right)\n                  \"thing:\" (when hang-avoid (* (- width hindent) hang-avoid)))\n           hang? (and\n                   hang?\n                   ; This is a key for \"don't hang no matter what\", it isn't\n                   ; about making it prettier. People call this routine with\n                   ; these values equal to ensure that it always flows.\n                   (not= hindent findent)\n                   ; This is not the original, below.\n                   ; If we are doing respect-nl?, then the count of seq-right\n                   ; is going to be a lot more, even if it doesn't end up\n                   ; looking different than before.  So, perhaps we should\n                   ; adjust hang-avoid here?  Perhaps double it or something?\n                   (or (not hang-avoid)\n                       (< (count seq-right) (* (- width hindent) hang-avoid)))\n                   ; If the first thing in the flow is a comment, maybe we\n                   ; shouldn't be hanging anything?\n                   #_(not= (nth (first flow) 2) :comment-inline) ; PT\n                   ;flow-lines\n                   ;;TODO make this uneval!!!\n                   #_(or (<= (- hindent findent) hang-diff)\n                         (<= (/ (dec (first flow-lines)) (count seq-right))\n                             hang-expand)))\n           _ (dbg options \"fzprint-hang-remaining: second hang?\" hang?)\n           hanging\n             (#?@(:bb [do]\n                  :clj [zfuture options]\n                  :cljs [do])\n              (let [hang-result\n                      (when hang?\n                        (if-not pair-seq\n                          ; There are no paired elements\n                          (fzprint-flow-seq (in-hang options)\n                                            hindent\n                                            seq-right\n                                            :force-nl\n                                            nil ;nl-first?\n                          )\n                          (if (not (zero? non-paired-item-count))\n                            (concat-no-nil\n                              ; The elements that are not paired\n                              (dbg-form\n                                options\n                                \"fzprint-hang-remaining: mapv:\"\n                                (ensure-end-w-nl\n                                  hindent\n                                  (fzprint-flow-seq\n                                    (not-rightmost (in-hang options))\n                                    hindent\n                                    (take non-paired-item-count seq-right)\n                                    :force-nl\n                                    nil ;nl-first?\n                                  )))\n                              ; The elements that are paired\n                              (dbg-form options\n                                        \"fzprint-hang-remaining: fzprint-hang:\"\n                                        (fzprint-pairs (in-hang options)\n                                                       hindent\n                                                       pair-seq)))\n                            ; All elements are paired\n                            (fzprint-pairs (in-hang options)\n                                           hindent\n                                           pair-seq))))]\n                [hang-result (style-lines options hindent hang-result)]))\n           ; We used to calculate hang-count by doing the hang an then counting\n           ; the output.  But ultimately this is simple a series of map calls\n           ; to the elements of seq-right, so we go right to the source for this\n           ; number now.  That let's us move the interpose calls above this\n           ; point.\n           [hanging hanging-lines] (zat options hanging)\n           [flow flow-lines] (zat options flow) ; PT\n           hang-count (count seq-right)\n           _ (log-lines options\n                        \"fzprint-hang-remaining: hanging:\"\n                        hindent\n                        hanging)\n           _ (dbg options\n                  \"fzprint-hang-remaining: hanging-lines:\" hanging-lines\n                  \"hang-count:\" hang-count)]\n       (dbg options \"fzprint-hang-remaining: flow-lines:\" flow-lines)\n       (when dbg?\n         (if (zero? hang-count)\n           (println \"hang-count = 0:\" (str (map zstring zloc-seq)))))\n       (log-lines options \"fzprint-hang-remaining: flow\" findent flow)\n       (when flow-lines\n         (if (good-enough? caller\n                           options\n                           fn-style\n                           hang-count\n                           (- hindent findent)\n                           hanging-lines\n                           flow-lines)\n           ; If hanging starts with a newline, don't put a blank at the\n           ; end of the previous line.\n           (if (first-nl? hanging)\n             hanging\n             (concat-no-nil [[\" \" :none :whitespace 10]] hanging))\n           (ensure-start-w-nl findent flow)))))\n    ([caller options hindent findent zloc fn-style]\n     (fzprint-hang-remaining caller options hindent findent zloc fn-style nil)))\n\n;;\n;; # Find out and print what comes before the next element\n;;\n\n(defn fzprint-get-zloc-seq\n  \"Get the zloc seq, with or without newlines, as indicated by the options.\"\n  [caller options zloc]\n  (let [caller-options (caller options)\n        zloc-seq (cond (:respect-nl? caller-options) (zmap-w-nl identity zloc)\n                       (:respect-bl? caller-options) (zmap-w-bl identity zloc)\n                       :else (zmap identity zloc))]\n    (dbg-pr options \"fzprint-get-zloc-seq:\" (map zstring zloc-seq))\n    zloc-seq))\n\n(defn newline-or-comment?\n  \"Given an zloc, is it a newline or a comment?\"\n  [zloc]\n  (when zloc\n    (let [zloc-tag (ztag zloc)]\n      (or (= zloc-tag :newline) (= zloc-tag :comment)))))\n\n(defn remove-last-newline\n  \"Given a seq of style-vecs, look at the last one, and if it is a\n  :newline, then remove it.  But the last one might be a single\n  one, in which case we will remove the whole thing, and it might be\n  the last one in a sequence, in which case we will remove just that\n  one.  If there is nothing left, return [[[\\\"\\\" :none :none]]].\"\n  [ssv]\n  #_(prn \"remove-last-newline:\" ssv)\n  (let [last-style-vec (last ssv)]\n    (if-not (= (nth (last last-style-vec) 2) :newline)\n      ssv\n      (let [last-len (count last-style-vec)\n            total-len (count ssv)\n            remove-one\n              (concat (butlast ssv)\n                      (if (= last-len 1) [] (vector (butlast last-style-vec))))]\n        (if (empty? remove-one) [[[\"\" :none :none]]] remove-one)))))\n\n(defn remove-one-newline\n  \"Given a single style-vec, look at the last element, and if it is a\n  :newline, remove it.  If there is nothing left, return :noseq\"\n  [style-vec]\n  #_(prn \"remove-one-newline:\" style-vec)\n  (let [last-style-vec (last style-vec)]\n    (if-not (= (nth last-style-vec 2) :newline)\n      style-vec\n      (let [remaining (butlast style-vec)]\n        (if (empty? remaining) :noseq remaining)))))\n\n(defn add-newline-to-comment\n  \"Given [[[\\\";stuff\\\" :none :comment]]] or \n  [[[\\\";bother\\\" :none :comment-inline 1]]] add [\\\"\\n\\\" :none :newline]\n  to the inside of it.\"\n  [indent fzprint*-return]\n  (let [the-type (nth (first fzprint*-return) 2)]\n    (if (or (= the-type :comment) (= the-type :comment-inline))\n      (concat fzprint*-return [[(str \"\\n\" (blanks indent)) :none :newline 1]])\n      fzprint*-return)))\n\n(defn gather-up-to-next-zloc\n  \"Given a zloc-seq, gather newlines and comments up to the next\n  zloc into a seq.  Returns [seq next-zloc next-count].\"\n  [zloc-seq]\n  (loop [nloc-seq zloc-seq\n         out []\n         next-count 0]\n    (if (not (newline-or-comment? (first nloc-seq)))\n      [out (first nloc-seq) next-count]\n      (recur (next nloc-seq) (conj out (first nloc-seq)) (inc next-count)))))\n\n(defn fzprint-up-to-next-zloc\n  \"Using the information returned from fzprint-up-to-first-zloc or\n  fzprint-up-to-next-zloc, find the next zloc and return \n  [pre-next-style-vec next-zloc next-count zloc-seq]\"\n  [caller options ind [_ _ current-count zloc-seq :as next-data]]\n  (let [starting-count (inc current-count)\n        nloc-seq (nthnext zloc-seq starting-count)]\n    (dbg-pr options\n            \"fzprint-up-to-next-zloc: starting-count:\" starting-count\n            \"zloc-seq:\" (map zstring zloc-seq))\n    (if-not (= (:ztype options) :zipper)\n      [:noseq (first nloc-seq) starting-count zloc-seq]\n      (let [[pre-next-zloc-seq next-zloc next-count] (gather-up-to-next-zloc\n                                                       nloc-seq)\n            next-count (+ starting-count next-count)]\n        (dbg-pr options\n                \"fzprint-up-to-next-zloc: next-count:\" next-count\n                \"pre-next-zloc-seq:\" (map zstring pre-next-zloc-seq))\n        (if (empty? pre-next-zloc-seq)\n          ; The normal case -- nothing before the first interesting zloc\n          [:noseq next-zloc next-count zloc-seq]\n          ; There were newlines or comments (or both) before the first\n          ; interesting zloc\n          (let [coll-print (fzprint-flow-seq options ind pre-next-zloc-seq)\n                ; we are set up for fzprint-seq, but fzprint-flow-seq does\n                ; a full-on style-vec, so turn it back into fzprint-seq style\n                ; output\n                coll-print (mapv vector coll-print)\n                ; We aren't trying to interpose anything here, we are just\n                ; trying to print the stuff we have in a way that will work.\n                ; Remove the last newline if we are not the first thing\n                coll-print (if (not= starting-count 0)\n                             (remove-last-newline coll-print)\n                             coll-print)\n                coll-out (apply concat-no-nil coll-print)\n                ; If we are down inside a list and  the first thing is a\n                ; comment, ensure we start with a newline.  If it is an\n                ; inline comment, then it will get fixed later.\n                coll-out (if (and (not= starting-count 0)\n                                  (let [first-type (nth (first coll-out) 2)]\n                                    (or (= first-type :comment)\n                                        (= first-type :comment-inline))))\n                           (ensure-start-w-nl ind coll-out)\n                           coll-out)\n                ; Eensure that we end with a newline if we are the first\n                ; thing\n                coll-out (if (not= starting-count 0)\n                           coll-out\n                           (ensure-end-w-nl ind coll-out))\n                ; Make sure it ends with a newline, since all comments and\n                ; newlines better end with a newline.  But how could it\n                ; not end with a newline?  We only put comments and newlines\n                ; in here, and added newlines to comments.  So we will assume\n                ; that it ends with a newline.\n               ]\n            [coll-out next-zloc next-count zloc-seq]))))))\n\n(defn fzprint-up-to-first-zloc\n  \"Returns [pre-first-style-vec first-zloc first-count zloc-seq], where\n  pre-first-style-vec will be :noseq if there isn't anything, and first-count\n  is what you give to nthnext to get to the first-zloc in zloc-seq.\"\n  [caller options ind zloc]\n  (if-not (= (:ztype options) :zipper)\n    [:noseq (first zloc) 0 zloc]\n    (let [zloc-seq (fzprint-get-zloc-seq caller options zloc)]\n      ; Start at -1 so that when fzprint-up-to-next-zloc skips, it goes\n      ; to zero.\n      (fzprint-up-to-next-zloc caller options ind [nil nil -1 zloc-seq]))))\n\n(defn get-zloc-seq-right\n  \"Using return from fzprint-up-to-first-zloc or fzprint-up-to-next-zloc,\n  [pre-next-style-vec next-zloc next-count zloc-seq], return a zloc-seq\n  pointer to just beyond the specific zloc which was found by the\n  fzprint-up-to-first or fzprint-up-to-next call.  You don't give this\n  a number, you give it the data structure from the thing that you found.\"\n  [[_ _ next-count zloc-seq :as input-data]]\n  (if (>= next-count (count zloc-seq))\n    (throw (#?(:clj Exception.\n               :cljs js/Error.)\n            (str \"get-zloc-seq-right input data inconsistent:\" input-data)))\n    (let [zloc-seq (nthnext zloc-seq (inc next-count))]\n      #_(prn \"get-zloc-seq-right: next-count:\" next-count\n             \"zloc-seq:\" (map zstring zloc-seq))\n      #_(dbg-pr options \"get-zloc-seq-right:\" (map zstring zloc-seq))\n      zloc-seq)))\n\n\n;;\n;; # Indent-only support\n;;\n\n(defn at-newline?\n  \"Is this a newline or equivalent?  Comments and newlines are both\n  newlines for the purposed of this routine.\"\n  [zloc]\n  (let [this-tag (ztag zloc)] (or (= this-tag :comment) (= this-tag :newline))))\n\n(defn next-newline\n  \"Given a zloc that is down inside of a collection, presumably\n  a list, return a vector containing the number of printing elements\n  we had to traverse to get to it as well as the newline.\"\n  [zloc]\n  (loop [nloc zloc\n         index 0]\n    #_(prn \"next-newline:\" (zstring nloc) \"tag:\" (tag nloc))\n    (let [next-right (right* nloc)]\n      (if next-right\n        (if (at-newline? nloc)\n          [index nloc]\n          (recur (right* nloc)\n                 (if-not (zprint.zutil/whitespace? nloc) (inc index) index)))\n        [index nloc]))))\n\n\n(defn next-actual\n  \"Return the next actual element, ignoring comments and whitespace\n  and everything else but real elements.\"\n  [zloc]\n  #_(prn \"next-actual: zloc\" (zstring zloc))\n  (loop [nloc zloc]\n    (if-not nloc\n      nloc\n      (let [next-nloc (zprint.zutil/zrightnws nloc)\n            next-tag (tag next-nloc)]\n        #_(prn \"nloc:\" nloc\n               \"next-actual: next-nloc:\" (zstring next-nloc)\n               \"next-tag:\" next-tag)\n        (if-not (or (= next-tag :newline) (= next-tag :comment))\n          next-nloc\n          (recur next-nloc))))))\n\n(defn first-actual\n  \"Return the first actual element, ignoring comments and whitespace\n  and everything else but real elements.\"\n  [zloc]\n  (if (at-newline? zloc) (next-actual zloc) zloc))\n\n(defn hang-zloc?\n  \"Should we hang this zloc, or flow it.  We assume that we are at\n  the start of the collection (though this could be generalized to\n  deal with other starting locations easily enough).  Return true\n  if we should hang it based just on the information in the zloc\n  itself.  The criteria are: If there is a newline after the second\n  thing in the zloc, and the amount of space prior to the third thing\n  is the same as the amount of space prior to the second thing, then\n  the incoming zloc was hung and we should do the same. Of course, it\n  would also only be hung if the second thing was on the same line as\n  the first thing.\"\n  [zloc]\n  #_(prn \"hang-zloc: zloc:\" zloc \"at-newline?:\" (at-newline? zloc))\n  (let [zloc (first-actual zloc) ; skip comments/newlines at start\n        [count-prior-to-newline newline] (next-newline zloc)]\n    #_(prn \"at-newline?:\" (at-newline? zloc)\n           \"hang-zloc?: count-prior...:\" count-prior-to-newline\n           \"zloc:\" (zstring zloc))\n    ; Are the first two real things on the same line?\n    (if (< count-prior-to-newline 2)\n      ; no -- then it can't be a hang\n      false\n      (let [second-element (zprint.zutil/zrightnws\n                             (if (zprint.zutil/whitespace? zloc)\n                               (zprint.zutil/zrightnws zloc)\n                               zloc))\n            second-indent (length-before second-element)\n            third-element (next-actual second-element)\n            third-indent (length-before third-element)]\n        #_(prn \"hang-zloc?: second-element:\" (zstring second-element)\n               \"second-indent:\" second-indent\n               \"third-element:\" (zstring third-element)\n               \"third-tag:\" (tag third-element)\n               \"third-indent:\" third-indent)\n        (and second-element third-element (= second-indent third-indent))))))\n\n(defn indent-shift\n  \"Take a style-vec that was once output from indent-zmap, and fix\n  up all of the :indent elements in it by adding (- actual-ind ind)\n  to them.  If we find a multiple thing in here, call indent-shift\n  recursively with the ind and cur-ind that is approprite.  All of\n  the actual indents are correct already -- all we are doing is\n  setting up their base.  There is no attempt to determine if we\n  are exceeding any configured width.\"\n  [caller options ind actual-ind svec]\n  (let [shift-ind actual-ind]\n    (dbg-pr options\n            \"indent-shift: ind:\" ind\n            \"actual-ind:\" actual-ind\n            \"shift-ind:\" shift-ind\n            \"svec:\" svec)\n    (loop [cur-seq svec\n           cur-ind actual-ind\n           out []]\n      (if-not cur-seq\n        out\n        (let [this-seq (first cur-seq)\n              new-seq\n                (if (vector? (first this-seq))\n                  ; is this ind correct?\n                  (indent-shift caller options ind cur-ind this-seq)\n                  (let [[s color type] this-seq\n                        next-seq (first (next cur-seq))\n                        this-shift (if (and next-seq\n                                            (not (vector? (first next-seq)))\n                                            (= (nth next-seq 2) :indent))\n                                     0\n                                     shift-ind)]\n                    (cond (= type :indent) [(str s (blanks this-shift)) color\n                                            type 42]\n                          (= type :right) [s color type shift-ind]\n                          :else this-seq)))\n              _ (dbg-pr options\n                        \"indent-shift: cur-ind:\" cur-ind\n                        \"this-seq:\" this-seq\n                        \"new-seq:\" new-seq)\n              ; Shouldn't this be (inc cur-ind)?\n              [linecnt max-width lines] (style-lines options cur-ind [new-seq])\n              ; Figure out where we are\n              last-width (last lines)]\n          (dbg-pr options\n                  \"indent-shift: last-width:\" last-width\n                  \"new-seq:\" new-seq)\n          ; Should this be (inc last-width)?\n          (recur (next cur-seq) last-width (conj out new-seq)))))))\n\n(declare merge-fzprint-seq)\n\n(defn indent-zmap\n  \"Implement :indent-only?.  This routine is the central one through\n  which all :indent-only? processing flows, and replaces all of the\n  detailed logic in fzprint-list*, fzprint-vec*, and fzprint-map*.\n  This is called directly by fzprint-vec*, which handles both vectors\n  and sets, and through fzprint-indent by fzprint-list* and\n  fzprint-map*.  Thus, all of the data structures get their\n  :indent-only? processing handled by ident-zmap.  coll-print is\n  the output from fzprint-seq, which is a style-vec in the making\n  without spacing, but with extra [] around the elements.  Everything\n  is based off of ind, and we know nothing to the left of that.\n  ind must be the left end of everything, not the right of l-str!\n  The actual-ind is to the right of l-str.  When we get a newline,\n  replace any spaces after it with our own, and that would be to\n  bring it to ind + indent.  \"\n  ([caller\n    {:keys [width rightcnt], {:keys [wrap-after-multi?]} caller, :as options}\n    ind actual-ind coll-print indent first-indent-only?]\n   (let [coll-print (merge-fzprint-seq coll-print)\n         last-index (dec (count coll-print))\n         rightcnt (fix-rightcnt rightcnt)\n         actual-indent (+ ind indent)]\n     (dbg-pr options\n             \"indent-zmap: ind:\" ind\n             \"actual-ind:\" actual-ind\n             \"first-indent-only?\" first-indent-only?\n             \"indent:\" indent\n             \"actual-indent:\" actual-indent\n             \"coll-print:\" coll-print)\n     (loop [cur-seq coll-print\n            cur-ind actual-ind\n            index 0\n            beginning? true  ; beginning of line\n            ; transient here slowed things down, in a similar routine\n            l-str-indent? true\n            out []]\n       (if-not cur-seq\n         out\n         (let [this-seq (first cur-seq)]\n           (when this-seq\n             (let [multi? (> (count this-seq) 1)\n                   _ (log-lines options \"indent-zmap:\" ind this-seq)\n                   _ (dbg-pr options\n                             \"indent-zmap loop: cur-ind:\" cur-ind\n                             \"multi?\" multi?\n                             \"(count this-seq):\" (count this-seq)\n                             \"this-seq:\" this-seq\n                             \"out:\" out)\n                   this-seq\n                     (if multi?\n                       (indent-shift caller options actual-ind cur-ind this-seq)\n                       this-seq)\n                   [linecnt max-width lines]\n                     (style-lines options cur-ind this-seq)\n                   ; Figure out where we are\n                   last-width (last lines)\n                   ; How can this be right if there are multiple lines?\n                   ; Because we called indent-zmap to get the indents right,\n                   ; and they will be but for the first line, which style-lines\n                   ; fixed because it got the cur-ind..\n                   thetype (nth (last this-seq) 2)\n                   ; This is the total width of the current line\n                   ; relative to ind\n                   len (- last-width cur-ind)\n                   _ (dbg options\n                          \"linecnt:\" linecnt\n                          \"last-width:\" last-width\n                          \"len:\" len\n                          \"type:\" thetype)\n                   len (max 0 len)\n                   ; This isn't the only newline, actually.  Sometimes they\n                   ; are comment or comment-inline.  Later, for indent-shift,\n                   ; they are :indents.  Figure this out!\n                   newline? (= thetype :newline)\n                   comma? (= thetype :comma)\n                   isempty? (empty? (first (first this-seq)))\n                   comment? (or (= thetype :comment)\n                                (= thetype :comment-inline))\n                   ; Adjust for the rightcnt on the last element\n                   ;first-comment? (and comment? (= index 0))\n                   ;first-newline? (and newline? (= index 0))\n                   ;l-str-indent? (or first-comment? first-newline?)\n                   l-str-indent? (and l-str-indent? (or comment? newline?))\n                   actual-indent (if (and (> index 0) first-indent-only?)\n                                   ind\n                                   (+ ind indent))\n                   width (if (= index last-index) (- width rightcnt) width)\n                   ; need to check size, and if one line and fits, should fit\n                   ; ??? why does it fit if this is the first thing?  Because\n                   ; if it isn't, things won't get better?  Seems to me like\n                   ; if the first thing doesn't fit, we should return nil.\n                   ;\n                   ; But this is all about indent-only, not fitting.  But\n                   ; we will probably care about fitting someday.\n                   fit? (<= (+ cur-ind len) width)\n                   ; If we don't care about fit, then don't do this!!\n                   new-ind (cond newline? actual-indent\n                                 :else (+ cur-ind 1 len))]\n               (dbg-pr\n                 options\n                 \"------ this-seq:\" this-seq\n                 \"lines:\" lines\n                 \"linecnt:\" linecnt\n                 \"multi?\" multi?\n                 \"thetype:\" thetype\n                 \"newline?:\" newline?\n                 \"comment?:\" comment?\n                 \"comma?:\" comma?\n                 \"l-str-indent?:\" l-str-indent?\n                 \"first-indent-only?\" first-indent-only?\n                 \"actual-indent:\" actual-indent\n                 \"index:\" index\n                 \"beginning?:\" beginning?\n                 \"max-width:\" max-width\n                 \"last-width:\" last-width\n                 \"len:\" len\n                 \"cur-ind:\" cur-ind\n                 \"isempty?:\" isempty?\n                 \"new-ind:\" new-ind\n                 \"width:\" width\n                 \"fit?\" fit?)\n               (recur ; [cur-seq, cur-ind, index, beginning?, out]\n                 (next cur-seq)\n                 new-ind\n                 (inc index)\n                 ; beginning can happen because we created an indent\n                 ; or because a multi already had one.\n                 (or (and isempty? beginning?) newline? (= thetype :indent))\n                 ; l-str-indent\n                 l-str-indent?\n                 ; out\n                 (if isempty?\n                   out\n                   ; TODO: concat-no-nil fails here, why?\n                   (concat\n                     out\n                     (cond\n                       ; we don't want blanks if the next thing is a newline\n                       newline?\n                         [[(str\n                             \"\\n\"\n                             (let [next-seq (first (next cur-seq))\n                                   #_(prn \"next-seq:\" next-seq)\n                                   newline-next? (when next-seq\n                                                   (= (nth (first next-seq) 2)\n                                                      :newline))]\n                               (if newline-next?\n                                 \"\"\n                                 (blanks (if l-str-indent?\n                                           actual-ind\n                                           actual-indent))))) :none :indent 12]]\n                       ; Remove next line, unnecessary\n                       (zero? index) this-seq\n                       :else (if (or beginning? comma?)\n                               this-seq\n                               (concat-no-nil [[\" \" :none :whitespace 12]]\n                                              this-seq)))))))))))))\n  ([caller options ind actual-ind coll-print indent]\n   (indent-zmap caller options ind actual-ind coll-print indent nil)))\n\n; TODO: Fix these, they both need a lot of work\n; Do we really need both, or just figure out the hang\n; ones?\n\n(def hang-indent #{:hang :none :none-body})\n\n(def flow-indent\n  #{:binding :arg1 :arg1-body :hang :fn :noarg1-body :noarg1 :arg2 :arg2-fn\n    :arg1-force-nl :gt2-force-nl :gt3-force-nl :flow :flow-body :force-nl-body\n    :force-nl})\n\n(defn newline-seq?\n  \"Given a vector of vectors, decide if we should merge these individually\n  into the top level vector.\"\n  [newline-vec]\n  (let [starts-with-nl-vec (mapv #(clojure.string/starts-with? (first %) \"\\n\")\n                             newline-vec)\n        #_(println \"newline-seq? starts-with-nl-vec\" starts-with-nl-vec)\n        true-seq (distinct starts-with-nl-vec)]\n    (and (= (count true-seq) 1) (= (first true-seq) true))))\n\n(defn merge-fzprint-seq\n  \"Given the output from fzprint-seq, which is a seq of the\n  output of fzprint*, apply a function to each of them that has\n  more than one element (since less has no meaning) and when the\n  function returns true, merge the vector in as individual elements.\"\n  [fzprint-seq-vec]\n  (into []\n        (reduce #(if (newline-seq? %2)\n                   (into [] (concat %1 (mapv vector %2)))\n                   (conj %1 %2))\n          []\n          fzprint-seq-vec)))\n\n(defn fzprint-indent\n  \"This function assumes that :indent-only? was set for the caller\n  in the options (since anything else doesn't make sense).  It takes\n  a zloc and the ind, which is where we are on the line this point,\n  and will process the zloc to include any newlines.  Of course we\n  have to have all of the white space in the zloc too, since we\n  need to ask some questions about what we are starting with at\n  some point.  We don't add newlines and we let the newlines that\n  are in there do their thing.  We might add newlines if we move\n  beyond the right margin, but for now, we don't (and it isn't\n  entirely clear how or if that would work).  This routine has to\n  make decisions about the indent, that is whether to hang or flow\n  the expression. It does that based on what was done in the input\n  if the configuration allows.\"\n  ([caller l-str r-str options ind zloc fn-style arg-1-indent\n    first-indent-only?]\n   (let [flow-indent (:indent (caller options))\n         ; If it is a map, then an indent of (count l-str) (which is 1)\n         ; is all that makes sense.\n         flow-indent (if (= caller :map) (count l-str) flow-indent)\n         l-str-len (count l-str)\n         flow-indent (if (and (> flow-indent l-str-len) (= caller :list))\n                       ; If we don't think this could be a fn, indent minimally\n                       (if arg-1-indent flow-indent l-str-len)\n                       flow-indent)\n         actual-ind (+ ind l-str-len)\n         ; We could enable :comma? for lists, sets, vectors someday\n         zloc-seq (if (:comma? (caller options))\n                    (zmap-w-nl-comma identity zloc)\n                    (zmap-w-nl identity zloc))\n         _ (dbg-pr options\n                   \"fzprint-indent: caller:\" caller\n                   \"l-str-len:\" l-str-len\n                   \"ind:\" ind\n                   \"fn-style:\" fn-style\n                   \"arg-1-indent:\" arg-1-indent\n                   \"flow-indent:\" flow-indent\n                   \"actual-ind:\" actual-ind\n                   \"comma?\" (:comma? (caller options))\n                   \"zloc\" (zstring zloc)\n                   \"zloc-seq\" (map zstring zloc-seq))\n         coll-print (fzprint-seq options ind zloc-seq)\n         _ (dbg-pr options \"fzprint-indent: coll-print:\" coll-print)\n         indent-only-style (:indent-only-style (caller options))\n         ; If we have the possibility of :input-hang, then try if it is\n         ; configured.\n         already-hung? (when (and indent-only-style\n                                  (= indent-only-style :input-hang))\n                         (hang-zloc? (down* zloc)))\n         raw-indent (if (and arg-1-indent already-hung?)\n                      (- arg-1-indent ind)\n                      flow-indent)\n         indent raw-indent\n         coll-print-contains-nil? (contains-nil? coll-print)\n         _ (dbg-pr options\n                   \"fzprint-indent:\" (zstring zloc)\n                   \"ind:\" ind\n                   \"fn-style:\" fn-style\n                   \"indent-only-style:\" indent-only-style\n                   \"already-hung?:\" already-hung?\n                   \"arg-1-indent:\" arg-1-indent\n                   \"l-str-len:\" (count l-str)\n                   \"actual-ind:\" actual-ind\n                   \"raw-indent:\" raw-indent\n                   \"coll-print-contains-nil?:\" coll-print-contains-nil?\n                   \"indent:\" indent)\n         coll-print (when-not coll-print-contains-nil? coll-print)]\n     ; indent needs to adjust for the size of l-str-vec, since actual-ind\n     ; has l-str-vec in it so that indent-zmap knows where we are on the\n     ; line.  Just like fzprint-one-line needs one-line-ind, not ind.\n     (let [output (indent-zmap caller\n                               options\n                               ind\n                               actual-ind\n                               coll-print\n                               indent\n                               first-indent-only?)]\n       (dbg-pr options \"fzprint-indent: output:\" output)\n       output)))\n  ([caller l-str r-str options ind zloc fn-style arg-1-indent]\n   (fzprint-indent caller\n                   l-str\n                   r-str\n                   options\n                   ind\n                   zloc\n                   fn-style\n                   arg-1-indent\n                   nil)))\n\n(defn zfind-seq\n  \"Find the location, counting from zero, and counting every element \n  in the seq, of the first zthing?.  Return its index if it is found, \n  nil if not.\"\n  [zthing? zloc-seq]\n  (loop [nloc zloc-seq\n         i 0]\n    (when (not (nil? nloc))\n      (if (zthing? (first nloc)) i (recur (next nloc) (inc i))))))\n\n;;\n;; # Utilities to modify list printing in various ways\n;;\n\n;;\n;; Which fn-styles use :list {:indent n} instead of\n;; :list {:indent-arg n}\n;;\n\n(def body-set\n  #{:binding :arg1-> :arg2 :arg2-fn :arg2-pair :pair-fn :fn :arg1-body\n    :arg1-pair-body :none-body :noarg1-body :flow-body :arg2-extend-body\n    :arg1-force-nl-body})\n\n(def body-map\n  {:arg1-body :arg1,\n   :arg1-pair-body :arg1-pair,\n   :arg1-force-nl-body :arg1-force-nl,\n   :arg2-extend-body :arg2-extend,\n   :none-body :none,\n   :flow-body :flow,\n   :noarg1-body :noarg1,\n   :force-nl-body :force-nl})\n\n;;\n;; If the noarg1? value is set, this is the mapping for functions\n;; immediately below\n;; \n\n(def noarg1-set #{:noarg1 :arg1->})\n\n(def noarg1-map\n  {:arg1 :none,\n   :arg1-pair :pair-fn,\n   :arg1-extend :extend,\n   :arg2 :arg1,\n   :arg2-pair :arg1-pair})\n\n(defn noarg1\n  \"Set noarg1 in the options if it is the right fn-type.\"\n  [options fn-type]\n  (if (noarg1-set fn-type) (assoc options :no-arg1? true) options))\n\n; This is accessed prior to the -body being removed, so both types need to\n; be in here\n\n(def fn-style->caller\n  {:arg1-pair-body :pair,\n   :arg1-pair :pair,\n   :arg2-pair :pair,\n   :extend :extend,\n   :binding :binding,\n   :arg1-extend :extend,\n   :arg2-extend :extend,\n   :arg2-extend-body :extend,\n   :pair-fn :pair})\n\n(defn get-respect-indent\n  \"Given an options map, get the respect-nl?, respect-bl? and indent-only?\n  options from the caller's options, and if the caller doesn't define these,\n  use the values from the backup section of the options map. Return\n  [respect-nl? respect-bl? indent-only?]\"\n  ; Note that the routine make-caller exists, and see its use in fzprint*\n  ; That is a different way to solve this problem\n  ;\n  ; We just evaluate the things that need to be evaluated, since this is\n  ; called a *lot*!.\n  [options caller backup]\n  (let [caller-options (caller options)\n        respect-nl? (get caller-options :respect-nl? :undef)\n        respect-bl? (get caller-options :respect-bl? :undef)\n        indent-only? (get caller-options :indent-only? :undef)]\n    [(if (not= respect-nl? :undef) respect-nl? (:respect-nl? (backup options)))\n     (if (not= respect-bl? :undef) respect-bl? (:respect-bl? (backup options)))\n     (if (not= indent-only? :undef)\n       indent-only?\n       (:indent-only? (backup options)))]))\n\n(defn allow-one-line?\n  \"Should we allow this function to print on a single line?\"\n  [{:keys [fn-force-nl fn-gt2-force-nl fn-gt3-force-nl], :as options} len\n   fn-style]\n  (not (or (fn-force-nl fn-style)\n           (and (> len 3) (fn-gt2-force-nl fn-style))\n           (and (> len 4) (fn-gt3-force-nl fn-style))\n           (if-let [future-caller (fn-style->caller fn-style)]\n             (let [caller-map (future-caller options)]\n               (or (:flow? caller-map) (:force-nl? caller-map)))))))\n\n(defn modify-zloc\n  \"If the (caller options) has a value for :return-altered-zipper, then\n  examine the value.  It should be [<depth> <symbol> <fn>]. \n  If the <depth> is nil, any depth will do. If the\n  <symbol> is nil, any symbol will do.  If the <depth> and <symbol>\n  match, then the <fn> is called as (fn caller options zloc), and must\n  return a new zloc.\"\n  [caller options zloc]\n  (let [[depth trigger-symbol modify-fn :as return-altered-zipper-value]\n          (:return-altered-zipper (caller options))]\n    (dbg options\n         \"modify-zloc caller:\" caller\n         \"ztype\" (:ztype options)\n         \"return-altered-zipper-value:\" return-altered-zipper-value)\n    (if (or (not= (:ztype options) :zipper) (nil? return-altered-zipper-value))\n      zloc\n      (let [call-fn? (and (or (nil? depth) (= (:depth options) depth))\n                          (or (not trigger-symbol)\n                              (and (zsymbol? (zfirst zloc))\n                                   (= trigger-symbol (zsexpr (zfirst zloc)))))\n                          modify-fn)]\n        (dbg options \"modify-zloc: zloc\" (zstring zloc) \"call-fn?\" call-fn?)\n        (if call-fn?\n          (let [return (modify-fn caller options zloc)]\n            (dbg options \"modify-zloc return:\" (zstring return))\n            return)\n          zloc)))))\n\n(declare fzprint-guide)\n(declare any-zcoll?)\n(declare wrap-zmap)\n\n\n(defn fzprint-list*\n  \"Print a list, which might be a list or an anon fn.  \n  Lots of work to make a list look good, as that is typically code. \n  Presently all of the callers of this are :list or :vector-fn.\"\n  [caller l-str r-str\n   ; The options map can get re-written down a bit below, so don't get\n   ; anything with destructuring that might change with a rewritten  options\n   ; map!\n   {:keys [fn-map user-fn-map one-line? fn-style no-arg1? fn-force-nl fn-style\n           quote?],\n    :as options} ind zloc]\n  (dbg-s options\n         :next-inner\n         \"fzprint-list*: ind:\" ind\n         \"fn-style:\" fn-style\n         \"option-fn:\" (:option-fn (options caller))\n         \"rightcnt:\" (:rightcnt options))\n  ; We don't need to call get-respect-indent here, because all of the\n  ; callers of fzprint-list* define respect-nl?, respect-bl? and indent-only?\n  (let [max-length (get-max-length options)\n        zloc (modify-zloc caller options zloc)\n        ; zcount does (zmap identity zloc) which counts comments and the\n        ; newline after it, but no other newlines\n        len (zcount zloc)\n        zloc (if (> len max-length) (ztake-append max-length zloc '...) zloc)\n        len (zcount zloc)\n        l-str-len (count l-str)\n        indent (:indent (options caller))\n        ; NOTE WELL -- don't use arg-1-zloc (or arg-2-zloc, etc.) as\n        ; a condition, because it might well be legitimately nil when\n        ; formatting structures.\n        [pre-arg-1-style-vec arg-1-zloc arg-1-count zloc-seq :as first-data]\n          (fzprint-up-to-first-zloc caller options (+ ind l-str-len) zloc)\n        #_(prn \"fzprint-list* zloc-seq:\" (map zstring zloc-seq))\n        arg-1-coll? (not (or (zkeyword? arg-1-zloc) (zsymbol? arg-1-zloc)))\n        ; Use an alternative arg-1-indent if the fn-style is forced on input\n        ; and we don't actually have an arg-1 from which we can get an indent.\n        ; Now, we might want to allow arg-1-coll? to give us an arg-1-indent,\n        ; maybe, someday, so we could hang next to it.\n        ; But for now, this will do.\n        arg-1-indent-alt? (and arg-1-coll? fn-style)\n        ; Expand fn-str to really be the thing to look up in the fn-map\n        fn-str (if-not arg-1-coll? (zstring arg-1-zloc))\n        ; If we don't have a fn-str, then we might have a fn-type.\n        fn-type (when-not fn-str\n                  (cond (zlist? arg-1-zloc) :list\n                        (zmap? arg-1-zloc) :map\n                        (zvector? arg-1-zloc) :vector\n                        (zset? arg-1-zloc) :set\n                        :else nil))\n        ; If we have been told that we are in a quote?, and :quote has\n        ; something to say about what we should do for formatting, then\n        ; regardless of any fn-str, we will do it.\n        [fn-style fn-str fn-type]\n          (if (and quote?\n                   (or (not= (get fn-map :quote :none) :none)\n                       (not= (get user-fn-map :quote :none) :none)))\n            [nil nil :quote]\n            [fn-style fn-str fn-type])\n        ; Look up the fn-str in both fn-maps, and then if we don't get\n        ; something, look up the fn-type in both maps.\n        fn-style (or fn-style\n                     (fn-map fn-str)\n                     (user-fn-map fn-str)\n                     (fn-map fn-type)\n                     (user-fn-map fn-type))\n        ; if we don't have a function style after all of that, let's see\n        ; if we can get one by removing the namespacing.\n        ; This will not interact with the fn-type because if we have a\n        ; fn-str then we don't have a fn-type!\n        fn-style (if (and (not fn-style) fn-str)\n                   (fn-map (last (clojure.string/split fn-str #\"/\")))\n                   fn-style)\n        ; If we have a fn-str and not a fn-style, see if we have a default\n        ; for functions which were not set explicitly to :none\n        fn-style\n          (if (and fn-str (nil? fn-style)) (:default-not-none fn-map) fn-style)\n        ; If we have a fn-str and not a fn-style, see if we have a default\n        ; fn-style for every function which doesn't have one explicitly set\n        ; or where it was :none\n        fn-style (if (= fn-style :none) nil fn-style)\n        fn-style (if (and fn-str (nil? fn-style)) (:default fn-map) fn-style)\n        ; Do we have a [fn-style options] vector?\n        ; **** NOTE: The options map can change here, and if it does,\n        ; some of the things found in it above would have to change too!\n        options\n          ; The config-and-validate allows us to use :style in the options\n          ; map associated with a function. We don't need to validate\n          ; (second fn-style), as that was already done.  But this\n          ; allows us to use :style and other stuff.\n          ;\n          ; There could be two option maps in the fn-style vector:\n          ;   [:fn-style {:option :map}]\n          ;   [:fn-style {:zipper :option-map} {:structure :option-map}]\n          ;\n          ; Note that the :zipper and :structure aren't actually in the option\n          ; maps, these are just to indicate which is which!  If there are\n          ; two, the first is used for :zipper and the second for ;stucture.\n          ;\n          ; If there is only one, it is used for both.  If there are two,\n          ; then we use the appropriate one.\n          (if (vector? fn-style)\n            (first (zprint.config/config-and-validate \"fn-style:\"\n                                                      nil\n                                                      options\n                                                      (if (= (count fn-style) 2)\n                                                        ; only one option map\n                                                        (second fn-style)\n                                                        (if (= :zipper\n                                                               (:ztype options))\n                                                          (second fn-style)\n                                                          (nth fn-style 2)))\n                                                      nil ; validate?\n                   ))\n            options)\n        ; Do we have an option-fn to call and maybe get a new options\n        ; map.  We might have developed this from the options map in\n        ; the vector above.  In fact, we hope so, because otherwise we\n        ; are calling an option-fn on every list, which will be a\n        ; terrible performance hit!\n        option-fn (:option-fn (options caller))\n        ; Add a call-stack frame for where we are now.  This is tentative,\n        ; as we may need to update the fn-style later, since it isn't fully\n        ; finalized yet.  But we need to have something for a potential\n        ; option-fn to use.  If we keep this short (i.e., probably 8 or\n        ; less pairs), then it should be an array-map, not a hash-map,\n        ; which should be about as performant as a vector.\n        #_#_options\n          (assoc options\n            :call-stack (conj (:call-stack options)\n                              {:tag (ztag zloc),\n                               :caller caller,\n                               :zloc zloc,\n                               :fn-style fn-style,\n                               :zfirst-info (or fn-str fn-type)}))\n        [options new-options] (if option-fn\n                                (call-option-fn caller options option-fn zloc)\n                                [options nil])\n        _ (when option-fn\n            (dbg-pr options \"fzprint-list* option-fn new options\" new-options))\n        #_(println \"\\noption-fn:\" option-fn\n                   \"\\nfn-str:\" fn-str\n                   \"\\nfn-format options:\" (:fn-format (:vector options))\n                   \"\\nfn-style options:\" (:fn-style options)\n                   \"\\nfn-style local:\" fn-style\n                   \"\\nguide:\" (:guide options)\n                   \"\\ncall-stack:\" (:call-stack options))\n        ; If we calculated a new fn-style in the option-fn,\n        ; this will pick it up, else we will use the one that we figured\n        ; out above.\n        fn-style (or (:fn-style new-options) fn-style)\n        guide (or (:guide options) (guide-debug caller options))\n        options (dissoc options :guide :fn-style)\n        #_(println \"\\nguide after:\" guide \"\\nguide options:\" (:guide options))\n        _ (when guide (dbg-pr options \"fzprint-list* guide:\" guide))\n        ; If we messed with the options for any of two reasons, then find\n        ; new stuff.  This will probably change only zloc-seq because\n        ; of :respect-nl? or :indent-only?\n        [pre-arg-1-style-vec arg-1-zloc arg-1-count zloc-seq :as first-data]\n          (if (or (vector? fn-style) new-options)\n            (fzprint-up-to-first-zloc caller options (+ ind l-str-len) zloc)\n            first-data)\n        ; Get rid of the any vector surrounding the fn-style.\n        ; Don't do this too soon, as multiple things are driven off of\n        ; (vector? fn-style), above\n        fn-style (if (vector? fn-style) (first fn-style) fn-style)\n        ; Finish finding all of the interesting stuff in the first two\n        ; elements\n        [pre-arg-2-style-vec arg-2-zloc arg-2-count _ :as second-data]\n          ; The ind is wrong, need arg-1-indent, but we don't have it yet.\n          (fzprint-up-to-next-zloc caller\n                                   options\n                                   ;(+ ind l-str-len)\n                                   (+ ind indent)\n                                   first-data)\n        ; This len doesn't include newlines or other whitespace or\n        len (zcount-zloc-seq-nc-nws zloc-seq)\n        #_(prn \"fzprint-list* pre-arg-1-style-vec:\" pre-arg-1-style-vec\n               \"pre-arg-2-style-vec:\" pre-arg-2-style-vec\n               \"arg-1-zloc:\" (zstring arg-1-zloc)\n               \"arg-2-zloc:\" (zstring arg-2-zloc)\n               \"arg-1-count:\" arg-1-count\n               \"arg-2-count:\" arg-2-count\n               \"len:\" len)\n        ; If fn-style is :replace-w-string, then we have an interesting\n        ; set of things to do.\n        ;\n        [options arg-1-zloc l-str l-str-len r-str len zloc-seq]\n          (if (and (= fn-style :replace-w-string)\n                   (:replacement-string (options caller))\n                   (= len 2))\n            [(assoc (update-in options [caller] dissoc :replacement-string)\n               :rightcnt (dec (:rightcnt options))) arg-2-zloc\n             (:replacement-string (options caller))\n             (count (:replacement-string (options caller))) \"\" 1\n             (remove-one zloc-seq arg-1-count)]\n            [options arg-1-zloc l-str l-str-len r-str len zloc-seq])\n        #_(prn \"fzprint-list*: l-str:\" l-str\n               \"l-str-len:\" l-str-len\n               \"len:\" len\n               \"fn-style:\" fn-style)\n        ; Get indents which might have changed if the options map was\n        ; re-written by the function style being a vector.\n        indent (:indent (options caller))\n        indent-arg (:indent-arg (options caller))\n        indent-only? (:indent-only? (options caller))\n        ; set indent based on fn-style\n        indent (if (body-set fn-style) indent (or indent-arg indent))\n        indent (+ indent (dec l-str-len))\n        ; If we have a :guide value, then we are going to use it no\n        ; matter the fn-style we had before.  Note that we kept the\n        ; original fn-style around long enough to get the indent figured\n        ; out, immediately above.  And we went to :guided in time to\n        ; cause one-line-ok? to be false, immediately below.\n        fn-style (if guide :guided fn-style)\n        one-line-ok? (allow-one-line? options len fn-style)\n        one-line-ok? (when-not indent-only? one-line-ok?)\n        one-line-ok? (if (= fn-style :guided) nil one-line-ok?)\n        one-line-ok? (if (not= pre-arg-1-style-vec :noseq) nil one-line-ok?)\n        ; If this is :binding, then the fn-gt2-force-nl applies to :binding\n        ; for the number of things in the let (or whatever), and the\n        ; otherwise unused fn-type of :binding-vector is checked to see if\n        ; it should force us to not do one line as well.\n        one-line-ok?\n          (if (= fn-style :binding)\n            (and one-line-ok?\n                 (allow-one-line? options (zcount arg-2-zloc) :binding-vector))\n            one-line-ok?)\n        one-line-ok? (if (:force-nl? (options caller)) nil one-line-ok?)\n        ; remove -body from fn-style if it was there\n        fn-style (or (body-map fn-style) fn-style)\n        ; All styles except :hang, :flow, and :flow-body and :binding need\n        ; three elements minimum. We could put this in the fn-map,\n        ; but until there are more than three (well four) exceptions, seems\n        ; like too much mechanism.\n        fn-style (if (#{:hang :flow :flow-body :binding :replace-w-string\n                        :guided}\n                      fn-style)\n                   fn-style\n                   (if (< len 3) nil fn-style))\n        ;fn-style (if (= fn-style :hang) fn-style (if (< len 3) nil fn-style))\n        fn-style (if no-arg1? (or (noarg1-map fn-style) fn-style) fn-style)\n        ; no-arg? only affect one level down...\n        options (if no-arg1? (dissoc options :no-arg1?) options)\n        ; If l-str isn't one char, create an indent adjustment.  Largely\n        ; for anonymous functions, which otherwise would have their own\n        ; :anon config to parallel :list, which would be just too much\n        indent-adj (dec l-str-len)\n        ; The default indent is keyed off of whether or not the first thing\n        ; in the list is itself a list, since that list could evaluate to a\n        ; fn.  You can't replace the zlist? with arg-1-coll?, since if you do\n        ; multi-arity functions aren't done right, since the argument vector\n        ; is a coll?, and so arg-1-coll? is set, and then you get a two space\n        ; indent for multi-arity functions, which is wrong.\n        ; We could, conceivably, use zvector? here to specifically handle\n        ; multi-arity functions.  Or we could remember we are in a defn and\n        ; do something special there, or we could at least decide that we\n        ; were in code when we did this zlist? thing, since that is all about\n        ; code.  That wouldn't work if it was the top-level form, but would\n        ; otherwise.\n        default-indent (if (zlist? arg-1-zloc) indent l-str-len)\n        ; Note that much is driven from arg-1-indent, since if this is nil\n        ; the assumption is that the first argument is a collection, and that\n        ; the indent should be l-str-len.  See local-indent below.\n        arg-1-indent (if-not arg-1-coll? (+ ind (inc l-str-len) (count fn-str)))\n        ; If we don't have an arg-1-indent, and we noticed that the inputs\n        ; justify using an alternative, then use the alternative.\n        arg-1-indent (or arg-1-indent (when arg-1-indent-alt? (+ indent ind)))\n        ; If we have anything in pre-arg-2-style-vec, then we aren't hanging\n        ; anything and we replace any existing arg-1-indent with a normal\n        ; one.\n        arg-1-indent (if (= pre-arg-2-style-vec :noseq)\n                       arg-1-indent\n                       (when arg-1-indent (+ indent ind)))\n        ; Tell people inside that we are in code.\n        ; We don't catch places where the first thing in a list is\n        ; a collection or a seq which yields a function.\n        options (if (not arg-1-coll?)\n                  ; quote? might have cancelled out fn-str, but if we still\n                  ; want to think of ourselves as in-code? then use\n                  ; (or fn-str quote?) instead of fn-str, below.\n                  ; This would affect the default map sorting and how\n                  ; condp is formatted, and probably not much else.\n                  (assoc options :in-code? fn-str)\n                  options)\n        options (assoc options :pdepth (inc (long (or (:pdepth options) 0))))\n        _ (when (:dbg-hang options)\n            (println (dots (:pdepth options)) \"fzs\" fn-str))\n        new-ind (+ indent ind)\n        one-line-ind (+ l-str-len ind)\n        options (if fn-style (dissoc options :fn-style) options)\n        ; Update the call stack with the final fn-style we used\n        ; Note that we already have a call stack frame (which may have been\n        ; altered by the option-fn), so we have to take what is there\n        ; and, possibly, change the fn-style.\n        #_#_call-stack (:call-stack options)\n        #_#_options\n          (if (not= fn-style (:fn-style (first call-stack)))\n            (assoc options\n              :call-stack (conj (next call-stack)\n                                (assoc (first call-stack) :fn-style fn-style)))\n            options)\n        loptions (not-rightmost options)\n        roptions options\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        ; Fudge the ind a bit for r-str-vec for anon fns: #()\n        r-str-vec (rstr-vec options (+ ind (max 0 (dec l-str-len))) zloc r-str)\n        _ (dbg-pr\n            options\n            \"fzprint-list*:\" (zstring zloc)\n            \"fn-str\" fn-str\n            \"fn-style:\" fn-style\n            \"len:\" len\n            \"ind:\" ind\n            \"indent:\" indent\n            \"default-indent:\" default-indent\n            \"one-line-ok?\" one-line-ok?\n            \"arg-1-coll?\" arg-1-coll?\n            \"arg-1-indent:\" arg-1-indent\n            \"arg-1-zloc:\" (zstring arg-1-zloc)\n            \"pre-arg-1-style-vec:\" pre-arg-1-style-vec\n            \"l-str:\" (str \"'\" l-str \"'\")\n            \"l-str-len:\" l-str-len\n            \"r-str-vec:\" r-str-vec\n            \"indent-adj:\" indent-adj\n            \"one-line?\" one-line?\n            \"indent-only?\" indent-only?\n            \"in-code?\" (:in-code? options)\n            \"rightcnt:\" (:rightcnt options)\n            \"replacement-string:\" (:replacement-string (caller options))\n            \"force-nl?\" (:force-nl? (caller options))\n            \":ztype:\" (:ztype options))\n        one-line (if (and (zero? len) (= pre-arg-1-style-vec :noseq))\n                   :empty\n                   (when one-line-ok?\n                     (fzprint-one-line options one-line-ind zloc-seq)))]\n    (cond\n      (= one-line :empty) (concat-no-nil l-str-vec r-str-vec)\n      indent-only? (concat-no-nil l-str-vec\n                                  (fzprint-indent caller\n                                                  l-str\n                                                  r-str\n                                                  options\n                                                  ind\n                                                  zloc\n                                                  fn-style\n                                                  arg-1-indent)\n                                  r-str-vec)\n      one-line (concat-no-nil l-str-vec one-line r-str-vec)\n      ; Don't put anything other than :guide here at the beginning before\n      ; we check one-line?\n      (= fn-style :guided)\n        (let [zloc-count (count zloc-seq)\n              ; If we have something other than a collection in the first\n              ; position, use the indent we figured out above, else use\n              ; what is probably an indent of 1\n              local-indent\n                (if arg-1-indent indent (+ default-indent indent-adj))]\n          #_(prn \":guided!\")\n          (concat-no-nil l-str-vec\n                         (fzprint-guide caller\n                                        options\n                                        ; this is where we are w/out any indent\n                                        ind\n                                        ; this is where we are with the l-str\n                                        one-line-ind\n                                        local-indent\n                                        guide\n                                        zloc-seq)\n                         r-str-vec))\n      ; If we are in :one-line? mode, then either we called fzprint-one-line,\n      ; above, or it was a guide, and we just did it and moved on.  If\n      ; we get here and we are in one-line? mode, then we have failed.\n      ; Note that the (dbg ...) returns nil regardless of whether or not\n      ; it is enabled, which actually affects the control flow!\n      one-line?\n        (dbg options \"fzprint-list*:\" fn-str \" one-line did not work!!!\")\n      ; =================================\n      ; All additional fn-styles go here\n      ; =================================\n      (dbg options \"fzprint-list*: fn-style:\" fn-style) nil\n      (and (= len 0) (= pre-arg-1-style-vec :noseq)) (concat-no-nil l-str-vec\n                                                                    r-str-vec)\n      #_#_indent-only?\n        (concat-no-nil l-str-vec\n                       (fzprint-indent caller\n                                       l-str\n                                       r-str\n                                       options\n                                       ind\n                                       zloc\n                                       fn-style\n                                       arg-1-indent)\n                       r-str-vec)\n      (= len 1)\n        ; While len is one, don't assume that there is actually only one\n        ; thing to print and use fzprint*.  len only counts the non-comment\n        ; and non-nl elements, and there might be other things to print.\n        (concat-no-nil l-str-vec\n                       (fzprint-flow-seq roptions one-line-ind zloc-seq)\n                       r-str-vec)\n      ; In general, we don't have a fn-style if we have less than 3 elements.\n      ; However, :binding is allowed with any number up to this point, so we\n      ; have to check here.  :binding is actually allowed with at least two\n      ; elements, the third through n are optional.\n      (and (= fn-style :binding) (> len 1) (zvector? arg-2-zloc))\n        (let [[hang-or-flow binding-style-vec]\n                (fzprint-hang-unless-fail loptions\n                                          (or arg-1-indent (+ indent ind))\n                                          (+ indent ind)\n                                          fzprint-binding-vec\n                                          arg-2-zloc)\n              binding-style-vec (if (= hang-or-flow :hang)\n                                  (concat-no-nil [[\" \" :none :whitespace 14]]\n                                                 binding-style-vec)\n                                  binding-style-vec)]\n          (concat-no-nil\n            l-str-vec\n            pre-arg-1-style-vec\n            ; TODO: get rid of inc ind\n            (fzprint* loptions (inc ind) arg-1-zloc)\n            pre-arg-2-style-vec\n            binding-style-vec\n            (concat-no-nil\n              ; Here we use options, because fzprint-flow-seq\n              ; will sort it out.  It will also handle an\n              ; empty zloc-seq by returning :noseq, so we\n              ; don't have to check for (> len 2) before\n              ; we call it.\n              (fzprint-hang-remaining caller\n                                      options\n                                      (+ indent ind)\n                                      (+ indent ind)\n                                      (get-zloc-seq-right second-data)\n                                      :binding)\n              #_(fzprint-flow-seq options\n                                  (+ indent ind)\n                                  (get-zloc-seq-right second-data)\n                                  :force-nl\n                                  :newline-first)\n              r-str-vec)))\n      (= fn-style :pair-fn)\n        (let [zloc-seq-right-first (get-zloc-seq-right first-data)\n              zloc-count (count zloc-seq)]\n          (concat-no-nil l-str-vec\n                         pre-arg-1-style-vec\n                         (fzprint* loptions (inc ind) arg-1-zloc)\n                         ; Removed the assoc-in 7/26/21 since I can't\n                         ; see that it could be used.  Maybe it is left\n                         ; over from when a zloc was passed down and not\n                         ; a zloc-seq?\n                         (fzprint-hang options\n                                       #_(assoc-in options\n                                           [:pair :respect-nl?]\n                                           (:respect-nl? (caller options)))\n                                       :pair-fn\n                                       arg-1-indent\n                                       (+ indent ind)\n                                       fzprint-pairs\n                                       zloc-count\n                                       zloc-seq-right-first)\n                         r-str-vec))\n      (= fn-style :extend)\n        (let [zloc-seq-right-first (get-zloc-seq-right first-data)]\n          (concat-no-nil\n            l-str-vec\n            pre-arg-1-style-vec\n            (fzprint* loptions (inc ind) arg-1-zloc)\n            (prepend-nl\n              options\n              (+ indent ind)\n              ; I think fzprint-pairs will sort out which\n              ; is and isn't the rightmost because of\n              ; two-up\n              (fzprint-extend options (+ indent ind) zloc-seq-right-first))\n            r-str-vec))\n      ; needs (> len 2) but we already checked for that above in fn-style\n      (or (and (= fn-style :fn) (not (zlist? arg-2-zloc)))\n          (= fn-style :arg2)\n          (= fn-style :arg2-fn)\n          (= fn-style :arg2-pair)\n          (= fn-style :arg2-extend))\n        (let [[pre-arg-3-style-vec arg-3-zloc arg-3-count _ :as third-data]\n                ; The ind is wrong, need arg-1-indent, but we don't have it yet.\n                (fzprint-up-to-next-zloc caller\n                                         options\n                                         ; This is probably wrong\n                                         ; (+ ind l-str-len)\n                                         (+ ind indent)\n                                         second-data)\n              #_(prn \"pre-arg-1-style-vec:\" pre-arg-1-style-vec)\n              #_(prn \"arg-1-zloc:\" (zstring arg-1-zloc))\n              #_(prn \"pre-arg-2-style-vec:\" pre-arg-2-style-vec)\n              #_(prn \"arg-2-zloc:\" (zstring arg-2-zloc))\n              #_(prn \"pre-arg-3-style-vec:\" pre-arg-3-style-vec)\n              #_(prn \"arg-3-zloc:\" (zstring arg-3-zloc))\n              zloc-seq-right-third (get-zloc-seq-right third-data)\n              second-element (fzprint-hang-one\n                               caller\n                               (if (not arg-3-zloc) options loptions)\n                               ; This better not be nil\n                               arg-1-indent\n                               (+ indent ind)\n                               arg-2-zloc)\n              [line-count max-width]\n                ; arg-1-indent better not be nil here either\n                (style-lines loptions arg-1-indent second-element)\n              first-three\n                (when second-element\n                  (let [first-two-wo-pre-arg-1\n                          (concat-no-nil\n                            (fzprint* loptions (+ indent ind) arg-1-zloc)\n                            pre-arg-2-style-vec\n                            second-element\n                            pre-arg-3-style-vec)\n                        local-options\n                          (if (not zloc-seq-right-third) options loptions)\n                        first-two-one-line?\n                          (fzfit-one-line local-options\n                                          (style-lines local-options\n                                                       (+ ind indent)\n                                                       first-two-wo-pre-arg-1))\n                        ; Add pre-arg-1-style-vec back in, which might push\n                        ; it to two lines (or many lines), but that\n                        ; doesn't matter.\n                        first-two (concat-no-nil pre-arg-1-style-vec\n                                                 first-two-wo-pre-arg-1)]\n                    (when-not first-two-one-line?\n                      (dbg-pr options\n                              \"fzprint-list*: :arg2-* first two didn't fit:\"\n                              first-two))\n                    (concat-no-nil\n                      first-two\n                      (if (or (= fn-style :arg2)\n                              (= fn-style :arg2-pair)\n                              (= fn-style :arg2-fn)\n                              (= fn-style :arg2-extend)\n                              (and (zvector? arg-3-zloc) (= line-count 1)))\n                        (fzprint-hang-one\n                          caller\n                          (if (not zloc-seq-right-third) options loptions)\n                          (if (and (= pre-arg-3-style-vec :noseq)\n                                   first-two-one-line?)\n                            ; hang it if possible\n                            max-width\n                            ; flow it\n                            (+ indent ind))\n                          (+ indent ind)\n                          arg-3-zloc)\n                        (prepend-nl options\n                                    (+ indent ind)\n                                    (fzprint* (if (not zloc-seq-right-third)\n                                                options\n                                                loptions)\n                                              (+ indent ind)\n                                              arg-3-zloc))))))]\n          (when first-three\n            (if (not zloc-seq-right-third)\n              ; if nothing after the third thing, means just three things\n              (concat-no-nil l-str-vec first-three r-str-vec)\n              ; more than three things\n              (concat-no-nil\n                l-str-vec\n                first-three\n                (cond (= fn-style :arg2-pair)\n                        (prepend-nl options\n                                    (+ indent ind)\n                                    (fzprint-pairs options\n                                                   (+ indent ind)\n                                                   zloc-seq-right-third))\n                      (= fn-style :arg2-extend)\n                        (prepend-nl options\n                                    (+ indent ind)\n                                    (fzprint-extend options\n                                                    (+ indent ind)\n                                                    zloc-seq-right-third))\n                      :else (fzprint-hang-remaining caller\n                                                    ;options\n                                                    (if (= fn-style :arg2-fn)\n                                                      (assoc options\n                                                        :fn-style :fn)\n                                                      options)\n                                                    (+ indent ind)\n                                                    ; force flow\n                                                    (+ indent ind)\n                                                    zloc-seq-right-third\n                                                    fn-style))\n                r-str-vec))))\n      (and (= fn-style :arg1-mixin) (> len 3))\n        (let [[pre-arg-3-style-vec arg-3-zloc arg-3-count _ :as third-data]\n                (fzprint-up-to-next-zloc caller\n                                         options\n                                         (+ ind indent)\n                                         second-data)\n              [pre-arg-4-style-vec arg-4-zloc arg-4-count _ :as fourth-data]\n                (fzprint-up-to-next-zloc caller\n                                         options\n                                         (+ ind indent)\n                                         third-data)\n              arg-vec-index (or (zfind-seq #(or (zvector? %)\n                                                (when (zlist? %)\n                                                  (zvector? (zfirst %))))\n                                           zloc-seq)\n                                0)\n              doc-string? (string? (get-sexpr-or-nil options arg-3-zloc))\n              mixin-start (if doc-string? arg-4-count arg-3-count)\n              mixin-length (- arg-vec-index mixin-start 1)\n              mixins? (pos? mixin-length)\n              doc-string (when doc-string?\n                           (fzprint-hang-one caller\n                                             loptions\n                                             (+ indent ind)\n                                             ; force flow\n                                             (+ indent ind)\n                                             arg-3-zloc))\n              #_(prn \":arg1-mixin: doc-string?\" doc-string?\n                     \"mixin-start:\" mixin-start\n                     \"mixin-length:\" mixin-length\n                     \"mixins?\" mixins?\n                     \"arg-vec-index:\" arg-vec-index\n                     \"doc-string\" doc-string\n                     \"arg-1-count:\" arg-1-count\n                     \"arg-1-zloc:\" (zstring arg-1-zloc)\n                     \"arg-2-count:\" arg-2-count\n                     \"arg-2-zloc:\" (zstring arg-2-zloc)\n                     \"arg-3-count:\" arg-3-count\n                     \"arg-3-zloc:\" (zstring arg-3-zloc)\n                     \"arg-4-count:\" arg-4-count\n                     \"arg-4-zloc:\" (zstring arg-4-zloc))\n              ; Have to deal with no arg-vec-index!!\n              mixins\n                (when mixins?\n                  (let [mixin-sentinal (fzprint-hang-one\n                                         caller\n                                         loptions\n                                         (+ indent ind)\n                                         ; force flow\n                                         (+ indent ind)\n                                         (if doc-string? arg-4-zloc arg-3-zloc))\n                        [line-count max-width]\n                          (style-lines loptions (+ indent ind) mixin-sentinal)]\n                    (concat-no-nil\n                      (if doc-string? pre-arg-4-style-vec pre-arg-3-style-vec)\n                      mixin-sentinal\n                      (fzprint-hang-remaining\n                        caller\n                        loptions\n                        ; Apparently hang-remaining gives\n                        ; you a\n                        ; space after the current thing,\n                        ; so we\n                        ; need to account for it now,\n                        ; since\n                        ; max-width is the end of the\n                        ; current\n                        ; thing\n                        (inc max-width)\n                        (dec (+ indent indent ind))\n                        (get-zloc-seq-right\n                          (if doc-string fourth-data third-data))\n                        fn-style\n                        mixin-length))))]\n          (concat-no-nil\n            l-str-vec\n            pre-arg-1-style-vec\n            (fzprint* loptions (inc ind) arg-1-zloc)\n            pre-arg-2-style-vec\n            (fzprint-hang-one caller\n                              (if (= len 2) options loptions)\n                              arg-1-indent\n                              (+ indent ind)\n                              arg-2-zloc)\n            (cond (and doc-string? mixins?) (concat-no-nil pre-arg-3-style-vec\n                                                           doc-string\n                                                           (remove-one-newline\n                                                             mixins))\n                  doc-string? (concat-no-nil pre-arg-3-style-vec doc-string)\n                  mixins? (remove-one-newline mixins)\n                  :else :noseq)\n            (fzprint-hang-remaining\n              caller\n              (noarg1 options fn-style)\n              (+ indent ind)\n              ; force flow\n              (+ indent ind)\n              (nthnext zloc-seq\n                       (if mixins?\n                         arg-vec-index\n                         (if doc-string? arg-4-count arg-3-count)))\n              fn-style)\n            r-str-vec))\n      (or (= fn-style :arg1-pair)\n          (= fn-style :arg1)\n          (= fn-style :arg1-force-nl)\n          (= fn-style :arg1->))\n        (concat-no-nil\n          l-str-vec\n          pre-arg-1-style-vec\n          (fzprint* loptions (inc ind) arg-1-zloc)\n          pre-arg-2-style-vec\n          (fzprint-hang-one caller\n                            (if (= len 2) options loptions)\n                            arg-1-indent\n                            (+ indent ind)\n                            arg-2-zloc)\n          ; then either pair or remaining-seq\n          ; we don't do a full hanging here.\n          ; We wouldn't be here if len < 3\n          (if (= fn-style :arg1-pair)\n            (prepend-nl options\n                        (+ indent ind)\n                        (fzprint-pairs options\n                                       (+ indent ind)\n                                       (get-zloc-seq-right second-data)))\n            (fzprint-hang-remaining caller\n                                    (noarg1 options fn-style)\n                                    (+ indent ind)\n                                    ; force flow\n                                    (+ indent ind)\n                                    (get-zloc-seq-right second-data)\n                                    fn-style))\n          r-str-vec)\n      ; we know that (> len 2) if fn-style not= nil\n      (= fn-style :arg1-extend)\n        (let [zloc-seq-right-second (get-zloc-seq-right second-data)]\n          (cond (zvector? arg-2-zloc)\n                  ; This will put the second argument (a vector) on a different\n                  ; line than the function name.  No known uses for this code\n                  ; as of 7/20/19.  It does work with :respect-nl and has tests.\n                  (concat-no-nil\n                    l-str-vec\n                    pre-arg-1-style-vec\n                    (fzprint* loptions (+ indent ind) arg-1-zloc)\n                    pre-arg-2-style-vec\n                    (prepend-nl options\n                                (+ indent ind)\n                                (fzprint* loptions (+ indent ind) arg-2-zloc))\n                    (prepend-nl options\n                                (+ indent ind)\n                                (fzprint-extend options\n                                                (+ indent ind)\n                                                zloc-seq-right-second))\n                    r-str-vec)\n                :else (concat-no-nil\n                        l-str-vec\n                        pre-arg-1-style-vec\n                        (fzprint* loptions (inc ind) arg-1-zloc)\n                        pre-arg-2-style-vec\n                        (fzprint-hang-one caller\n                                          (if (= len 2) options loptions)\n                                          arg-1-indent\n                                          (+ indent ind)\n                                          arg-2-zloc)\n                        (prepend-nl options\n                                    (+ indent ind)\n                                    (fzprint-extend options\n                                                    (+ indent ind)\n                                                    zloc-seq-right-second))\n                        r-str-vec)))\n      (or (= fn-style :wrap) (:wrap? (caller options)))\n        (let [new-ind (+ indent ind)\n              coll-print (fzprint-seq options new-ind zloc-seq)\n              _ (dbg-pr options \"fzprint-list*: :wrap coll-print:\" coll-print)\n              wrap-coll? (:wrap-coll? (caller options))]\n          ; Regular Pprocessing\n          (if (and (not wrap-coll?) (any-zcoll? options new-ind zloc))\n            (concat-no-nil\n              l-str-vec\n              (apply concat-no-nil\n                (precede-w-nl options new-ind coll-print :no-nl-first))\n              r-str-vec)\n            ; Since there are either no collections in this vector\n            ; or ; set ; or ; whatever, or if there are,\n            ; it is ok to wrap them, ; print it\n            ; wrapped on the same line as much as possible:\n            ;           [a b c d e f\n            ;            g h i j]\n            (concat-no-nil\n              l-str-vec\n              (do\n                (dbg-pr options \"fzprint-list*: wrap coll-print:\" coll-print)\n                (wrap-zmap caller options (+ ind l-str-len) new-ind coll-print))\n              r-str-vec)))\n      ; Unspecified seq, might be a fn, might not.\n      ; If (first zloc) is a seq, we won't have an\n      ; arg-1-indent.  In that case, just flow it\n      ; out with remaining seq.  Since we already\n      ; know that it won't fit on one line.  If it\n      ; might be a fn, try hanging and flow and do\n      ; what we like better.  Note that default-indent\n      ; might be 1 here, which means that we are pretty\n      ; sure that the (zfirst zloc) isn't a function\n      ; and we aren't doing code.\n      ;\n      :else (concat-no-nil\n              l-str-vec\n              pre-arg-1-style-vec\n              ; Can't use arg-1-zloc here as the if test, because when\n              ; formatting structures, arg-1-zloc might well be nil!\n              (if (not (zero? len))\n                (fzprint* loptions (+ l-str-len ind) arg-1-zloc)\n                :noseq)\n              ; Same here -- can't use arg-1-zloc as if test!!\n              (if (not (zero? len))\n                (let [zloc-seq-right-first (get-zloc-seq-right first-data)]\n                  (if zloc-seq-right-first\n                    ; We have something else to format after arg-1-zloc\n                    (if #_(and arg-1-indent (not= fn-style :flow))\n                      arg-1-indent\n                      ; Use fzprint-hang-remaining for :flow as well, with\n                      ; hindent = findent to force flow, so that constant\n                      ; pairing is done for :flow functions.\n                      (let [result (fzprint-hang-remaining\n                                     caller\n                                     (noarg1 options fn-style)\n                                     #_arg-1-indent\n                                     (if (= fn-style :flow)\n                                       ; If the fn-type is :flow, make the\n                                       ; hindent = findent so that it will\n                                       ; flow\n                                       (+ indent ind)\n                                       arg-1-indent)\n                                     ; Removed indent-adj because it caused\n                                     ; several problems, issue #163\n                                     (+ indent ind #_indent-adj)\n                                     ; Can't do this, because\n                                     ; hang-remaining\n                                     ; doesn't take a seq\n                                     zloc-seq-right-first\n                                     ;(znthnext zloc 0)\n                                     fn-style)]\n                        (dbg-pr options\n                                \"fzprint-list*: r-str-vec:\" r-str-vec\n                                \"result:\" result)\n                        result)\n                      ; This is collection as the first thing. Used to handle\n                      ; :flow here as well, but now it goes through\n                      ; fzprint-hang-remaining with hindent = findent so that\n                      ; constant pairing works for flow.\n                      (let [local-indent (+ default-indent ind indent-adj)]\n                        (concat-no-nil ;[[(str \"\\n\" (blanks local-indent)) :none\n                                       ;:indent]]\n                          (fzprint-flow-seq (noarg1 options fn-style)\n                                            local-indent\n                                            ;(nthnext (zmap identity\n                                            ;zloc) 1)\n                                            zloc-seq-right-first\n                                            :force-nl\n                                            :newline-first))))\n                    ; Nothing else after arg-1-zloc\n                    :noseq))\n                :noseq)\n              r-str-vec))))\n\n(defn fzprint-list\n  \"Pretty print and focus style a :list element.\"\n  [options ind zloc]\n  (dbg-pr options \"fzprint-list\")\n  (fzprint-list* :list \"(\" \")\" (rightmost options) ind zloc))\n\n(defn fzprint-anon-fn\n  \"Pretty print and focus style a fn element.\"\n  [options ind zloc]\n  (dbg-pr options \"fzprint-anon-fn\")\n  (fzprint-list* :list \"#(\" \")\" (rightmost options) ind zloc))\n\n(defn any-zcoll?\n  \"Return true if there are any collections in the collection.\"\n  [options ind zloc]\n  (let [coll?-seq (zmap zcoll? zloc)] (reduce #(or %1 %2) nil coll?-seq)))\n\n;;\n;; # Put things on the same line\n;;\n\n(defn wrap-zmap\n  \"Given the output from fzprint-seq, which is a style-vec in\n  the making without spacing, but with extra [] around the elements,\n  wrap the elements to the right margin. cur-ind is where we are now,\n  and ind is where we should be after a newline.\"\n  [caller\n   {:keys [width rightcnt],\n    {:keys [wrap-after-multi? respect-nl?]} caller,\n    :as options} cur-ind ind coll-print]\n  #_(prn \"wrap-zmap:\" coll-print)\n  (let [last-index (dec (count coll-print))\n        rightcnt (fix-rightcnt rightcnt)]\n    (loop [cur-seq coll-print\n           cur-ind cur-ind\n           index 0\n           previous-newline? false\n           ; transient here slows things down, interestingly enough\n           out []]\n      (if-not cur-seq\n        (do (dbg-pr options \"wrap-zmap: out:\" out) out)\n        (let [next-seq (first cur-seq)]\n          (when next-seq\n            (let [multi? (> (count (first cur-seq)) 1)\n                  this-seq (first cur-seq)\n                  _ (log-lines options \"wrap-zmap:\" ind this-seq)\n                  _ (dbg-pr options \"wrap-zmap: ind:\" ind \"this-seq:\" this-seq)\n                  [linecnt max-width lines] (style-lines options ind this-seq)\n                  last-width (last lines)\n                  len (- last-width ind)\n                  len (max 0 len)\n                  newline? (= (nth (first this-seq) 2) :newline)\n                  comment?\n                    (if respect-nl? nil (= (nth (first this-seq) 2) :comment))\n                  comment-inline? (if respect-nl?\n                                    nil\n                                    (= (nth (first this-seq) 2)\n                                       :comment-inline))\n                  width (if (= index last-index) (- width rightcnt) width)\n                  ; need to check size, and if one line and fits, should fit\n                  fit? (and (not newline?)\n                            (or (zero? index) (not comment?))\n                            (or (zero? index)\n                                (and (if multi? (= linecnt 1) true)\n                                     (<= (+ cur-ind len) width))))\n                  new-ind (cond\n                            ; Comments cause an overflow of the size\n                            (or comment? comment-inline?) (inc width)\n                            (and multi? (> linecnt 1) (not wrap-after-multi?))\n                              width\n                            fit? (+ cur-ind len 1)\n                            newline? ind\n                            :else (+ ind len 1))]\n              #_(prn \"------ this-seq:\" this-seq)\n              #_(println\n                  \"lines:\" lines\n                  \"\\nlinecnt:\" linecnt\n                  \"\\nmulti?\" multi?\n                  \"\\nnewline?:\" newline?\n                  \"\\ncomment?\" comment?\n                  \"\\ncomment-inline?\" comment-inline?\n                  \"\\nprevious-newline?:\" previous-newline?\n                  \"\\nlinecnt:\" linecnt\n                  \"\\nmax-width:\" max-width\n                  \"\\nlast-width:\" last-width\n                  \"\\nlen:\" len\n                  \"\\ncur-ind:\" cur-ind\n                  \"\\nnew-ind:\" new-ind\n                  \"\\nwidth:\" width\n                  \"\\nfit?\" fit?)\n              ; need to figure out what to do with a comment,\n              ; want to force next line to not fit whether or not\n              ; this line fit.  Comments are already multi-line, and\n              ; it is really not clear what multi? does in this routine\n              (recur\n                (next cur-seq)\n                new-ind\n                (inc index)\n                newline?\n                ; TODO: concat-no-nil fails here, why?\n                (concat\n                  out\n                  (if fit?\n                    (if (not (zero? index))\n                      (concat-no-nil [[\" \" :none :whitespace 15]] this-seq)\n                      this-seq)\n                    (if newline?\n                      [[(str \"\\n\"\n                             ; Fix sets and vectors to have terminal right thing\n                             ; after a comment or newline be indented like other\n                             ; elements are.  Used to just be (blanks (dec\n                             ; new-ind))\n                             ; now the if checks to see if we are at the end,\n                             ; and does new-ind, which is like the other stuff.\n                             ; But wrong for the future of where we are going,\n                             ; as it happens.\n                             (blanks\n                               ; Figure out what the next thing is\n                               (let [this-seq-next (first (next cur-seq))\n                                     newline-next?\n                                       (when this-seq-next\n                                         (= (nth (first this-seq-next) 2)\n                                            :newline))]\n                                 ; If the next thing is a newline,\n                                 ; don't put any blanks on this line\n                                 (if newline-next? 0 (dec new-ind))))) :none\n                        :indent 21]]\n                      ; Unclear if a prepend-nl would be useful here...\n                      (if previous-newline?\n                        (concat-no-nil [[\" \" :none :whitespace 16]] this-seq)\n                        (prepend-nl options ind this-seq)))))))))))))\n\n(defn count-comments-and-newlines\n  \"Given a seq from fzprint-seq, count the newlines and contiguous comments\n  at the beginning of the list.  A comment preceded by a newline or comment\n  doesn't count.\"\n  [coll-print]\n  (loop [cur-seq coll-print\n         previous-comment? false\n         previous-newline? false\n         comment-and-newline-count 0]\n    (if-not cur-seq\n      comment-and-newline-count\n      (let [element-type (nth (ffirst cur-seq) 2)\n            comment? (or (= element-type :comment)\n                         (= element-type :comment-inline))\n            newline? (= element-type :newline)]\n        (if-not (or newline? comment?)\n          comment-and-newline-count\n          (recur (next cur-seq)\n                 comment?\n                 newline?\n                 (if comment?\n                   (if previous-newline?\n                     ; Don't count the newline preceding a comment\n                     (dec comment-and-newline-count)\n                     comment-and-newline-count)\n                   (inc comment-and-newline-count))))))))\n\n(defn zcount-comments-and-newlines\n  \"Given a zloc-seq, count the newlines and contiguous comments\n  at the beginning of the list.  A comment preceded by a newline or comment\n  doesn't count.\"\n  [zloc-seq]\n  (loop [cur-seq zloc-seq\n         previous-comment? false\n         previous-newline? false\n         comment-and-newline-count 0]\n    (if-not cur-seq\n      comment-and-newline-count\n      (let [tag (ztag (first cur-seq))\n            comment? (= tag :comment)\n            newline? (= tag :newline)]\n        (if-not (or newline? comment?)\n          comment-and-newline-count\n          (recur (next cur-seq)\n                 comment?\n                 newline?\n                 (if comment?\n                   (if previous-newline?\n                     ; Don't count the newline preceding a comment\n                     (dec comment-and-newline-count)\n                     comment-and-newline-count)\n                   (inc comment-and-newline-count))))))))\n\n(defn guided-output\n  \"Return information to be added to the output vector along\n  with other information [param-map previous-data out].  Will do an\n  fzprint* on zloc unless next-seq has data in it to use.\"\n  ; [caller options incoming-seq zloc next-guide cur-index guide-seq\n  ;  index param-map mark-map previous-data out]\n  [caller\n   {:keys [width rightcnt one-line?],\n    {:keys [wrap-after-multi? wrap-multi? respect-nl?]} caller,\n    :as options} zloc rightmost-zloc? next-guide cur-index guide-seq\n   element-index index\n   {:keys [excess-guided-newline-count align-key last-cur-index rightcnt cur-ind\n           ind indent spaces one-line-ind group-seq],\n    :as param-map} mark-map\n   [previous-newline? previous-guided-newline? unguided-newline-out?\n    previous-comment? :as previous-data] out]\n  ; We either have a zloc or we have a group, but not both, so there\n  ; are no decisions to make about which one to use.\n  (dbg-s options :guide \"guided-output: zloc:\" (pr-str (zstring zloc)))\n  (if (and group-seq (empty? group-seq) (not zloc))\n    ; We have a group, but it is empty, so do nothing -- but be sure and\n    ; remove it, or we're going to do a lot of nothing\n    [(dissoc param-map :group-seq) previous-data out]\n    (let [group-seq (if (and (empty? group-seq) zloc) nil group-seq)\n          guided-newline? (= next-guide :newline)\n          ; incoming-pairs is [pair-ind pair-result]\n          do-pairs? (or (= next-guide :pair-end)\n                        (= next-guide :element-pair-group)\n                        (= next-guide :element-pair-*))\n          options (if (= next-guide :element-guide)\n                    (assoc options :guide (second guide-seq))\n                    options)\n          ; Forget incoming pairs\n          incoming-seq nil\n          ; incoming-seq is the incoming sequence, if any.  The only thing that\n          ; is incoming at present is the pair information.\n          incoming-seq (if guided-newline? [[\"\\n\" :none :newline]] incoming-seq)\n          ; Now incoming-seq is either the pair information or possibly a\n          ; newline\n          ; generated because we have a :newline in the guide.\n          ;\n          ; There are two fundemental approaches here -- this-line and\n          ; next-line.\n          ; We will use fzprint* to see if something fits on this line\n          ; in some cases, though not in all.  We also may have an\n          ; incoming-seq which might fit on this line and might need to go to\n          ; the next line. The pairs code looks at previous-newline? and\n          ; doesn't try the current line if it is set.\n          ;\n          ; These values are true for this and next line.\n          options (if rightmost-zloc? options (not-rightmost options))\n          align-ind (when align-key (get mark-map align-key))\n          ; If we have both align-ind and spaces, then add the spaces\n          align-ind (when align-ind (if spaces (+ align-ind spaces) align-ind))\n          ; Find out how big the incoming pairs (or guided-newline) is\n          incoming-lines\n            (style-lines options (or #_pair-ind (+ indent ind)) incoming-seq)\n          ; This is only true for this line, not next line.\n          align-spaces (when align-ind (max 0 (- align-ind cur-ind)))\n          ; There are two key values for the this-line and next-line calls\n          ; to fzprint*: what value to give to fzprint* for ind, and how\n          ; many spaces do we need to put on whatever is out there now to\n          ; get there.  this-ind, this-spaces, next-ind, next-spaces.\n          ;\n          ; Figure out where we are on the line now, so we can call fzprint*\n          ; If we have previous-newline? true, then we have a newline but\n          ; no actual spaces to the right of it.  If we don't, then we are\n          ; somewhere on the line, and just have to put some spaces between\n          ; where we are and where the next thing begins.\n          ;\n          group-newline? (when group-seq (= (ztag (first group-seq)) :newline))\n          regular-space\n            (if (or previous-newline? (zero? element-index) group-newline?) 0 1)\n          additional-spaces (or align-spaces spaces 0)\n          beyond-cur-ind (max additional-spaces regular-space)\n          ; How many spaces to the right of what is already there?\n          ; Note that if we had a previous-newline, we don't really have cur-ind\n          ; spaces there at this time, so we need to account for that.\n          this-spaces\n            (if previous-newline? (+ beyond-cur-ind cur-ind) beyond-cur-ind)\n          this-ind (+ beyond-cur-ind cur-ind)\n          ; Just trying this out here for fzprint-hang-remaining\n          early-next-ind\n            (or align-ind\n                (+ (if (zero? element-index) one-line-ind (+ indent ind))\n                   (or spaces 0)))\n          this-early-next-ind early-next-ind\n          [do-hang-remaining? hang-remaining-seq]\n            (cond (or (= next-guide :element-newline-best-group)\n                      (= next-guide :element-newline-best-*))\n                    [true group-seq]\n                  (or (= next-guide :element-best)\n                      (= next-guide :element-best-*))\n                    [true [zloc]])\n          try-this? (and (or zloc do-pairs? group-seq)\n                         (not previous-newline?)\n                         (not guided-newline?)\n                         (or do-hang-remaining?\n                             (and (< cur-ind width) (< this-ind width))))\n          this-result\n            (when try-this?\n              (cond\n                do-pairs? (fzprint-pairs (in-hang options) this-ind group-seq)\n                do-hang-remaining? (fzprint-hang-remaining\n                                     caller\n                                     options\n                                     #_(assoc options :dbg? true)\n                                     ; This is the correct hindent, but it will\n                                     ; include a space if it hangs it.\n                                     this-ind\n                                     early-next-ind\n                                     hang-remaining-seq\n                                     #_group-seq\n                                     nil ;fn-type\n                                   )\n                ; We don't need to use fzprint-hang-unless-fail, because\n                ; that is pretty much what we are doing with everything.\n                (= next-guide :element-binding-vec)\n                  (fzprint-binding-vec (in-hang options) this-ind zloc)\n                (or (= next-guide :element-binding-group)\n                    (= next-guide :element-binding-*))\n                  (fzprint-pairs (in-hang options) this-ind group-seq :binding)\n                :else (fzprint* (in-hang options) this-ind zloc)))\n          ; If we did fzprint-hang-remaining and it has a single space at the\n          ; beginning, then drop that space.\n          this-result (if (and do-hang-remaining?\n                               (= (nth (first this-result) 2) :whitespace)\n                               (= (ffirst this-result) \" \"))\n                        (next this-result)\n                        this-result)\n          this-lines (style-lines options this-ind this-result)\n          ; Force wrap-multi? true for this guide if we are doing binding,\n          ; regardless of its value in the options map.\n          wrap-multi? (if (or (= next-guide :element-binding-group)\n                              (= next-guide :element-binding-*))\n                        true\n                        wrap-multi?)\n          ; this-multi? says that there is more than one thing in this-result,\n          ; not that it is multi-line!!\n          this-multi? (when this-result (> (count this-result) 1))\n          ; this-linecnt has the number of lines in this-result.\n          this-linecnt (when this-lines (first this-lines))\n          ; This says that we either didn't try a this or we did and the\n          ; this didn't fit.\n          this-fit? (and (or zloc do-pairs? group-seq)\n                         (and (not (empty? this-result))\n                              (if this-multi?\n                                (or wrap-multi? (<= this-linecnt 1))\n                                true)))\n          ; output-seq is either the results of the this-line fzprint* or the\n          ; incoming sequence.\n          output-seq (or this-result incoming-seq)\n          ; Test whatever we've got for fit\n          output-newline? (= (nth (first output-seq) 2) :newline)\n          fail-fit? (or guided-newline?\n                        output-newline?\n                        (= (nth (first output-seq) 2) :indent)\n                        (= (nth (first output-seq) 2) :comment-inline)\n                        (and (not (zero? element-index))\n                             (= (nth (first output-seq) 2) :comment))\n                        ; We tried a this, and it didn't fit.\n                        (and try-this? (not this-fit?)))\n          #_(dbg-s options\n                   :guide\n                   \"guided-output: this-lines:\" this-lines\n                   \"this-multi?\" this-multi?\n                   \"this-linecnt:\" this-linecnt\n                   \"this-ind:\" this-ind\n                   \"try-this?\" try-this?\n                   \"this-fit?\" this-fit?\n                   \"fail-fit?\" fail-fit?)\n          ; If we tried it and it didn't fit, forget about any spaces before\n          ; we try it on the next line\n          spaces (when spaces (if (and try-this? (not this-fit?)) nil spaces))\n          ; If we tried it and it didn't fit, forget about any alignment before\n          ; we try it on the next line\n          align-ind (when align-ind\n                      (if (and try-this? (not this-fit?)) nil align-ind))\n          ; next-ind is the place we will base the fzprint* call on, and in\n          ; this case it is also the number of spaces we will need to put\n          ; out there before placing the return from fzprint*.\n          next-ind (or align-ind\n                       (+ (if (zero? element-index) one-line-ind (+ indent ind))\n                          (or spaces 0)))\n          ; If we have some kind of alignment, that is, align-ind or spaces,\n          ; and we didn't even try it with this-fzprint*, then we need to\n          ; see if it fits on the next line too, and if not, then do it\n          ; without any alignment for real.  But only if we aren't already\n          ; in-hang?\n          early-next-ind next-ind\n          test-fit? (and (not try-this?)\n                         (or align-ind spaces)\n                         (not (:in-hang? options)))\n          ; We are going to do something on the next line.\n          try-next? (and (or zloc do-pairs? group-seq)\n                         (not this-fit?)\n                         (not output-newline?))\n          ; If we didn't try a this-line fzprint*, and we have some kind\n          ; of slightly optional alignment, then see if it fits with the\n          ; alignment on the next line.\n          next-result (when (and test-fit? try-next?)\n                        (if do-pairs?\n                          (fzprint-pairs (in-hang options) next-ind group-seq)\n                          (fzprint* (in-hang options) next-ind zloc)))\n          first-next-result next-result\n          ; We did the test-fit? and it didn't fit, so forget any alignment\n          ; or spaces -- or not.\n          next-ind (if (and try-next? test-fit? (empty? next-result))\n                     (if (zero? element-index) one-line-ind (+ indent ind))\n                     next-ind)\n          ; See how it would fit if it were on the next line and we don't\n          ; have a this that fit (either because we didn't try the this\n          ; or because we did and the result didn't fit)\n          ; Also don't flow if the this generated a newline.\n          next-result (if (and try-next? (empty? next-result))\n                        (cond\n                          do-pairs? (fzprint-pairs options next-ind group-seq)\n                          ;   (= next-guide :element-binding-vec)\n                          ;         (fzprint-binding-vec options next-ind zloc)\n                          do-hang-remaining? (fzprint-hang-remaining\n                                               caller\n                                               options\n                                               #_(assoc options :dbg? true)\n                                               ; flow it if we are doing it here\n                                               next-ind\n                                               next-ind\n                                               hang-remaining-seq\n                                               #_group-seq\n                                               nil ;fn-type\n                                             )\n                          (= next-guide :element-binding-vec)\n                            (fzprint-binding-vec options next-ind zloc)\n                          (or (= next-guide :element-binding-group)\n                              (= next-guide :element-binding-*))\n                            (fzprint-pairs options next-ind group-seq :binding)\n                          :else (fzprint* options next-ind zloc))\n                        next-result)\n          ; If we did fzprint-hang-remaining and it has a newline at the\n          ; beginning, then we should drop that because we are going to\n          ; do it ourselves since this is the \"next\" processing.\n          #_(prn \"***********\" next-result)\n          next-result (if (and (or do-hang-remaining?\n                                   (= next-guide :element-binding-*)\n                                   (= next-guide :element-binding-group))\n                               (= (nth (first next-result) 2) :indent)\n                               (clojure.string/starts-with? (ffirst next-result)\n                                                            \"\\n\"))\n                        (next next-result)\n                        next-result)\n          next-lines (style-lines options next-ind next-result)\n          #_(dbg-s options\n                   :guide\n                   \"guided-output: next-lines:\" next-lines\n                   \"first-next-result:\" first-next-result\n                   \"early-next-ind:\" early-next-ind\n                   \"next-ind:\" next-ind\n                   \"test-fit?\" test-fit?\n                   \"try-next?\" try-next?\n                   \"(+ indent ind):\" (+ indent ind)\n                   \"beyond-cur-ind:\" beyond-cur-ind\n                   \"cur-ind:\" cur-ind\n                   \"element-index:\" element-index)\n          #_(dbg-s options\n                   :guide\n                   \"guided-output: next?\" (not (empty? next-result))\n                   \"this?\" (not (empty? this-result)))\n          output-seq (or next-result output-seq)\n          ; This says that we don't fit if we used the result from the\n          ; next line fzprint*\n          fail-fit? (or fail-fit? next-result)\n          comment? (= (nth (first output-seq) 2) :comment)\n          comment-inline? (= (nth (first output-seq) 2) :comment-inline)\n          newline? (or (and (= (nth (first output-seq) 2) :newline)\n                            (= (count output-seq) 1))\n                       guided-newline?)\n          ; Note that this isn't an :indent guide, this is an indent at\n          ; the start of the output-seq, which means a newline.\n          ; Or a newline.  In any case, this will prevent a prepend-nl.\n          indent? (or (= (nth (first output-seq) 2) :indent)\n                      (= (nth (first output-seq) 2) :newline))\n          ; output-seq might be nil, in which case several of these things\n          ; are nil\n          ; multi? says that there is more than one thing in output-seq, not\n          ; it is multi-line!!\n          multi? (when output-seq (> (count output-seq) 1))\n          #_(dbg-s options\n                   :guide\n                   \"guided-output: ind:\" ind\n                   \"index:\" index\n                   \"cur-index:\" cur-index\n                   \"element-index:\" element-index)\n          ; Use whichever style-lines output makes sense, and figure the length\n          ; of the last line which will become the new cur-ind (through new-ind,\n          ; below).\n          [linecnt max-width lines] (when output-seq\n                                      (or next-lines this-lines incoming-lines))\n          last-width (last lines)\n          ; If it is multi? and (> linecnt 1), then it doesn't fit at present.\n          ; If that changed, the fzprint-seq at the beginning would be wrong,\n          ; because it says to do it at the \"beginning\".  Now, we could do\n          ; what indent-only does and shift it all over, which can work, but\n          ; isn't what we are doing today.\n          ; If that ever changed, we would need to check the widest line, not\n          ; just the last line as we are doing now.  Plus, we would need check\n          ; the widest line against the width, and the last line against the\n          ; rightcnt adjusted width as well to ensure a fit.\n          ;\n          ; If one line and fits, should fit.\n          fit? (not fail-fit?)\n          ; Calculate new location on the line, which is the end of the thing\n          ; we are outputing now.\n          new-ind\n            (cond\n              ; Comments cause an overflow of the size, forcing the next\n              ; thing onto a new line\n              (or comment? comment-inline?) (inc width)\n              ; If is multi-line, and we have more than one line, and\n              ; we don't allow anything after a multi-line thing on\n              ; the same line, then force the next thing onto a new line\n              (and multi? (> linecnt 1) (not wrap-after-multi?)) (inc width)\n              ; If it is multi-line, and it is more than one line, and\n              ; we *do* allow things after the last line, then the length\n              ; of the last line is the new cur-ind.\n              (and multi? (> linecnt 1)) last-width\n              fit? last-width\n              ; When this is (+ indent ind), that is part of what  makes\n              ; :spaces after a newline be \"spaces beyond the indent\",\n              ; not \"spaces instead of the indent\".\n              ; Also, if (zero? element-index), then we have put some stuff\n              ; before the first :element in the guide.  The first element\n              ; should be indented as if it were still on the same line\n              ; as the l-str, and one-line-ind is that indent.\n              ;\n              ; Just be aware that this is something of a lie, since\n              ; if we have a newline there really isn't anything on the\n              ; line after it, since we can't take the chance that we\n              ; might not have another newline next and we can't do\n              ; trailing newlines.  So the next call to guided-ouput\n              ; needs to understand that cur-ind is the number of spaces\n              ; that we wish were after a newline but aren't actually\n              ; there.\n              newline? (if (zero? element-index) one-line-ind (+ indent ind))\n              :else last-width)\n          param-map (dissoc param-map :excess-guided-newline-count #_:align-key)\n          param-map (assoc param-map :cur-ind new-ind)]\n      ; We used to forget about spaces here in some situations, but\n      ; really we only wanted to forget about them after :element or\n      ; :element-align or :newline (a guided one), so we do that in\n      ; fzprint-guide now.\n      (dbg-s\n        options\n        :guide\n        \"guided-output: ------ incoming out:\"\n        #_out\n        (color-str ((:dzprint options)\n                     {}\n                     (into []\n                           #_out\n                           (let [out-len (count out)\n                                 out-drop (int (* 0.8 out-len))\n                                 out-drop (if (< (- out-len out-drop) 10)\n                                            (- out-len 10)\n                                            out-drop)]\n                             #_(concat [(str \"dropped \" out-drop \" elements\")]\n                                       (drop out-drop out))\n                             (condense-depth 1 out))))\n                   :blue))\n      (dbg-s-pr options :guide \"guided-output; ------ next-guide:\" next-guide)\n      (dbg-s options\n             :guide\n             \"guided-output: ------ output-seq:\"\n             (color-str ((:dzprint options) {} (condense-depth 1 output-seq))\n                        :green))\n      (dbg-s-pr options :guide \"guided-output: ------ mark-map:\" mark-map)\n      ;\"(first cur-seq)\" (first cur-seq)\n      (dbg-s\n        options\n        :guide \"guided-output:\"\n        \"\\ncaller:\" caller\n        \"\\nindex:\" index\n        \"\\nzloc?\" (not (empty? zloc))\n        \"\\ngroup-seq-len:\" (count group-seq)\n        \"\\ngroup-newline?\" group-newline?\n        \"\\ncur-index:\" cur-index\n        \"\\nelement-index:\" element-index\n        \"\\nrightmost-zloc?\" rightmost-zloc?\n        \"\\none-line?\" one-line?\n        \"\\ndo-pairs?\" do-pairs?\n        \"\\nindent?\" indent?\n        \"\\nnewline?\" newline?\n        \"\\nguided-newline?\" guided-newline?\n        \"\\noutput-newline?\" output-newline?\n        \"\\nexcess-guided-newline-count:\" excess-guided-newline-count\n        \"\\nprevious-newline?\" previous-newline?\n        \"\\nunguided-newline-out?\" unguided-newline-out?\n        \"\\nprevious-comment?\" previous-comment?\n        \"\\nalign-key:\" align-key\n        \"\\nalign-ind:\" align-ind\n        \"\\nalign-spaces:\" align-spaces\n        \"\\nspaces:\" spaces\n        \"\\nTHIS:\" \"\"\n        \"\\n this-lines:\" this-lines\n        \"\\n this-ind:\" this-ind\n        \"\\n this-early-next-ind:\" this-early-next-ind\n        \"\\n this-spaces:\" this-spaces\n        \"\\n this-multi?\" this-multi?\n        \"\\n this-linecnt:\" this-linecnt\n        \"\\n try-this?\" try-this?\n        \"\\n this-fit?\" this-fit?\n        \"\\n fail-fit?\" fail-fit?\n        \"\\n do-hang-remaining?\" do-hang-remaining?\n        \"\\n regular-space:\" regular-space\n        \"\\n additional-spaces:\" additional-spaces\n        \"\\n beyond-cur-ind:\" beyond-cur-ind\n        \"\\nNEXT:\" \"\"\n        \"\\n next-lines:\" next-lines\n        \"\\n test-fit?\" test-fit?\n        \"\\n try-next?\" try-next?\n        \"\\n early-next-ind:\" early-next-ind\n        \"\\n next-ind:\" next-ind\n        \"\\n (+ indent ind):\" (+ indent ind)\n        \"\\nmulti?\" multi?\n        \"\\nwrap-multi?\" wrap-multi?\n        \"\\nlines:\" lines\n        \"\\nlinecnt:\" linecnt\n        \"\\nmax-width:\" max-width\n        \"\\nlast-width:\" last-width\n        \"\\nind:\" ind\n        \"\\nindent:\" indent\n        \"\\ncur-ind:\" cur-ind\n        \"\\nnew-ind:\" new-ind\n        \"\\nwidth:\" width\n        \"\\nfit?\" fit?\n        \"\\nfail-fit?\" fail-fit?)\n      [;\n       ; param-map\n       ;\n       ; Get rid of one-time parameters and update things that have\n       ; changed\n       param-map\n       ;\n       ; previous-data\n       ;\n       [; previous-newline?\n        newline?\n        ; previous-guided-newline?\n        guided-newline?\n        ; unguided-newline-out?\n        (and (not guided-newline?)\n             (not (and previous-comment? newline?))\n             (and (not fit?) (or newline? #_(not previous-newline?))))\n        ; previous-comment?\n        (or comment? comment-inline?)]\n       ;\n       ; out\n       ;\n       (let [guided-output-out\n               (if fit?\n                 ; Note that newlines don't fit\n                 (if (not (zero? index))\n                   (concat-no-nil [[(blanks this-spaces) :none :whitespace 25]]\n                                  output-seq)\n                   ; This might be nil, but that's ok\n                   output-seq)\n                 (if newline?\n                   (concat-no-nil\n                     ; If we have excess-guided-newline-count, then\n                     ; output it now.  These newlines have no spaces\n                     ; after them, so they should not be used to start\n                     ; a line with something else on it!  We dec because\n                     ; the next thing is a guarenteed newline.\n                     (if (and excess-guided-newline-count\n                              (pos? (dec excess-guided-newline-count)))\n                       (repeat (dec excess-guided-newline-count)\n                               [\"\\n\" :indent 22])\n                       :noseq)\n                     [[(str \"\\n\") :none :indent 21]])\n                   ; This doesn't fit, and isn't a newline\n                   ; Do we need a newline, or do we already have one\n                   ; we could use?\n                   ;\n                   ; This will be a problem, as the simple case says\n                   ; \"Sure, we can use a guided newline here.\"\n                   ; Don't let a comment come after a guided-newline\n                   (if (and previous-newline?\n                            (not (and comment? previous-guided-newline?)))\n                     ; We have just done a newline that we can use.\n                     (do\n                       (dbg-s options\n                              :guide\n                              \"guided-output: previous-newline? etc.\")\n                       (concat-no-nil [[(blanks next-ind) :none :whitespace 16]]\n                                      output-seq))\n                     ; Do we already have a newline at the beginning of a bunch\n                     ; of output, or is this the very first thing?\n                     (if (or indent? (zero? element-index))\n                       ; Yes, don't prepend another newline\n                       output-seq\n                       (do (dbg-s options :guide \"guided-output: prepend-nl:\")\n                           (prepend-nl\n                             options\n                             ; This code is related to the code under\n                             ; fit? above, but without\n                             ; previous-newline?,\n                             ; as that is assumed since we are calling\n                             ; prepend-nl.\n                             ;\n                             ; Note that this is largely for ensuring\n                             ; that non-inline comments end up indented\n                             ; to match the indentation of the next\n                             ; :element or :elment-align\n                             next-ind\n                             output-seq))))))]\n         (dbg-s options\n                :guide\n                (color-str (str \"guided-output returned additional out:\"\n                                (when (nil? guided-output-out)\n                                  (str \" - ALTOGETHER FAILED TO FIT!\"\n                                       (when one-line? \"\\n *** ONE-LINE ***\"))))\n                           :bright-blue)\n                ((:dzprint options)\n                  {:color? true}\n                  guided-output-out\n                  #_(into [] (condense-depth 1 guided-output-out))))\n         ; If we have a nil guided-output-out, we don't add it on, we\n         ; return a nil which will stop everything!\n         (when guided-output-out (concat out guided-output-out)))])))\n\n(defn comment-or-newline?\n  \"Is this element in the output from fzprint-seq a comment or a newline?\"\n  [element]\n  (let [element-type (nth (first element) 2)]\n    (or (= element-type :comment)\n        (= element-type :comment-inline)\n        (= element-type :newline))))\n\n(defn guide-here\n  \"Given the param map, return the location for here.\"\n  [param-map mark-map]\n  (max\n    (or (when (:align-key param-map)\n          (max 0\n               (- (+ (get mark-map (:align-key param-map))\n                     (or (:spaces param-map) 0))\n                  (:ind param-map))))\n        0)\n    (- (+ (:cur-ind param-map) (or (:spaces param-map) 1)) (:ind param-map))))\n\n\n(defn fzprint-guide\n  \"Given a zloc-seq wrap the elements to the right margin \n  and be guided by the guide seq.\"\n  [caller\n   {:keys [width rightcnt one-line?],\n    {:keys [wrap-after-multi? respect-nl? indent]} caller,\n    :as options} ind cur-ind local-indent guide zloc-seq]\n  (dbg-s options\n         :guide (color-str (str \"fzprint-guide: entry: \"\n                                (zstring (first zloc-seq)))\n                           :purple)\n         \"caller:\" caller\n         \"ind:\" ind\n         \"cur-ind:\" cur-ind\n         \"local-indent:\" local-indent\n         \"guide:\" (color-str ((:dzprint options) {:style :guideguide} guide)\n                             :blue))\n  ; If it is one-line? and we have any :newlines in the guide, we are\n  ; finished now\n  (if (and one-line? (some #{:newline} guide))\n    ; We clearly aren't going to output a single line\n    (do (dbg-s options\n               :guide\n               \"fzprint-guide: returned nil - one-line? is true and guide\"\n               \"has :newline!\")\n        nil)\n    (let [rightcnt (fix-rightcnt rightcnt)\n          last-cur-index (dec (count zloc-seq))]\n      (when-not guide\n        (throw (#?(:clj Exception.\n                   :cljs js/Error.)\n                (str \"No guide but fn-style is :guide for this sequence: \"\n                     (mapv zstring zloc-seq)))))\n      (loop [cur-zloc zloc-seq\n             cur-index 0\n             guide-seq guide\n             element-index 0\n             index 0\n             param-map {:cur-ind cur-ind,\n                        :ind ind,\n                        :one-line-ind cur-ind,\n                        :indent local-indent,\n                        :last-cur-index last-cur-index,\n                        :rightcnt rightcnt,\n                        :initial-options options}\n             mark-map {}\n             [previous-newline? previous-guided-newline? unguided-newline-out?\n              previous-comment? :as previous-data]\n               nil\n             options options\n             out []]\n        ; We can't just check for cur-seq here, or any groups we might be\n        ; accumulating will be lost, since :group-end has to come beyond\n        ; the last :element that finished cur-seq\n        ;(if-not (or guide-seq cur-seq))\n        (if (or (not (or guide-seq cur-zloc (:guided-newline-count param-map)))\n                (nil? out))\n          (do (dbg-s options\n                     :guide\n                     (color-str \"fzprint-guide: out:\" :bright-red)\n                     ((:dzprint options) {} (into [] (condense-depth 1 out))))\n              out)\n          (if (> index 3000)\n            (throw\n              (#?(:clj Exception.\n                  :cljs js/Error.)\n               (str \"When processing a guide\" \" the iteration limit of 3000 was\"\n                    \" reached!\" (first guide-seq))))\n            (let [first-guide-seq (first guide-seq)\n                  _ (dbg-s\n                      options\n                      :guide\n                      \"\\n\\nfzprint-guide: =====> (first guide-seq):\"\n                        first-guide-seq\n                      \"\\nfzprint-guide: initial param-map:\"\n                        ((:dzprint options)\n                          {}\n                          (assoc (dissoc param-map :group-seq :initial-options)\n                            :group-seq-len (count (:group-seq param-map)))))\n                  ; If we are out of guide-seq, but we still have cur-seq\n                  ; which we must because of the if-not above, then keep\n                  ; doing elements in guide-seq for as long as we have cur-seq\n                  ;\n                  ; TODO: Change this to [:element], or it will fail when\n                  ; the guide-seq runs out.  But it can be nice to have it\n                  ; fail for debugging.\n                  _ (when (empty? guide-seq)\n                      (dbg-s options\n                             :guide\n                             \"fzprint-guide: guide ran out! guide:\"\n                               (color-str ((:dzprint options)\n                                            {:vector {:wrap? false}}\n                                            guide)\n                                          :bright-red)\n                             \"\\nexpression:\" ((:dzprint options)\n                                               {:vector {:wrap? false}}\n                                               (into []\n                                                     (map zstring zloc-seq)))))\n                  ; Sometimes we come through here when we have\n                  ; (:guided-newline-count param-map)\n                  ; and that's ok.\n                  guide-seq (or guide-seq [:element-*])\n                  ; First, look into what we have coming up in the sequence\n                  ; we are formatting\n                  comment? (= (ztag (first cur-zloc)) :comment)\n                  ; always used together\n                  comment-inline? comment?\n                  next-newline? (= (ztag (first cur-zloc)) :newline)\n                  uneval? (= (ztag (first cur-zloc)) :uneval)]\n              (cond\n                (and (:group-seq param-map) (:grouping? param-map))\n                  ; we are accumulating elements from cur-zloc\n                  ; and we only accept :element between :group-begin and\n                  ; :group-end\n                  ;\n                  ; First, split off any comments or newlines or uneval\n                  ; off of the front of zloc-seq\n                  (cond\n                    (= first-guide-seq :group-end)\n                      ; It is entirely possible tha the group is empty, but\n                      ; if it is, that will be handled by the -group call\n                      ; to guided-output, which will notice the existence of\n                      ; group-seq, and that it is empty, and gracefully do\n                      ; nothing.\n                      (do (dbg-s options\n                                 :guide\n                                 (color-str\n                                   \"fzprint-guide: === end accumulating a group\"\n                                   :bright-red))\n                          (recur cur-zloc\n                                 cur-index\n                                 (next guide-seq)\n                                 element-index\n                                 (inc index)\n                                 (assoc param-map :grouping? nil)\n                                 mark-map\n                                 previous-data\n                                 options\n                                 out))\n                    (= first-guide-seq :element)\n                      (let [[comments-or-newlines-cur-zloc remaining-cur-zloc]\n                              (split-with pair-element? cur-zloc)\n                            group-seq (:group-seq param-map)\n                            ; Add the comments and newlines from cur-zloc to\n                            ; group-seq\n                            group-seq (into []\n                                            (concat\n                                              group-seq\n                                              comments-or-newlines-cur-zloc))\n                            next-zloc (first remaining-cur-zloc)\n                            ; Do one more :element off of zloc-seq, if any\n                            group-seq (if next-zloc\n                                        (conj group-seq\n                                              (first remaining-cur-zloc))\n                                        group-seq)]\n                        (dbg-s options\n                               :guide\n                               (color-str\n                                 \"fzprint-guide: === save a group element\"\n                                 :bright-red))\n                        (recur\n                          (next remaining-cur-zloc)\n                          (+ cur-index (count comments-or-newlines-cur-zloc) 1)\n                          (next guide-seq)\n                          element-index\n                          (inc index)\n                          (assoc param-map :group-seq group-seq)\n                          mark-map\n                          previous-data\n                          options\n                          out))\n                    :else\n                      (throw (#?(:clj Exception.\n                                 :cljs js/Error.)\n                              (str \"When processing a guide and accumulating a\"\n                                   \" group only :element is allowed,\"\n                                   \" but encountered: '\"\n                                   first-guide-seq\n                                   \"' instead!\"))))\n                ;\n                ; process things that absorb information out of guide-seq\n                ; without changing next-seq\n                ;\n                (and (= first-guide-seq :newline) unguided-newline-out?)\n                  ; skip a guided newline if we had an unguided-newline-out\n                  ; on the last output\n                  (do (dbg-s options\n                             :guide\n                             (color-str \"fzprint-guide: === skip guided newline\"\n                                        :bright-red)\n                             \"since we had unguided-newline-out on last output\")\n                      (recur cur-zloc\n                             cur-index\n                             (next guide-seq)\n                             element-index\n                             (inc index)\n                             ; Forget spaces on every guided :newline\n                             (dissoc param-map :spaces :align-key)\n                             mark-map\n                             [previous-newline? previous-guided-newline?\n                              ;unguided-newline-out?\n                              nil previous-comment?]\n                             options\n                             out))\n                (= first-guide-seq :mark)\n                  ; put the cur-ind plus spaces into the mark map with\n                  ; key from the next guide-seq\n                  (do (dbg-s\n                        options\n                        :guide\n                        (color-str \"fzprint-guide: === :mark key:\" :bright-red)\n                        (first (next guide-seq))\n                        \"value:\"\n                        (+ (:cur-ind param-map) (or (:spaces param-map) 1)))\n                      (recur cur-zloc\n                             cur-index\n                             ; skip an extra to account for the mark key\n                             (nnext guide-seq)\n                             element-index\n                             (inc index)\n                             param-map\n                             (assoc mark-map\n                               (first (next guide-seq))\n                                 (+ (:cur-ind param-map)\n                                    (or (:spaces param-map) 1)))\n                             previous-data\n                             options\n                             out))\n                (= first-guide-seq :mark-at)\n                  ; put the cur-ind plus spaces into the mark map with\n                  ; key from the next guide-seq\n                  (do\n                    (dbg-s\n                      options\n                      :guide\n                      (color-str \"fzprint-guide: === :mark-at key:\" :bright-red)\n                      (first (next guide-seq))\n                      \"value:\"\n                      (+ (:one-line-ind param-map) (first (nnext guide-seq))))\n                    (recur cur-zloc\n                           cur-index\n                           ; skip two to account for the mark key and the\n                           ; spaces count\n                           (nthnext guide-seq 3)\n                           element-index\n                           (inc index)\n                           param-map\n                           (assoc mark-map\n                             (first (next guide-seq))\n                               (+ (:one-line-ind param-map)\n                                  (first (nnext guide-seq))))\n                           previous-data\n                           options\n                           out))\n                (= first-guide-seq :mark-at-indent)\n                  ; put the cur-ind plus spaces into the mark map with\n                  ; key from the next guide-seq\n                  (do\n                    (dbg-s options\n                           :guide\n                           (color-str \"fzprint-guide: === :mark-at-indent key:\"\n                                      :bright-red)\n                           (first (next guide-seq))\n                           \"value:\"\n                           (+ (:ind param-map)\n                              (:indent param-map)\n                              (first (nnext guide-seq))))\n                    (recur cur-zloc\n                           cur-index\n                           ; skip two to account for the mark key and the\n                           ; spaces count\n                           (nthnext guide-seq 3)\n                           element-index\n                           (inc index)\n                           param-map\n                           (assoc mark-map\n                             (first (next guide-seq)) (+ (:indent param-map)\n                                                         (:ind param-map)\n                                                         (first (nnext\n                                                                  guide-seq))))\n                           previous-data\n                           options\n                           out))\n                (= first-guide-seq :spaces)\n                  ; save the spaces for when we actually do output\n                  ; note that spaces after a newline are beyond the indent\n                  ; also note that spaces are additive, they do not replace\n                  ; any previous spaces\n                  (do (dbg-s options\n                             :guide\n                             (color-str \"fzprint-guide: === spaces\" :bright-red)\n                             (first (next guide-seq)))\n                      (recur cur-zloc\n                             cur-index\n                             ; skip an extra to account for the spaces count\n                             (nnext guide-seq)\n                             element-index\n                             (inc index)\n                             (assoc param-map\n                               :spaces (+ (first (next guide-seq))\n                                          (or (:spaces param-map) 0)))\n                             mark-map\n                             previous-data\n                             options\n                             out))\n                (= first-guide-seq :indent)\n                  ; save a new indent value in param-map\n                  (do (dbg-s options\n                             :guide\n                             \"fzprint-guide: === :indent\"\n                             (first (next guide-seq)))\n                      (recur cur-zloc\n                             cur-index\n                             ; skip an extra to account for the indent value\n                             (nnext guide-seq)\n                             element-index\n                             (inc index)\n                             (assoc param-map :indent (first (next guide-seq)))\n                             mark-map\n                             previous-data\n                             options\n                             out))\n                (= first-guide-seq :indent-here)\n                  ; save a new indent value in param-map\n                  (do\n                    (dbg-s options\n                           :guide \"fzprint-guide: === :indent-here\"\n                           \"align-key:\" (:align-key param-map)\n                           \"align-ind:\" (when (:align-key param-map)\n                                          (get mark-map (:align-key param-map)))\n                           \"cur-ind:\" (:cur-ind param-map)\n                           \"spaces:\" (:spaces param-map))\n                    (recur cur-zloc\n                           cur-index\n                           (next guide-seq)\n                           element-index\n                           (inc index)\n                           ;   (assoc param-map :indent (first (next\n                           ;   guide-seq)))\n                           (assoc param-map\n                             :indent\n                               ; This needs to be the alignment if we\n                               ; have some, or the cur-ind + spaces\n                               ; if we have some.  Not always adding it to\n                               ; spaces.  Note that the align-key value\n                               ; from mark-map - cur-ind is the number\n                               ; of spaces we need, not the indent.\n                               ; The indent would be the align value - the ind.\n                               (guide-here param-map mark-map)) ; assoc :indent\n                           mark-map\n                           previous-data\n                           options\n                           out))\n                (= first-guide-seq :indent-align)\n                  ; save a new indent value in param-map\n                  (let [align-key (first (next guide-seq))\n                        _ (dbg-s options\n                                 :guide (color-str\n                                          \"fzprint-guide: === :indent-align\"\n                                          :bright-red)\n                                 \"key:\" align-key\n                                 \"value:\" (get mark-map align-key)\n                                 \"cur-ind:\" (:cur-ind param-map))]\n                    (recur cur-zloc\n                           cur-index\n                           ; skip an extra to account for the align-key\n                           (nnext guide-seq)\n                           element-index\n                           (inc index)\n                           (assoc param-map\n                             :indent\n                               ; Note that the align-key value from\n                               ; mark-map - cur-ind is the number of spaces\n                               ; we need, not the indent.  The indent\n                               ; would be the align value - the ind.\n                               (or (when (get mark-map align-key)\n                                     (max 0\n                                          (- (get mark-map align-key)\n                                             (:ind param-map))))\n                                   ; If no align-key, don't change\n                                   ; the indent\n                                   (:indent param-map))) ; assoc :indent\n                           mark-map\n                           previous-data\n                           options\n                           out))\n                (= first-guide-seq :indent-reset)\n                  ; put the indent back where it was originally\n                  (do (dbg-s options\n                             :guide\n                             (color-str \"fzprint-guide: === :indent-reset\"\n                                        :bright-red))\n                      (recur cur-zloc\n                             cur-index\n                             (next guide-seq)\n                             element-index\n                             (inc index)\n                             (assoc param-map :indent local-indent)\n                             mark-map\n                             previous-data\n                             options\n                             out))\n                (= first-guide-seq :options)\n                  ; Start using an updated options map\n                  (let [[merged-option-map _] (internal-config-and-validate\n                                                options\n                                                (first (next guide-seq))\n                                                \"fzprint-guide: options:\"\n                                                ; Don't validate because these\n                                                ; were either validated on\n                                                ; return from option-fn or\n                                                ; when read in the options map\n                                                nil)\n                        _ (dbg-s options\n                                 :guide\n                                 (color-str \"fzprint-guide: === :options\"\n                                            :bright-red)\n                                 (first (next guide-seq)))]\n                    (recur cur-zloc\n                           cur-index\n                           ; skip an extra to account for the options map\n                           (nnext guide-seq)\n                           element-index\n                           (inc index)\n                           param-map\n                           mark-map\n                           previous-data\n                           merged-option-map\n                           out))\n                (= first-guide-seq :options-reset)\n                  ; put the options map back to where it was when we started\n                  (do (dbg-s options\n                             :guide\n                             (color-str \"fzprint-guide: === :options-reset\"\n                                        :bright-red))\n                      (recur cur-zloc\n                             cur-index\n                             (next guide-seq)\n                             element-index\n                             (inc index)\n                             param-map\n                             mark-map\n                             previous-data\n                             (:initial-options param-map)\n                             out))\n                (= first-guide-seq :align)\n                  ; Set up for an alignment on the next :element\n                  ; Find the align-key, and save it in the param-map\n                  (let [align-key (first (next guide-seq))\n                        _ (dbg-s options\n                                 :guide (color-str \"fzprint-guide: === :align\"\n                                                   :bright-red)\n                                 \"key:\" align-key\n                                 \"value:\" (get mark-map align-key))]\n                    (recur cur-zloc\n                           cur-index\n                           ; skip an extra to account for the align-key\n                           (nnext guide-seq)\n                           element-index\n                           (inc index)\n                           ; remember the align-key, forget spaces when\n                           ; we get :align\n                           (assoc (dissoc param-map :spaces)\n                             :align-key align-key)\n                           mark-map\n                           previous-data\n                           options\n                           out))\n                (:guided-newline-count param-map)\n                  ; we are currently counting newlines, see if we have more\n                  ; or if we should output any excess that we have counted\n                  (if (or (= first-guide-seq :newline)\n                          (= first-guide-seq :newline-force))\n                    ; we have another :newline, just count it\n                    (do (dbg-s options\n                               :guide\n                               (color-str\n                                 \"fzprint-guide: === counting guided newlines:\"\n                                 :bright-red)\n                               (inc (:guided-newline-count param-map)))\n                        (recur\n                          cur-zloc\n                          cur-index\n                          (next guide-seq)\n                          element-index\n                          (inc index)\n                          (dissoc\n                            (assoc param-map\n                              :guided-newline-count\n                                ; Only count them if we have real\n                                ; cur-zloc or this is a :newline-force\n                                (if (or cur-zloc\n                                        (= first-guide-seq :newline-force))\n                                  (inc (:guided-newline-count param-map))\n                                  (:guided-newline-count param-map))\n                              :cur-ind (+ (:indent param-map) (:ind param-map)))\n                            :spaces\n                            :align-key)\n                          mark-map\n                          previous-data\n                          options\n                          out))\n                    ; we are counting guided-newlines, and we have found a guide\n                    ; that is not a :newline, so we need to determine the number\n                    ; of excess guided-newlines we have, by counting the actual\n                    ; newlines and comparing them\n                    (let\n                      [_ (dbg-s\n                           options\n                           :guide\n                             (color-str\n                               \"fzprint-guide: === finished counting newlines\"\n                               :bright-red)\n                           \":guided-newline-count:\" (:guided-newline-count\n                                                      param-map))\n                       comment-and-newline-count (zcount-comments-and-newlines\n                                                   cur-zloc)\n                       guided-newline-count (:guided-newline-count param-map)\n                       excess-guided-newline-count\n                         (max 0\n                              (- guided-newline-count\n                                 comment-and-newline-count))\n                       param-map (dissoc param-map :guided-newline-count)\n                       ; Since we expect a newline or equivalent sometime\n                       ; soon, as in next, let's fix up the cur-ind to\n                       ; represent that.\n                       param-map (assoc param-map\n                                   :cur-ind (+ (:indent param-map)\n                                               (:ind param-map)))\n                       param-map (if (pos? excess-guided-newline-count)\n                                   (assoc param-map\n                                     :excess-guided-newline-count\n                                       excess-guided-newline-count)\n                                   param-map)\n                       ; If we have excess-guided-newline-count then do\n                       ; output right now, fake a guided newline to make\n                       ; this happen\n                       [new-param-map new-previous-data new-out]\n                         (if (pos? excess-guided-newline-count)\n                           (do\n                             (dbg-s\n                               options\n                               :guide\n                               (color-str\n                                 \"fzprint-guide === excess-guided-newline-count:\"\n                                 :bright-red)\n                               excess-guided-newline-count)\n                             (guided-output\n                               caller\n                               options\n                               nil ; zloc\n                               nil ; rightmost-zloc?\n                               :newline ;guide-seq\n                               cur-index\n                               guide-seq\n                               element-index\n                               index\n                               param-map\n                               mark-map\n                               previous-data\n                               out))\n                           [param-map previous-data out])]\n                      (recur cur-zloc\n                             cur-index\n                             ; don't move forward, as we were dealing with\n                             ; the end of a previous set of :newlines\n                             guide-seq\n                             element-index\n                             (inc index)\n                             new-param-map\n                             mark-map\n                             new-previous-data\n                             options\n                             new-out)))\n                (or (= first-guide-seq :newline)\n                    (= first-guide-seq :newline-force))\n                  ; start counting guided newlines\n                  (do\n                    (dbg-s options\n                           :guide\n                           (color-str\n                             \"fzprint-guide: === start counting guided newlines\"\n                             :bright-red))\n                    (recur cur-zloc\n                           cur-index\n                           (next guide-seq)\n                           element-index\n                           (inc index)\n                           ; Forget spaces on every guided :newline\n                           ; TODO: PROTOTYPE\n                           (if (or (not (empty? cur-zloc))\n                                   (= first-guide-seq :newline-force))\n                             (dissoc (assoc param-map\n                                       :guided-newline-count 1\n                                       :cur-ind (+ (:ind param-map)\n                                                   (:indent param-map)))\n                                     :spaces\n                                     :align-key)\n                             param-map)\n                           mark-map\n                           previous-data\n                           options\n                           out))\n                ; :pair-begin has to come after the newline handling\n                ; :group-begin has to come after the newline handling\n                (= first-guide-seq :group-begin)\n                  ; create an empty seq to accumulate zlocs\n                  (do (dbg-s options\n                             :guide\n                             (color-str\n                               \"fzprint-guide: === start accumulating a group\"\n                               :bright-red))\n                      (recur cur-zloc\n                             cur-index\n                             (next guide-seq)\n                             element-index\n                             (inc index)\n                             (assoc param-map\n                               :group-seq []\n                               :grouping? true)\n                             mark-map\n                             previous-data\n                             options\n                             out))\n                ; :element-newline-best-* also has to come after\n                ; newline handling\n                (or (= first-guide-seq :element-newline-best-*)\n                    (= first-guide-seq :element-binding-*)\n                    (= first-guide-seq :element-pair-*))\n                  ; Consider everything else for a -* command.\n                  ; If we ree already accumulating a group, that's ok (though\n                  ; unnecessary).\n                  (let [_ (dbg-s options\n                                 :guide (color-str (str \"fzprint-guide: === \"\n                                                        first-guide-seq)\n                                                   :bright-red)\n                                 \"rightcnt:\" (:rightcnt options))\n                        ; Is this the last thing in guide-seq?\n                        _ (when-not (empty? (next guide-seq))\n                            (throw\n                              (#?(:clj Exception.\n                                  :cljs js/Error.)\n                               (str first-guide-seq\n                                    \"not the last command in the guide!\"))))\n                        ; Get a place to put the pairs\n                        param-map (if (:group-seq param-map)\n                                    param-map\n                                    (assoc param-map :group-seq []))\n                        ; Pick up all of the remaining cur-zloc\n                        param-map (assoc param-map\n                                    :group-seq (concat (:group-seq param-map)\n                                                       cur-zloc))\n                        _ (dbg-s options\n                                 :guide\n                                 \"fzprint-guide: === \" first-guide-seq\n                                 \" group-seq:\" (pr-str (map zstring\n                                                         (:group-seq\n                                                           param-map))))]\n                    (if (empty? (:group-seq param-map))\n                      ; Nothing to do, nothing left in the zloc-seq!\n                      (recur cur-zloc\n                             cur-index\n                             (next guide-seq)\n                             element-index\n                             (inc index)\n                             (dissoc param-map :group-seq :grouping?)\n                             mark-map\n                             previous-data\n                             options\n                             out)\n                      ; we have zlocs to process\n                      (let [[new-param-map new-previous-data new-out]\n                              (guided-output caller\n                                             options\n                                             nil ; zloc\n                                             true ; rightmost-zloc?\n                                             first-guide-seq\n                                             cur-index\n                                             guide-seq\n                                             element-index\n                                             index\n                                             param-map\n                                             mark-map\n                                             previous-data\n                                             out)]\n                        (recur nil ; we finished them off\n                               (+ cur-index (count cur-zloc)) ; same here\n                               (next guide-seq)\n                               element-index\n                               (inc index)\n                               (dissoc new-param-map :group-seq :grouping)\n                               mark-map\n                               new-previous-data\n                               options\n                               new-out))))\n                ;\n                ;  Start looking at cur-seq\n                ;\n                ; At this point, the only guide left is :element,\n                ; soo we must be sitting on it.\n                ; All of the others are (and must be) processed above.\n                ;\n                ; Anything left in cur-zloc?\n                (and (nil? cur-zloc) (empty? (:group-seq param-map)))\n                  ; No, nothing left in cur-zloc.  This isn't a failure,\n                  ; because we might be accumulating pairs or just have\n                  ; made too long a guide.  Just keep going and eat up\n                  ; the guide-seq.\n                  (do (dbg-s options\n                             :guide\n                             (color-str \"fzprint-guide: === ran out of cur-zloc\"\n                                        :bright-red))\n                      (recur (next cur-zloc)\n                             (inc cur-index)\n                             (next guide-seq)\n                             element-index\n                             (inc index)\n                             param-map\n                             mark-map\n                             previous-data\n                             options\n                             out))\n                (or comment? comment-inline? uneval? next-newline?)\n                  ; Do unguided output, moving cur-zloc without changing\n                  ; guide-seq\n                  (let\n                    [_ (dbg-s\n                         options\n                         :guide\n                           (color-str\n                             \"fzprint-guide: === process comments, newlines, uneval\"\n                             :bright-red)\n                         \"comment?\" comment?\n                         \"comment-inline?\" comment-inline?\n                         \"uneval?\" uneval?\n                         \"next-newline?\" next-newline?)\n                     [new-param-map new-previous-data new-out]\n                       (guided-output caller\n                                      options\n                                      (first cur-zloc)\n                                      (empty? (next cur-zloc))\n                                      nil ; unknown\n                                      cur-index\n                                      guide-seq\n                                      element-index\n                                      index\n                                      param-map\n                                      mark-map\n                                      previous-data\n                                      out)]\n                    (recur (next cur-zloc)\n                           (inc cur-index)\n                           ; We may have used information from guide-seq, but\n                           ; we didn't \"consume\" it yet.\n                           guide-seq\n                           element-index\n                           (inc index)\n                           new-param-map\n                           mark-map\n                           new-previous-data\n                           options\n                           new-out))\n                (or (= first-guide-seq :element)\n                    (= first-guide-seq :element-guide)\n                    (= first-guide-seq :element-best)\n                    (= first-guide-seq :element-best-*)\n                    (= first-guide-seq :element-*)\n                    (= first-guide-seq :element-binding-vec))\n                  ; Do basic guided output, moving both cur-seq and guide-seq\n                  (let [_ (dbg-s options\n                                 :guide\n                                 (color-str (str \"fzprint-guide: === \"\n                                                 first-guide-seq)\n                                            :bright-red))\n                        _ (when (and (or (= first-guide-seq :element-*)\n                                         (= first-guide-seq :element-best-*))\n                                     (not (empty? (next guide-seq))))\n                            (throw\n                              (#?(:clj Exception.\n                                  :cljs js/Error.)\n                               (str first-guide-seq\n                                    \" is not the last command in guide!\"))))\n                        [new-param-map new-previous-data new-out]\n                          (guided-output caller\n                                         options\n                                         (first cur-zloc)\n                                         (empty? (next cur-zloc))\n                                         first-guide-seq\n                                         cur-index\n                                         guide-seq\n                                         element-index\n                                         index\n                                         param-map\n                                         mark-map\n                                         previous-data\n                                         out)]\n                    (recur (next cur-zloc)\n                           (inc cur-index)\n                           (cond\n                             (= first-guide-seq :element-guide)\n                               ; Make sure to consume the guide too\n                               (nnext guide-seq)\n                             (or (= first-guide-seq :element-*)\n                                 (= first-guide-seq :element-best-*))\n                               ; We just stay \"stuck\" on last command\n                               ; in guide-seq for :element-* and\n                               ; :element-best-*\n                               guide-seq\n                             :else (next guide-seq))\n                           (inc element-index)\n                           (inc index)\n                           ; forget spaces or alignment after :element\n                           (dissoc new-param-map :spaces :align-key)\n                           mark-map\n                           new-previous-data\n                           options\n                           new-out))\n                (or (= first-guide-seq :element-newline-best-group)\n                    (= first-guide-seq :element-pair-group)\n                    (= first-guide-seq :element-binding-group))\n                  ; Operate on previously grouped elements\n                  (let [_ (dbg-s options\n                                 :guide\n                                 (color-str (str \"fzprint-guide: === \"\n                                                 first-guide-seq)\n                                            :bright-red))\n                        [new-param-map new-previous-data new-out]\n                          (guided-output caller\n                                         options\n                                         ; Use previously created group\n                                         nil\n                                         (empty? cur-zloc)\n                                         first-guide-seq\n                                         cur-index\n                                         guide-seq\n                                         element-index\n                                         index\n                                         param-map\n                                         mark-map\n                                         previous-data\n                                         out)]\n                    (recur cur-zloc\n                           cur-index\n                           (next guide-seq)\n                           element-index\n                           (inc index)\n                           ; forget spaces or alignment after :element\n                           ; also forget the group, a we have used it up\n                           (dissoc new-param-map :spaces :align-key :group-seq)\n                           mark-map\n                           new-previous-data\n                           options\n                           new-out))\n                ;\n                ; Something we didn't expect is going on here\n                ; TODO: Fix this for realistic error reporting\n                ;\n                :else (throw (#?(:clj Exception.\n                                 :cljs js/Error.)\n                              (str \"Unknown values: guide-seq: '\"\n                                   first-guide-seq\n                                   \"' \"\n                                   \"\\ncur-zloc:\"\n                                   (zstring (first cur-zloc)))))))))))))\n\n(defn remove-nl\n  \"Remove any [_ _ :newline] from the seq.\"\n  [coll]\n  (remove #(= (nth (first %) 2) :newline) coll))\n\n(defn comment-in-zloc-seq?\n  \"If there are any comments at the top level of the zloc-seq, return true,\n  else nil.\"\n  [zloc-seq]\n  (reduce #(when (= (ztag %2) :comment) (reduced true)) false zloc-seq))\n\n(defn fzprint-vec*\n  \"Print basic stuff like a vector or a set or an array.  Several options \n  for how to print them.\"\n  [caller l-str r-str\n   {:keys [rightcnt in-code?],\n    {:keys [wrap-coll? wrap? binding? option-fn-first option-fn sort?\n            sort-in-code? fn-format indent force-nl?]}\n      caller,\n    :as options} ind zloc]\n  (dbg options\n       \"fzprint-vec* ind:\" ind\n       \"indent:\" indent\n       \"caller:\" caller\n       \"ztag:\" (ztag zloc))\n  (if (and binding? (= (:depth options) 1))\n    (fzprint-binding-vec options ind zloc)\n    (let [[respect-nl? respect-bl? indent-only?]\n            (get-respect-indent options caller :vector)\n          l-str-len (count l-str)\n          l-str-vec [[l-str (zcolor-map options l-str) :left]]\n          r-str-vec\n            (rstr-vec options (+ ind (max 0 (dec l-str-len))) zloc r-str)\n          len (zcount zloc)\n          #_#_options\n            (assoc options\n              :call-stack (conj (:call-stack options)\n                                {:tag (ztag zloc), :caller caller, :zloc zloc}))\n          options (if (and (= caller :prefix-tags) (= :quote (ztag zloc)))\n                    (assoc options :quote? true)\n                    options)\n          [options new-options]\n            (if option-fn-first\n              (call-option-fn-first caller options option-fn-first zloc)\n              [options nil])\n          _ (when option-fn-first\n              (dbg-pr options\n                      \"fzprint-vec* option-fn-first new options\"\n                      new-options))\n          [options new-options] (if option-fn\n                                  (call-option-fn caller options option-fn zloc)\n                                  [options nil])\n          _ (when option-fn\n              (dbg-pr options \"fzprint-vec* option-fn new options\" new-options))\n          {{:keys [wrap-coll? wrap? binding? respect-bl? respect-nl? sort?\n                   fn-format sort-in-code? indent indent-only?]}\n             caller,\n           :as options}\n            options\n          ; If we are doing indent-only, we aren't doing guides\n          guide (when (not indent-only?)\n                  (or (:guide options) (guide-debug caller options)))\n          options (dissoc options :guide)\n          _ (when guide (dbg-pr options \"fzprint-vec* guide:\" guide))\n          zloc-seq (cond (or respect-nl? indent-only?) (zmap-w-nl identity zloc)\n                         respect-bl? (zmap-w-bl identity zloc)\n                         :else (zmap identity zloc))]\n      (cond\n        guide (concat-no-nil l-str-vec\n                             (fzprint-guide\n                               ; TODO: FIX THIS\n                               :vector\n                               options\n                               ; this is where we are w/out any indent\n                               ind\n                               ; this is where we are with the l-str\n                               (+ l-str-len ind)\n                               indent\n                               guide\n                               zloc-seq)\n                             r-str-vec)\n        fn-format\n          ; If we have fn-format, move immediately to fzprint-list* and\n          ; let :vector-fn configuration drive what we do (e.g.,\n          ; indent-only, ; or whatever).  That is to say that\n          ; :indent-only? in :vector doesn't override option-fn-first\n          ; or option-fn\n          (fzprint-list* :vector-fn\n                         l-str\n                         r-str\n                         ; This could (dissoc options [:fn-format\n                         ; :vector])\n                         ;    (assoc-in\n                         (assoc options :fn-style fn-format)\n                         ;    [:vector :fn-format] nil)\n                         ind\n                         zloc)\n        :else\n          (let [; If sort? is true, then respect-nl? and respect-bl? make\n                ; no sense.  And vice versa.\n                ; If respect-nl? or respect-bl?, then no sort.\n                ; If we have comments, then no sort, because we'll lose the\n                ; comment context.\n                indent (or indent (count l-str))\n                new-ind (if indent-only? ind (+ indent ind))\n                _ (dbg-pr options\n                          \"fzprint-vec*:\" (zstring zloc)\n                          \"new-ind:\" new-ind)\n                zloc-seq (if (and sort?\n                                  (if in-code? sort-in-code? true)\n                                  (not (comment-in-zloc-seq? zloc-seq))\n                                  (not respect-nl?)\n                                  (not respect-bl?)\n                                  (not indent-only?))\n                           (order-out caller options identity zloc-seq)\n                           zloc-seq)\n                coll-print (if (zero? len)\n                             [[[\"\" :none :whitespace 17]]]\n                             (fzprint-seq options new-ind zloc-seq))\n                _ (dbg-pr options \"fzprint-vec*: coll-print:\" coll-print)\n                ; If we got any nils from fzprint-seq and we were in\n                ; :one-line\n                ; mode\n                ; then give up -- it didn't fit on one line.\n                coll-print (if-not (contains-nil? coll-print) coll-print)\n                one-line (when coll-print\n                           ; should not be necessary with contains-nil? above\n                           (apply concat-no-nil\n                             (interpose [[\" \" :none :whitespace 18]]\n                               ; This causes single line things to also\n                               ; respect-nl\n                               ; when it is enabled.  Could be separately\n                               ; controlled\n                               ; instead of with :respect-nl? if desired.\n                               (if (or respect-nl? :respect-bl? indent-only?)\n                                 coll-print\n                                 (remove-nl coll-print)))))\n                _ (log-lines options \"fzprint-vec*:\" new-ind one-line)\n                _ (dbg-pr options\n                          \"fzprint-vec*: new-ind:\" new-ind\n                          \"force-nl?\" force-nl?\n                          \"one-line:\" one-line)\n                one-line-lines (style-lines options new-ind one-line)]\n            (if (zero? len)\n              (concat-no-nil l-str-vec r-str-vec)\n              (when one-line-lines\n                (if (and (not force-nl?)\n                         (fzfit-one-line options one-line-lines))\n                  (concat-no-nil l-str-vec one-line r-str-vec)\n                  (if indent-only?\n                    ; Indent Only\n                    (concat-no-nil l-str-vec\n                                   (indent-zmap caller\n                                                options\n                                                ind\n                                                ; actual-ind\n                                                (+ ind l-str-len)\n                                                coll-print\n                                                indent)\n                                   r-str-vec)\n                    ; Regular Pprocessing\n                    (if (or (and (not wrap-coll?)\n                                 (any-zcoll? options new-ind zloc))\n                            (not wrap?)\n                            force-nl?)\n                      (concat-no-nil l-str-vec\n                                     (apply concat-no-nil\n                                       (precede-w-nl options\n                                                     new-ind\n                                                     coll-print\n                                                     :no-nl-first))\n                                     r-str-vec)\n                      ; Since there are either no collections in this vector\n                      ; or set or whatever, or if there are, it is ok to\n                      ; wrap them, print it wrapped on the same line as\n                      ; much as possible:\n                      ;           [a b c d e f\n                      ;            g h i j]\n                      (concat-no-nil\n                        l-str-vec\n                        (do\n                          (dbg-pr options\n                                  \"fzprint-vec*: wrap coll-print:\"\n                                  coll-print)\n                          (wrap-zmap caller options new-ind new-ind coll-print))\n                        r-str-vec)))))))))))\n\n(defn fzprint-vec\n  [options ind zloc]\n  (fzprint-vec* :vector \"[\" \"]\" (rightmost options) ind zloc))\n\n(defn fzprint-array\n  [options ind zloc]\n  (fzprint-vec* :array \"[\" \"]\" (rightmost options) ind zloc))\n\n(defn fzprint-set\n  \"Pretty print and focus style a :set element.\"\n  [options ind zloc]\n  (fzprint-vec* :set \"#{\" \"}\" (rightmost options) ind zloc))\n\n; not clear transient helps here\n(defn interpose-either\n  \"Do the same as interpose, but different seps depending on pred?.\n  If sep-nil is nil, then when pred? is false we don't interpose\n  anything!\"\n  [sep-true sep-nil pred? coll]\n  (loop [coll coll\n         out (transient [])\n         interpose? nil]\n    (if (empty? coll)\n      (persistent! out)\n      (recur (next coll)\n             (if interpose?\n               (conj-it! out sep-true (first coll))\n               (if (or (zero? (count out)) (nil? sep-nil))\n                 (conj! out (first coll))\n                 (conj-it! out sep-nil (first coll))))\n             (pred? (first coll))))))\n\n(defn precede-w-nl\n  \"Move through a sequence of style vecs and ensure that at least\n  one newline (actually an indent) appears before each element.  If\n  a newline in the style-vecs is where we wanted one, well and good.\n  Comments are now not recognized as different, increasing our\n  appreciation of diversity.  If not-first? is truthy, then don't\n  put a newline before the first element.\"\n  [options ind coll not-first?]\n  (dbg-pr options\n          \"precede-w-nl: (count coll)\" (count coll)\n          \"not-first?\" not-first?)\n  (loop [coll coll\n         ind-seq (if (coll? ind) ind (vector ind))\n         out (transient [])\n         added-nl? not-first?]\n    (if (empty? coll)\n      (let [result (persistent! out)\n            _ (dbg-pr options \"precede-w-nl: exit:\" result)\n            ; If the thing before the last was a comment, then remove the\n            ; last thing (which must be a newline, though we didn't put\n            ; it there)\n            previous-element-index (- (count result) 2)\n            previous-type (when (not (neg? previous-element-index))\n                            (nth (first (nth result previous-element-index))\n                                 2))]\n        result)\n      (let [[[s color what] :as element] (first coll)\n            ; This element may have many things in it, or sometimes\n            ; just one.\n            ;\n            ; I believe that if the first thing is a newline then they\n            ; must all be newlines.  We could check the last, or all of\n            ; them here, I suppose.  But these have to come from\n            ; fzprint-newline, to the best of my knowledge, and that is\n            ; how it works.\n            indent (first ind-seq)\n            newline? (= what :newline)\n            ; Let's make sure about the last\n            last-what (nth (last element) 2)]\n        (dbg-pr options \"precede-w-nl: element:\" element \"added-nl?:\" added-nl?)\n        (recur (next coll)\n               ; Move along ind-seq until we reach the last one, then just\n               ; keep using the last one.\n               (if-let [next-ind (next ind-seq)]\n                 next-ind\n                 ind-seq)\n               (if newline?\n                 ; It is a :newline, so just use it as it is.\n                 ; Except if the next thing out is also a newline, we'll have\n                 ; trailing spaces after this newline, which is unlovely.\n                 (let [next-coll (next coll)]\n                   (if (empty? next-coll)\n                     (conj! out element)\n                     (let [[[_ _ next-what]] (first next-coll)]\n                       (if (= next-what :newline)\n                         ; don't put out a newline with spaces before another\n                         ; newline\n                         (conj! out [[\"\\n\" color what]])\n                         (conj! out element)))))\n                 ; It is not a :newline, so we want to make sure we have a\n                 ; newline in front of it, unless we already have one..\n                 (if added-nl?\n                   ; We already have a newline in front of it\n                   (conj! out element)\n                   ; We need both a newline and the element\n                   (conj-it! out\n                             [[(str \"\\n\" (blanks indent)) :none :indent 28]]\n                             element)))\n               ; Is there a newline as the last thing we just did?\n               ; Two ways for that to happen.\n               newline?)))))\n\n(defn count-newline-types\n  \"Analyze a style-vec which contains only newlines, and return the count \n  of newlines in the style vec.  We assume that each :newline style-vec \n  contains one newline (i.e., it was generated by fzprint-newlines).\"\n  [newline-style-vec]\n  (let [count-of-types (count (distinct (map #(nth % 2) newline-style-vec)))]\n    #_(prn \"count-newline-types: \" count-of-types\n           \" style-vec:\" newline-style-vec)\n    (when (or (not= count-of-types 1)\n              (not= (nth (first newline-style-vec) 2) :newline))\n      (throw\n        (#?(:clj Exception.\n            :cljs js/Error.)\n         (str \"Internal Error!  Please submit an issue with an example\"\n                \" of how to reproduce this error!\"\n              \" count-newline-types: more than one type or wrong type! count: \"\n                count-of-types\n              \" style-vec: \" newline-style-vec))))\n    (count newline-style-vec)))\n\n(defn count-right-blanks\n  \"Count the number of blanks at the right end of a string.\"\n  [s]\n  (loop [i (count s)]\n    (if (neg? i)\n      (count s)\n      (if (clojure.string/ends-with? (subs s 0 i) \" \")\n        (recur (dec i))\n        (- (count s) i)))))\n\n(defn trimr-blanks\n  \"Trim only blanks off the right end of a string.\"\n  [s]\n  (loop [i (count s)]\n    (if (neg? i)\n      \"\"\n      (if (clojure.string/ends-with? (subs s 0 i) \" \")\n        (recur (dec i))\n        (subs s 0 i)))))\n\n(defn repeat-style-vec-nl\n  \"Given a count n, and style vec that ends with a newline and an associated\n  indent of some number of spaces, return a sequence of n of those style vecs\n  but remove spaces from all but the last of them.\"\n  [n style-vec]\n  (let [no-space-n (max (dec n) 0)]\n    (if (zero? no-space-n)\n      style-vec\n      (let [[s color what] (last style-vec)\n            no-space-element [(trimr-blanks s) color what]\n            no-space-style-vec\n              (into [] (concat (butlast style-vec) no-space-element))]\n        (into [] (concat (repeat no-space-n no-space-style-vec) style-vec))))))\n\n(defn trimr-blanks-element\n  \"Given an element, trim the blanks out of the string.\"\n  [[s color what]]\n  [(trimr-blanks s) color what])\n\n(defn trimr-blanks-style-vec\n  \"Given a style-vec, trim the blanks out of each element.\"\n  [style-vec]\n  (mapv trimr-blanks-element style-vec))\n\n(defn repeat-element-nl\n  \"Given a count n, and single element from a style-vec which\n  contains a newline and an indent of some number of spaces, return\n  a sequence of n of those style vecs but remove spaces from all\n  but the last of them.  This is so that we don't have trailing spaces\n  on lines.\"\n  [n element]\n  #_(prn \"repeat-element-nl: n:\" n \"element:\" element)\n  (let [no-space-n (max (dec n) 0)]\n    (if (zero? no-space-n)\n      [element]\n      (let [[s color what] element\n            no-space-element [(trimr-blanks s) color what]\n            result\n              (into [] (concat (repeat no-space-n no-space-element) [element]))]\n        #_(prn \"repeat-element-nl: result:\" result)\n        result))))\n\n(defn next-non-comment-nl\n  \"Given a coll of [hangflow style-vec] pairs, return the \n  [hangflow style-vec] pair where the style-vec is not a \n  :comment, :comment-inline, :newline or :indent.\"\n  [coll]\n  (loop [coll coll]\n    (if (empty? coll)\n      nil\n      (let [[_ style-vec] (first coll)\n            [_ _ what] (first style-vec)]\n        (if (or (= what :comment)\n                (= what :comment-inline)\n                (= what :indent)\n                (= what :newline))\n          (recur (next coll))\n          (first coll))))))\n\n; transient helped a lot here\n\n(defn interpose-either-nl-hf\n  \"Do very specialized interpose, but different seps depending on pred-fn\n  return and nl-separator? and nl-separator-all?. This assumes that \n  sep-* does one line, and sep-*-nl does two lines. coll is\n  a series of [[:flow [['\\n  ' :none :newline 2]]] \n               [:flow [['ZprintType' :black :element] ...]]] fragments from\n  fzprint-map-two-up.\"\n  [sep-comma sep-comma-nl sep sep-nl\n   {:keys [nl-separator? nl-separator-all?], :as suboptions} ;nl-separator?\n   comma? coll]\n  #_(prn \"ienf: sep:\" sep \"comma?\" comma? \"coll:\" coll)\n  (loop [coll coll\n         out (transient [])\n         previous-needs-comma? nil\n         add-nl? nil\n         first? true\n         newline-count 0]\n    (if (empty? coll)\n      (apply concat-no-nil\n        (persistent!\n          ; Handle final newlines, if any\n          (if (zero? newline-count)\n            out\n            (conj-it! out (repeat-element-nl newline-count (first sep))))))\n      (let [[hangflow style-vec] (first coll)\n            [_ _ what] (first style-vec)]\n        #_(prn \"====>>>>>>>> interpose-either-nl-hf: style-vec:\" style-vec)\n        (cond\n          (= what :newline)\n            ; We have one or more newlines.  We are going to keep\n            ; track of what we've seen and will actually output things\n            ; later, when we know what we actually have.\n            ; For now, just increase the count and don't do anything\n            ; else.  If we have anything in addition to newlines, we have a\n            ; problem because we will lose them as the style-vec\n            ; goes away, which is why count-newline-types will throw\n            ; an exception if it encounters this.\n            (do #_(prn \"interpose-either-nl-hf: hangflow: \" hangflow)\n                (recur (next coll)\n                       out\n                       previous-needs-comma?\n                       add-nl?\n                       first?\n                       (+ newline-count (count-newline-types style-vec))))\n          :else\n            ; We have a normal style-vec that we will process.  This one\n            ; may have plenty of newlines, but there isn't one first.\n            ; But we might have seen plenty of newlines\n            ; before this -- or not.\n            (let [[interpose-style-vec interpose-count]\n                    (if previous-needs-comma?\n                      (if add-nl? [sep-comma-nl 2] [sep-comma 1])\n                      (if add-nl? [sep-nl 2] [sep 1]))\n                  ; if first? we assume that we get one newline from caller\n                  interpose-count (if first? 1 interpose-count)\n                  addtl-nl-needed (max (- newline-count interpose-count) 0)]\n              ; Here is where we need to figure out if two newlines are\n              ; coming out in order, and ensure that the first ones don't\n              ; have any spaces after them.\n              #_(prn \"ienf: interpose-style-vec:\" interpose-style-vec)\n              (recur\n                (next coll)\n                (if first?\n                  (if (zero? addtl-nl-needed)\n                    (conj! out style-vec)\n                    (conj-it! out\n                              (repeat-element-nl addtl-nl-needed (first sep))\n                              style-vec))\n                  (if (zero? addtl-nl-needed)\n                    (conj-it! out interpose-style-vec style-vec)\n                    (conj-it! out\n                              (trimr-blanks-style-vec interpose-style-vec)\n                              (repeat-element-nl addtl-nl-needed (first sep))\n                              style-vec)))\n                (and comma?\n                     ; We got rid of newlines above\n                     (not= what :comment)\n                     (not= what :comment-inline)\n                     ; Is there a non comment or non newline/indent\n                     ; element\n                     ; left in coll, or is this the last one?\n                     ; This returns the [hangflow style-vec], but we\n                     ; are not\n                     ; using the data, just the existence of the thing\n                     ; here\n                     ; Fix for Issue #137.\n                     (next-non-comment-nl (next coll)))\n                ; should we put an extra new-line before the next\n                ; element?\n                ; Two styles here:\n                ;  o  always put one if the previous pair contained a\n                ;  new-line\n                ;     which could be (but is not) the default\n                ;     To do this you would do:\n                ;       (and nl-separator? (not (single-line?\n                ;       style-vec)))\n                ;  o  put one only if the previous right hand part of\n                ;  the\n                ;     pair did a flow (which is the current default)\n                ;     To do this, you look for whether or not the\n                ;     return\n                ;     from fzprint-map-two-up said it was a flow\n                (or (and nl-separator? (= hangflow :flow)) nl-separator-all?)\n                nil ;first?\n                0 ;newline-count\n              )))))))\n\n(defn interpose-nl-hf\n  \"Put a single or double line between pairs returned from\n  fzprint-map-two-up.  The second argument is the map resulting\n  from (:map options) or (:pair options) or whatever.  It should\n  have :nl-separator? and :nl-separator-all? in it.\"\n  [suboptions ind coll]\n  (interpose-either-nl-hf nil\n                          nil\n                          [[(str \"\\n\" (blanks ind)) :none :indent 29]]\n                          [[(str \"\\n\") :none :indent 30]\n                           [(str \"\\n\" (blanks ind)) :none :indent 31]]\n                          suboptions\n                          nil ; comma?\n                          coll))\n\n(defn fzprint-map*\n  [caller l-str r-str\n   {:keys [one-line? ztype map-depth in-code?],\n    {:keys [comma? key-ignore key-ignore-silent nl-separator? force-nl? lift-ns?\n            lift-ns-in-code? indent],\n     :as map-options}\n      caller,\n    :as options} ind zloc ns]\n  (let [[respect-nl? respect-bl? indent-only?]\n          (get-respect-indent options caller :map)]\n    (dbg-pr options \"fzprint-map* caller:\" caller)\n    (if indent-only?\n      (let [options (assoc options :map-depth (inc map-depth))\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options ind zloc r-str)]\n        (if (zero? (zcount zloc))\n          (concat-no-nil l-str-vec r-str-vec)\n          (concat-no-nil l-str-vec\n                         (fzprint-indent caller\n                                         l-str\n                                         r-str\n                                         options\n                                         ind\n                                         zloc\n                                         nil ;fn-style\n                                         nil) ;arg-1-indent, will prevent hang\n                         r-str-vec)))\n      (let [options (assoc options :map-depth (inc map-depth))\n            zloc (if (and (= ztype :sexpr) (or key-ignore key-ignore-silent))\n                   (map-ignore caller options zloc)\n                   zloc)\n            ; TODO: fix this?\n            #_#_options\n              (assoc options\n                :call-stack (conj\n                              (:call-stack options)\n                              {:tag (ztag zloc), :caller caller, :zloc zloc}))\n            [no-sort? pair-seq] (partition-all-2-nc\n                                  caller\n                                  (no-max-length options)\n                                  (cond respect-nl? (zseqnws-w-nl zloc)\n                                        respect-bl? (zseqnws-w-bl zloc)\n                                        :else (zseqnws zloc)))\n            #_(dbg-pr \"fzprint-map* pair-seq:\"\n                      (map (comp zstring first) pair-seq))\n            ; don't sort if we are doing respect-nl?\n            no-sort? (or no-sort? respect-nl? respect-bl?)\n            [ns lift-pair-seq]\n              (zlift-ns (assoc map-options :in-code? in-code?) pair-seq ns)\n            _ (dbg-pr options\n                      \"fzprint-map* zlift-ns ns:\" ns\n                      \"no-sort?\" no-sort?)\n            l-str (if ns (str \"#\" ns l-str) l-str)\n            pair-seq (or lift-pair-seq pair-seq)\n            pair-seq\n              (if no-sort? pair-seq (order-out caller options first pair-seq))\n            ; This is where you might put max-length\n            max-length (get-max-length options)\n            pair-count (count pair-seq)\n            pair-seq (if (> pair-count max-length)\n                       (concat (take max-length pair-seq)\n                               (list (list (zdotdotdot))))\n                       pair-seq)\n            indent (count l-str)\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options ind zloc r-str)]\n        (if (empty? pair-seq)\n          (concat-no-nil l-str-vec r-str-vec)\n          (let [_ (dbg-pr options\n                          \"fzprint-map*:\" (zstring zloc)\n                          \"ind:\" ind\n                          \"comma?\" comma?\n                          \"rightcnt:\" (:rightcnt options))\n                ; A possible one line representation of this map, but this is\n                ; optimistic and needs to be validated.\n                pair-print-one-line\n                  (fzprint-map-two-up\n                    caller\n                    (if one-line? options (assoc options :one-line? true))\n                    (+ indent ind)\n                    comma?\n                    pair-seq)\n                pair-print-one-line (remove-hangflow pair-print-one-line)\n                ; Does it fit on line line?\n                pair-print-one-line (when (fzfit-one-line\n                                            options\n                                            (style-lines options\n                                                         (+ indent ind)\n                                                         pair-print-one-line))\n                                      pair-print-one-line)\n                one-line (when pair-print-one-line\n                           (apply concat-no-nil\n                             (interpose-either [[\",\" (zcolor-map options :comma)\n                                                 :whitespace 19]\n                                                [\" \" :none :whitespace 23]]\n                                               [[\" \" :none :whitespace 20]]\n                                               (constantly comma?)\n                                               pair-print-one-line)))\n                one-line-lines (style-lines options (+ indent ind) one-line)\n                one-line (when (fzfit-one-line options one-line-lines)\n                           one-line)]\n            (if one-line\n              (concat-no-nil l-str-vec one-line r-str-vec)\n              ; It didn't fit on one line.\n              (when (not one-line?)\n                ; We weren't required to fit it on one line\n                (let [pair-print (fzprint-map-two-up caller\n                                                     options\n                                                     (+ indent ind)\n                                                     comma?\n                                                     pair-seq)]\n                  (concat-no-nil\n                    l-str-vec\n                    (interpose-either-nl-hf\n                      ; comma? true\n                      [[\",\" (zcolor-map options :comma) :whitespace 21]\n                       [(str \"\\n\" (blanks (inc ind))) :none :indent 32]]\n                      [[\",\" (zcolor-map options :comma) :whitespace 22]\n                       ; Fix issue #59 -- don't\n                       ; put blanks to indent before the next \\n\n                       [\"\\n\" :none :indent 33]\n                       [(str \"\\n\" (blanks (inc ind))) :none :indent 34]]\n                      ; comma? nil\n                      [[(str \"\\n\" (blanks (inc ind))) :none :indent 35]]\n                      [[\"\\n\" :none :indent 36]\n                       [(str \"\\n\" (blanks (inc ind))) :none :indent 37]]\n                      (:map options) ;nl-separator?\n                      comma?\n                      pair-print)\n                    r-str-vec))))))))))\n\n(defn fzprint-map\n  \"Format a real map.\"\n  [options ind zloc]\n  (let [[ns lifted-map]\n          (when (znamespacedmap? zloc)\n            ; Only true when operating on zippers\n            (let [zloc-seq (zmap identity zloc)]\n              (dbg-pr options \"fzprint-map: zloc-seq\" (map zstring zloc-seq))\n              [(zstring (first zloc-seq)) (second zloc-seq)]))]\n    (dbg-pr options\n            \"fzprint-map: ns:\" ns\n            \"indent:\" (:indent (:map options))\n            \"map-options:\" (dissoc (:map options) :key-value-options))\n    (if ns\n      (fzprint-map* :map\n                    \"{\"\n                    #_(str \"#\" ns \"{\")\n                    \"}\"\n                    (rightmost options)\n                    ind\n                    lifted-map\n                    ns)\n      (fzprint-map* :map \"{\" \"}\" (rightmost options) ind zloc nil))))\n\n(defn object-str?\n  \"Return true if the string starts with #object[\"\n  [s]\n  (re-find #\"^#object\\[\" s))\n\n(defn fzprint-object\n  \"Print something that looks like #object[...] in a way\n  that will acknowledge the structure inside of the [...]\"\n  ([options ind zloc zloc-value]\n   (fzprint-vec* :object\n                 \"#object[\"\n                 \"]\"\n                 options\n                 ind\n                 (zobj-to-vec zloc zloc-value)))\n  ([options ind zloc]\n   (fzprint-vec* :object \"#object[\" \"]\" options ind (zobj-to-vec zloc))))\n\n(defn hash-identity-str\n  \"Find the hash-code identity for an object.\"\n  [obj]\n  #?(:bb (str (hash obj))\n     :clj (Integer/toHexString (System/identityHashCode obj))\n     :cljs (str (hash obj))))\n\n; (with-out-str\n;    (printf \"%08x\" (System/identityHashCode obj))))\n\n(defn fzprint-atom\n  [{{:keys [object?]} :atom, :as options} ind zloc]\n  (if (and object? (object-str? (zstring zloc)))\n    (fzprint-object options ind zloc (zderef zloc))\n    (let [l-str \"#<\"\n          r-str \">\"\n          indent (count l-str)\n          l-str-vec [[l-str (zcolor-map options l-str) :left]]\n          r-str-vec (rstr-vec options ind zloc r-str)\n          arg-1 (str \"Atom@\" (hash-identity-str zloc))\n          arg-1-indent (+ ind indent 1 (count arg-1))]\n      (dbg-pr options\n              \"fzprint-atom: arg-1:\" arg-1\n              \"zstring arg-1:\" (zstring zloc))\n      (concat-no-nil l-str-vec\n                     [[arg-1 (zcolor-map options :none) :element]]\n                     (fzprint-hang-one :unknown\n                                       (rightmost options)\n                                       arg-1-indent\n                                       (+ indent ind)\n                                       (zderef zloc))\n                     r-str-vec))))\n\n(defn fzprint-future-promise-delay-agent\n  \"Print out a future or a promise or a delay.  These can only be \n  sexpressions, since they don't exist in a textual representation \n  of code (or data for that matter).  That means that we can use \n  regular sexpression operations on zloc.\"\n  [options ind zloc]\n  (let [zloc-type (cond (zfuture? zloc) :future\n                        (zpromise? zloc) :promise\n                        (zdelay? zloc) :delay\n                        (zagent? zloc) :agent\n                        :else (throw (#?(:clj Exception.\n                                         :cljs js/Error.)\n                                      \"Not a future, promise, or delay:\"\n                                      (zstring zloc))))]\n    (if (and (:object? (options zloc-type)) (object-str? (zstring zloc)))\n      (if (or (= zloc-type :agent) (realized? zloc))\n        (fzprint-object options ind zloc (zderef zloc))\n        (fzprint-object options ind zloc))\n      (let [l-str \"#<\"\n            r-str \">\"\n            indent (count l-str)\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options ind zloc r-str)\n            type-str (case zloc-type\n                       :future \"Future@\"\n                       :promise \"Promise@\"\n                       :delay \"Delay@\"\n                       :agent \"Agent@\")\n            arg-1 (str type-str (hash-identity-str zloc))\n            #?@(:bb [_ nil]\n                :clj [arg-1\n                      (if (and (= zloc-type :agent) (agent-error zloc))\n                        (str arg-1 \" FAILED\")\n                        arg-1)])\n              arg-1-indent\n            (+ ind indent 1 (count arg-1)) zloc-realized?\n            (if (= zloc-type :agent) true (realized? zloc)) value\n            (if zloc-realized?\n              (zderef zloc)\n              (case zloc-type\n                :future \"pending\"\n                :promise \"not-delivered\"\n                :delay \"pending\"))\n              options\n            (if zloc-realized? options (assoc options :string-str? true))]\n        (dbg-pr options\n                \"fzprint-fpda: arg-1:\" arg-1\n                \"zstring arg-1:\" (zstring zloc))\n        (concat-no-nil l-str-vec\n                       [[arg-1 (zcolor-map options :none) :element]]\n                       (fzprint-hang-one :unknown\n                                         (rightmost options)\n                                         arg-1-indent\n                                         (+ indent ind)\n                                         value)\n                       r-str-vec)))))\n\n(defn fzprint-fn-obj\n  \"Print a function object, what you get when you put a function in\n  a collection, for instance.  This doesn't do macros, you will notice.\n  It also can't be invoked when zloc is a zipper.\"\n  [{{:keys [object?]} :fn-obj, :as options} ind zloc]\n  (if (and object? (object-str? (zstring zloc)))\n    (fzprint-object options ind zloc)\n    (let [l-str \"#<\"\n          r-str \">\"\n          indent (count l-str)\n          l-str-vec [[l-str (zcolor-map options :fn) :left]]\n          r-str-vec (rstr-vec options ind zloc r-str :fn)\n          arg-1-left \"Fn@\"\n          arg-1-right (hash-identity-str zloc)\n          arg-1-indent (+ ind indent 1 (count arg-1-left) (count arg-1-right))\n          class-str (pr-str #?(:clj (class zloc)\n                               :cljs (type zloc)))\n          #?@(:clj [[class-name & more]\n                    (s/split (s/replace-first class-str #\"\\$\" \"/\") #\"\\$\") color\n                    (if (re-find #\"clojure\" class-name)\n                      (zcolor-map options :fn)\n                      :none) arg-2 (str class-name (when more \"[fn]\"))]\n              :cljs [name-js (str (.-name zloc)) color\n                     (if (or (re-find #\"^clojure\" name-js)\n                             (re-find #\"^cljs\" name-js))\n                       (zcolor-map options :fn)\n                       :none) name-split (clojure.string/split name-js #\"\\$\")\n                     arg-2\n                     (str (apply str (interpose \".\" (butlast name-split)))\n                          \"/\"\n                          (last name-split))])]\n      (dbg-pr options\n              \"fzprint-fn-obj: arg-1:\"\n              arg-1-left\n              arg-1-right\n              \"zstring arg-1:\"\n              (zstring zloc))\n      (concat-no-nil l-str-vec\n                     [[arg-1-left (zcolor-map options :fn) :element]]\n                     [[arg-1-right (zcolor-map options :none) :element]]\n                     (fzprint-hang-one :unknown\n                                       (rightmost (assoc options\n                                                    :string-str? true\n                                                    :string-color color))\n                                       arg-1-indent\n                                       (+ indent ind)\n                                       arg-2)\n                     r-str-vec))))\n\n(defn fzprint-ns\n  [options ind zloc]\n  (let [l-str \"#<\"\n        r-str \">\"\n        indent (count l-str)\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options ind zloc r-str)\n        arg-1 \"Namespace\"\n        arg-1-indent (+ ind indent 1 (count arg-1))]\n    (dbg-pr options \"fzprint-ns: arg-1:\" arg-1 \"zstring arg-1:\" (zstring zloc))\n    (concat-no-nil l-str-vec\n                   [[arg-1 (zcolor-map options :none) :element]]\n                   (fzprint-hang-one :unknown\n                                     (rightmost options)\n                                     arg-1-indent\n                                     (+ indent ind)\n                                     (ns-name zloc))\n                   r-str-vec)))\n\n(defn dec-depth\n  \"Given an options map, decrement the :depth value and return the result.\"\n  [options]\n  (when options (assoc options :depth (dec (or (:depth options) 1)))))\n\n(defn fzprint-record\n  [{{:keys [record-type? to-string?]} :record, :as options} ind zloc]\n  (if to-string?\n    (fzprint* options ind (. zloc toString))\n    (if-not record-type?\n      ; if not printing as record-type, turn it into map\n      (fzprint* options ind (into {} zloc))\n      (let [l-str \"#\"\n            r-str \"\"\n            indent (count l-str)\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options ind zloc r-str)\n            arg-1 #?(:clj (pr-str (class zloc))\n                     :cljs\n                       (clojure.string/replace (pr-str (type zloc)) \"/\" \".\"))\n            arg-1 (let [tokens (clojure.string/split arg-1 #\"\\.\")]\n                    (apply str (into [] (interpose \".\" tokens))))\n            arg-1-indent (+ ind indent 1 (count arg-1))]\n        (dbg-pr options\n                \"fzprint-record: arg-1:\" arg-1\n                \"zstring zloc:\" (zstring zloc))\n        (concat-no-nil l-str-vec\n                       [[arg-1 (zcolor-map options :none) :element]]\n                       (fzprint-hang-one :record\n                                         (dec-depth options)\n                                         ;(rightmost options)\n                                         arg-1-indent\n                                         (+ indent ind)\n                                         ; this only works because\n                                         ; we never actually get here\n                                         ; with a zipper, just an sexpr\n                                         (into {} zloc))\n                       r-str-vec)))))\n\n(defn fzprint-meta\n  \"Print the two items in a meta node.  Different because it doesn't print\n  a single collection, so it doesn't do any indent or rightmost.  It also\n  uses a different approach to calling fzprint-flow-seq with the\n  results zmap, so that it prints all of the seq, not just the rightmost.\"\n  [options ind zloc]\n  (let [l-str \"^\"\n        r-str \"\"\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options ind zloc r-str)\n        zloc-seq (fzprint-get-zloc-seq :list options zloc)]\n    (dbg-pr options \"fzprint-meta: zloc:\" (zstring zloc))\n    (concat-no-nil l-str-vec\n                   (if (:indent-only? (:list options))\n                     ; Since l-str isn't a \"pair\" and shouldn't be considered in\n                     ; the\n                     ; indent, we don't tell fzprint-indent abouit.\n                     (fzprint-indent :vector\n                                     l-str\n                                     \"\"\n                                     options\n                                     ind\n                                     zloc\n                                     nil\n                                     nil\n                                     :first-indent-only?)\n                     (fzprint-flow-seq\n                       ; No rightmost, because this isn't a collection.\n                       ; This is essentially two separate things.\n                       options\n                       ; no indent for second line, as the leading ^ is\n                       ; not a normal collection beginning\n                       ; Generate a separate indent for the first thing, and use\n                       ; ind\n                       ; for the remaining.\n                       (apply vector\n                         (+ (count l-str) ind)\n                         (repeat (dec (count zloc-seq)) ind))\n                       zloc-seq))\n                   r-str-vec)))\n\n(defn fzprint-reader-macro\n  \"Print a reader-macro, often a reader-conditional. Adapted for differences\n  in parsing #?@ between rewrite-clj and rewrite-cljs.  Also adapted for\n  the rewrite-clj not parsing namespaced maps in the version presently\n  used.\"\n  [options ind zloc]\n  (let [zstr (zstring (zfirst zloc))\n        ; rewrite-cljs parses #?@ differently from rewrite-clj.  In\n        ; rewrite-cljs zfirst is ?@, not ?, so deal with that.\n        ; Not clear which is correct, I could see it go either way.\n        alt-at? (and (= (count zstr) 2) (= (subs zstr 1 2) \"@\"))\n        reader-cond? (= (subs zstr 0 1) \"?\")\n        ; are we dealing with a namespaced map?\n        ; 5/30/19 I don't know if we ever encounter this anymore...\n        ; Was unable to get namespaced? to be true despite running all 616\n        ; tests and some repl testing as well.\n        namespaced? (= (subs zstr 0 1) \":\")\n        at? (or (= (ztag (zsecond zloc)) :deref) alt-at?)\n        ; If :reader-cond doesn't have these things, then let :map govern\n        [respect-nl? respect-bl? indent-only?]\n          (get-respect-indent options :reader-cond :map)\n        l-str (cond (and reader-cond? at?) \"#?@\"\n                    (and reader-cond? (zcoll? (zsecond zloc))) \"#?\"\n                    reader-cond?\n                      (throw (#?(:clj Exception.\n                                 :cljs js/Error.)\n                              (str \"Unknown reader macro: '\" (zstring zloc)\n                                   \"' zfirst zloc: \" (zstring (zfirst zloc)))))\n                    namespaced? (str \"#\" zstr)\n                    :else \"#\")\n        r-str \"\"\n        ; Error to debug zpst\n        _ (when (:dbg-bug? options)\n            #?(:clj (+ \"a\" \"b\")\n               :cljs nil))\n        indent (count l-str)\n        ; we may want to color this based on something other than\n        ; its actual character string\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options ind zloc r-str)\n        floc\n          (if (and at? (not alt-at?)) (zfirst (zsecond zloc)) (zsecond zloc))]\n    (dbg-pr options\n            \"fzprint-reader-macro: zloc:\" (zstring zloc)\n            \"floc:\" (zstring floc)\n            \"l-str:\" l-str)\n    ; This isn't really all that correct, but does yield the right output.\n    ; Question about whether or not it does the right stuff for focus.\n    ; Maybe there is some way to call fzprint-indent with just the\n    ; #? and \"\", and let it deal with the underlying list. I don't know\n    ; if that would be possible, though maybe if we carefully positioned\n    ; the floc for that case.  But could we hack in the [\"\" :none :element]\n    ; in that case? At present documented that focus and :indent-only\n    ; don't work together..\n    (if indent-only?\n      (let [l-str-io (if reader-cond? (str l-str \"(\") l-str)\n            r-str-io (if reader-cond? \")\" \"\")\n            l-str-vec-io [[l-str-io (zcolor-map options l-str-io) :left]]\n            r-str-vec-io (rstr-vec options ind zloc r-str-io)]\n        (concat-no-nil\n          l-str-vec-io\n          (if reader-cond?\n            (fzprint-indent :map\n                            l-str-io\n                            r-str-io\n                            (rightmost options)\n                            ind\n                            floc\n                            nil ;fn-style\n                            nil) ;arg-1-indent, will prevent hang\n            (fzprint-indent :map\n                            l-str-io\n                            r-str-io\n                            (rightmost options)\n                            ind\n                            (if namespaced? (znextnws-w-nl zloc) zloc)\n                            nil ; fn-style\n                            nil) ;arg-1-indent\n          )\n          r-str-vec-io))\n      (concat-no-nil\n        l-str-vec\n        ; Because there is a token here in the zipper, we need something to\n        ; make the focus positioning come out right.\n        [[\"\" :none :element]]\n        (if reader-cond?\n          ; yes rightmost, this is a collection\n          (fzprint-map* :reader-cond\n                        \"(\"\n                        \")\"\n                        (rightmost options)\n                        ; Here is where we might adjust the indent, but if\n                        ; we do it here (since this looks like a list), we\n                        ; also have to deal with it when the map code is\n                        ; doing the next thing (like :cljs after :clj). If\n                        ; you just (dec indent) here you break 14 tests.\n                        (+ indent ind)\n                        floc\n                        nil)\n          ; not reader-cond?\n          (fzprint-flow-seq options\n                            (+ indent ind)\n                            (let [zloc-seq\n                                    (cond respect-nl? (zmap-w-nl identity zloc)\n                                          respect-bl? (zmap-w-bl identity zloc)\n                                          :else (zmap identity zloc))]\n                              (if namespaced? (next zloc-seq) zloc-seq))))\n        r-str-vec))))\n\n(defn fzprint-newline\n  \"Given an element which contains newlines, split it up into individual\n  newline elements.\"\n  [options ind zloc]\n  (let [zstr (zstring zloc)\n        [newline-count _] (newline-vec zstr)]\n    (dbg-pr options\n            \"fzprint-newline: zloc:\" (zstring zloc)\n            \"newline-count:\" newline-count\n            \"ind:\" ind)\n    (into []\n          (repeat newline-count [(str \"\\n\" (blanks ind)) :none :newline 2]))))\n\n(def prefix-tags\n  {:quote \"'\",\n   :syntax-quote \"`\",\n   :unquote \"~\",\n   :unquote-splicing \"~@\",\n   :deref \"@\",\n   :var \"#'\",\n   :uneval \"#_\"})\n\n(defn prefix-options\n  \"Change options as necessary based on prefix tag.\"\n  [options prefix-tag]\n  (cond (= prefix-tag :uneval) (assoc options\n                                 :color-map (:color-map (:uneval options)))\n        (= prefix-tag :syntax-quote)\n          (-> options\n              (assoc-in [:color-map :paren]\n                        (:syntax-quote-paren (:color-map options)))\n              (assoc-in [:color-map :hash-paren]\n                        (:syntax-quote-paren (:color-map options))))\n        :else options))\n\n(defn make-caller\n  \"Sometime we need to give a caller to a routine, and there isn't\n  a specific caller in the configuration.  So, we will use the configuration\n  from some other caller and make up a new one just for this situation.\n  The key-seq is the series of keys to both look up and create.  The\n  caller is the new caller, and the existing-caller is the one from which\n  we we will extract the information. This returns a new options map with\n  the new-caller in it.\"\n  [options new-caller existing-caller key-seq]\n  (update-in options\n             (concat [new-caller] key-seq)\n             #(do % (get-in options (concat [existing-caller] key-seq)))))\n\n;; Fix fzprint* to look at cursor to see if there is one, and\n;; fzprint to set cursor with binding.  If this works, might pass\n;; it around.  Maybe pass ctx to everyone and they can look at it\n;; or something.  But for testing, let's just do this.\n\n(defn integrate-next-inner\n  \"If the value of :next-inner is a map, then config-and-validate it. If\n  the value of :next-inner is a vector of maps, then config-and-validate\n  each of the maps in turn.\"\n  [options]\n  (let [next-inner (:next-inner options :unset)]\n    (cond (map? next-inner) (first (zprint.config/config-and-validate\n                                     \"next-inner:\"\n                                     nil\n                                     (dissoc options :next-inner)\n                                     next-inner\n                                     nil ; validate?\n                                   ))\n          (vector? next-inner) (reduce #(first\n                                          (zprint.config/config-and-validate\n                                            \"next-inner-vector\"\n                                            nil\n                                            %1\n                                            %2\n                                            nil))\n                                 (dissoc options :next-inner)\n                                 next-inner)\n          (= next-inner :unset) options\n          :else options)))\n\n;;\n;; # The center of the zprint universe\n;;\n;; Looked into alternative ways to dispatch this, but at the end of\n;; the day, this looked like the best.\n;;\n\n(defn fzprint*\n  \"The pretty print part of fzprint.\"\n  [{:keys [width rightcnt hex? shift-seq dbg? dbg-print? dbg-s in-hang?\n           one-line? string-str? string-color depth max-depth trim-comments?\n           in-code? max-hang-depth max-hang-span max-hang-count next-inner],\n    :as options} indent zloc]\n  (let [avail (- width indent)\n        ; note that depth affects how comments are printed, toward the end\n        options (assoc options :depth (inc depth))\n        ; Can't use dbg-s directly here, as it is also a local value!\n        _ (dbg-s-pr options\n                    :next-inner\n                    \"fzprint* **** next-inner:\"\n                    (:next-inner options))\n        options (if next-inner\n                  ; There are two kinds of next-inner maps.  The normal\n                  ; kind is something to add to the current options map,\n                  ; and to do that, we will use config-and-validate for\n                  ; reasons explained below.  The other kind is a map that\n                  ; was saved and we are just restoring it, and that will\n                  ; entirely replace the current options map.\n                  (integrate-next-inner options)\n                  options)\n        options (if (or dbg? dbg-print? dbg-s)\n                  (assoc options\n                    :dbg-indent (str (get options :dbg-indent \"\")\n                                     (cond one-line? \"o\"\n                                           in-hang? \"h\"\n                                           :else \".\")))\n                  options)\n        _ (dbg-s-pr options\n                    :next-inner\n                    \"fzprint* **** rightcnt:\"\n                    rightcnt\n                    \"depth:\"\n                    depth\n                    \"indent:\"\n                    indent\n                    \"in-hang?:\"\n                    in-hang?\n                    \":next-inner:\"\n                    (:next-inner options)\n                    (pr-str (zstring zloc)))\n        dbg-data @fzprint-dbg\n        dbg-focus? (and dbg? (= dbg-data (second (zfind-path zloc))))\n        options (if dbg-focus? (assoc options :dbg :on) options)\n        _ (if dbg-focus? (println \"fzprint dbg-data:\" dbg-data))]\n    #_(def zlocx zloc)\n    ; We don't check depth if it is not a collection.  We might have\n    ; just not incremented depth if it wasn't a collection, but this\n    ; may be equivalent.\n    (cond\n      (and (zcoll? zloc)\n           (or (>= depth max-depth) (zero? (get-max-length options))))\n        (if (= zloc (zdotdotdot))\n          [[\"...\" (zcolor-map options :none) :element]]\n          [[(:max-depth-string options) (zcolor-map options :keyword)\n            :element]])\n      ; Try to fix up runaway exponential time increases with very deep\n      ; strucures.  Note this is typically only affects maps, but it would\n      ; affect lists that were not code.\n      (and in-hang?\n           (not one-line?)\n           (not in-code?)\n           ;(> (/ indent width) 0.3)\n           (or (> (- depth in-hang?) max-hang-span)\n               (and (not one-line?)\n                    (> (zcount zloc) max-hang-count)\n                    (> depth max-hang-depth))))\n        nil\n      (zrecord? zloc) (fzprint-record options indent zloc)\n      (zlist? zloc) (fzprint-list options indent zloc)\n      (zvector? zloc) (fzprint-vec options indent zloc)\n      (or (zmap? zloc) (znamespacedmap? zloc)) (fzprint-map options indent zloc)\n      (zset? zloc) (fzprint-set options indent zloc)\n      (zanonfn? zloc) (fzprint-anon-fn options indent zloc)\n      (zfn-obj? zloc) (fzprint-fn-obj options indent zloc)\n      (zarray? zloc)\n        (if (:object? (:array options))\n          (fzprint-object options indent zloc)\n          (fzprint-array #?(:clj (if (:hex? (:array options))\n                                   (assoc options\n                                     :hex? (:hex? (:array options))\n                                     :shift-seq (zarray-to-shift-seq zloc))\n                                   options)\n                            :cljs options)\n                         indent\n                         (zexpandarray zloc)))\n      (zatom? zloc) (fzprint-atom options indent zloc)\n      (zmeta? zloc) (fzprint-meta options indent zloc)\n      (prefix-tags (ztag zloc))\n        (fzprint-vec* :prefix-tags\n                      (prefix-tags (ztag zloc))\n                      \"\"\n                      ; Pick up the :indent-only?, :respect-nl?, and\n                      ; respect-bl? config from :list\n                      ; Note that the routine get-respect-indent exists,\n                      ; and its use in fzprint-vec* and fzprint-map* also\n                      ; solves a similar problem\n                      (-> (prefix-options options (ztag zloc))\n                          (make-caller :prefix-tags :list [:indent-only?])\n                          (make-caller :prefix-tags :list [:respect-nl?])\n                          (make-caller :prefix-tags :list [:respect-bl?]))\n                      indent\n                      zloc)\n      (zns? zloc) (fzprint-ns options indent zloc)\n      (or (zpromise? zloc) (zfuture? zloc) (zdelay? zloc) (zagent? zloc))\n        (fzprint-future-promise-delay-agent options indent zloc)\n      (zreader-macro? zloc) (fzprint-reader-macro options indent zloc)\n      ; This is needed to not be there for newlines in parse-string-all,\n      ; but is needed for respect-nl? support.\n      ;(and (= (ztag zloc) :newline) (> depth 0)) [[\"\\n\" :none :newline]]\n      (and (= (ztag zloc) :newline) (> depth 0))\n        (fzprint-newline options indent zloc)\n      :else\n        (let [zstr (zstring zloc)\n              overflow-in-hang? (and in-hang?\n                                     (> (+ (count zstr) indent (or rightcnt 0))\n                                        width))]\n          (cond\n            (and (zcomment? zloc) (not (some #{\\;} zstr)))\n              ; We should remvoe them when we get zutil fixed.\n              (fzprint-newline options indent zloc)\n            (zcomment? zloc)\n              (let [zcomment\n                      ; trim-comments? is true for parse-string-all\n                      (if (and (zero? depth) (not trim-comments?))\n                        zstr\n                        ; Remove trailing newlines and spaces\n                        (clojure.string/trimr zstr))\n                    ; Only check for inline comments if we are doing them\n                    ; otherwise we get left with :comment-inline element\n                    ; types that don't go away\n                    inline-comment-vec (when (:inline? (:comment options))\n                                         (inlinecomment? zloc))]\n                (dbg options\n                     \"fzprint* trim-comments?:\" trim-comments?\n                     \"inline-comment-vec:\" inline-comment-vec)\n                (if (and (:count? (:comment options)) overflow-in-hang?)\n                  (do (dbg options \"fzprint*: overflow comment ========\") nil)\n                  (if inline-comment-vec\n                    [[zcomment (zcolor-map options :comment) :comment-inline\n                      (first inline-comment-vec) (second inline-comment-vec)]]\n                    [[zcomment (zcolor-map options :comment) :comment]])))\n            (= (ztag zloc) :comma) [[zstr (zcolor-map options :comma) :comma]]\n            #?@(:cljs [(and (= (ztag zloc) :whitespace)\n                            (clojure.string/includes? zstr \",\"))])\n              #?@(:cljs [[[\",\" (zcolor-map options :comma) :comma]]])\n            ; Really just testing for whitespace, comments filtered above\n            (zwhitespaceorcomment? zloc) [[zstr :none :whitespace 24]]\n            ; At this point, having filtered out whitespace and\n            ; comments above, now we expect zsexpr will work for all of\n            ; the remaining things.\n            ;\n            ; If we are going to overflow, and we are doing a hang, let's\n            ; stop now!\n            overflow-in-hang? (do (dbg options \"fzprint*: overflow <<<<<<<<<<\")\n                                  nil)\n            (zkeyword? zloc) [[zstr (zcolor-map options :keyword) :element]]\n            :else\n              (let [zloc-sexpr (get-sexpr options zloc)]\n                (cond (string? zloc-sexpr)\n                        [[(if string-str?\n                            (str zloc-sexpr)\n                            ; zstr\n                            (zstring zloc))\n                          (if string-color\n                            string-color\n                            (zcolor-map options :string)) :element]]\n                      (showfn? options zloc-sexpr)\n                        [[zstr (zcolor-map options :fn) :element]]\n                      (show-user-fn? options zloc-sexpr)\n                        [[zstr (zcolor-map options :user-fn) :element]]\n                      (number? zloc-sexpr)\n                        [[(if hex? (znumstr zloc hex? shift-seq) zstr)\n                          (zcolor-map options :number) :element]]\n                      (symbol? zloc-sexpr) [[zstr (zcolor-map options :symbol)\n                                             :element]]\n                      (nil? zloc-sexpr) [[zstr (zcolor-map options :nil)\n                                          :element]]\n                      (true? zloc-sexpr) [[zstr (zcolor-map options :true)\n                                           :element]]\n                      (false? zloc-sexpr) [[zstr (zcolor-map options :false)\n                                            :element]]\n                      (char? zloc-sexpr) [[zstr (zcolor-map options :char)\n                                           :element]]\n                      (or (instance? #?(:clj java.util.regex.Pattern\n                                        :cljs (type #\"regex\"))\n                                     zloc-sexpr)\n                          (re-find #\"^#\\\".*\\\"$\" zstr))\n                        [[zstr (zcolor-map options :regex) :element]]\n                      :else [[zstr (zcolor-map options :none) :element]])))))))\n\n;;\n;; # External interface to all fzprint functions\n;;\n\n(defn fzprint\n  \"The pretty print part of fzprint.\"\n  [options indent zloc]\n  #_(def opt options)\n  (dbg options \"fzprint: indent:\" indent \"(:indent options)\" (:indent options))\n  ; if we are doing specs, find the docstring and modify it with\n  ; the spec output.\n  #_(println \"fn-name:\" (:fn-name options))\n  #_(println \"spec:\" (:value (:spec options)))\n  (let [zloc (if-not (and (= (:ztype options) :zipper) (:value (:spec options)))\n               zloc\n               (add-spec-to-docstring zloc (:value (:spec options))))\n        style-vec (fzprint* (assoc options\n                              :depth 0\n                              :map-depth 0\n                              ; Add a map of zfns to the options for use\n                              ; by guides that need them.\n                              :zfn-map (zfn-map))\n                            indent\n                            zloc)]\n    #_(def fsv style-vec)\n    style-vec))\n\n;    (if (= (:ztype options) :sexpr)\n;      style-vec\n;      (if (:wrap? (:comment options))\n;        (fzprint-wrap-comments options style-vec)\n;        style-vec))))\n\n;;\n;; # Basic functions for testing results -- used only for tests\n;;\n\n(defn line-count \"Count lines in a string.\" [s] (inc (count (re-seq #\"\\n\" s))))\n\n(defn line-widths\n  \"Return a vector the lengths of lines.\"\n  [s]\n  (map count (clojure.string/split s #\"\\n\")))\n\n(defn max-width\n  \"Split a string into lines, and figure the max width.\"\n  [s]\n  (reduce max (line-widths s)))\n\n;;\n;; # Tab Expansion\n;;\n\n(defn expand-tabs\n  \"Takes a string, and expands tabs inside of the string based\n  on a tab-size argument.\"\n  ([tab-size s]\n   ; If we don't have tabs, don't do anything.\n   (if (clojure.string/includes? s \"\\t\")\n     (apply str\n       (loop [char-seq (seq s)\n              cur-len (long 0)\n              out (transient [])]\n         (if (empty? char-seq)\n           (persistent! out)\n           (let [this-char (first char-seq)\n                 tab-expansion (if (= this-char \\tab)\n                                 (- tab-size (mod cur-len tab-size))\n                                 nil)]\n             (recur (rest char-seq)\n                    (if (= this-char \\newline)\n                      0\n                      (+ cur-len (long (or tab-expansion 1))))\n                    (if tab-expansion\n                      (apply conj-it! out (repeat tab-expansion \\space))\n                      (conj! out this-char)))))))\n     s))\n  ([s] (expand-tabs 8 s)))\n\n;;\n;; # Line Endings\n;;\n\n(defn determine-ending-split-lines\n  \"Given a string, find the line ending that is predominent in the beginning\n  of the string, and split the string into separate lines.  Returns \n  [line-ending-string vector-of-lines]\"\n  [s]\n  (if (clojure.string/includes? s \"\\r\")\n    ; Figure out the line endings\n    (let [lines (clojure.string/split s #\"\\r\\n|\\r|\\n\" -1)\n          first-lines (clojure.string/split (subs s 0 (min (count s) 2000))\n                                            #\"\\r\")\n          #_(prn \"first-lines:\" first-lines)\n          nl-count\n            (reduce #(if (clojure.string/starts-with? %2 \"\\n\") (inc %1) %1)\n              0\n              first-lines)\n          #_(prn \"nl-count:\" nl-count)\n          line-ending (if (>= nl-count (/ (count first-lines) 2)) \"\\r\\n\" \"\\r\")]\n      [line-ending lines])\n    ; If no \\r, then we assume \\n line endings\n    [\"\\n\" (clojure.string/split s #\"\\n\" -1)]))\n\n;;\n;; # Needed for expectations testing\n;;\n;; Seems defrecord doesn't work in test environment, which is pretty odd.\n;;\n\n(defrecord r [left right])\n(defn make-record [left right] (new r left right))\n\n;;\n;; End of testing functions\n;;\n"]}